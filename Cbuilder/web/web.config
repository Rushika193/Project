<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="%LAUNCHER_PATH%" arguments="%LAUNCHER_ARGS%" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" hostingModel="inprocess">
        <environmentVariables>
          <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Development" />
          <environmentVariable name="COMPLUS_ForceENC" value="1" />
          <environmentVariable name="ASPNETCORE_HTTPS_PORT" value="44344" />
        </environmentVariables>
      </aspNetCore>
      <httpProtocol>
        <customHeaders>
          <!--Removing  information sent in HTTP responses-->
          <remove name="Server" />
          <remove name="X-AspNet-Version" />
          <remove name="X-Powered-By" />
          <!-- The X-Xss-Protection header will cause most modern browsers to stop loading the page when a cross-site scripting attack is identified
          X-XSS-Protection sets the configuration for the cross-site scripting filter built into most browsers. Recommended value "X-XSS-Protection: 1; mode=block". -->
          <add name="X-XSS-Protection" value="1; mode=block" />
          <!-- X-Frame-Options tells the browser whether you want to allow your site to be framed or not. 
                 By preventing a browser from framing your site you can defend against attacks like clickjacking. 
                 Recommended value "x-frame-options: SAMEORIGIN" -->
          <add name="X-Frame-Options" value="SAMEORIGIN" />
          <!--Sending the new X-Content-Type-Options response header with the value 'nosniff' will prevent  primarily old Browser from MIME-sniffing a response away from the declared content-type. -->
          <add name="X-Content-Type-Options" value="nosniff" />
          <!--app.UseHsts(); is used this in startup-->
          <!--<add name="Strict-Transport-Security" value="max-age=31536000; includeSubDomains" />-->
          <!--https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP  report-uri http://example.com/collector.cgi -->
          <add name="Content-Security-Policy" value="default-src 'self'; connect-src *; font-src * data:; frame-src *; img-src * data:; media-src *; object-src *; script-src * 'unsafe-inline' 'unsafe-eval'; style-src * 'unsafe-inline';" />
          <!--https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy-->
          <add name="Referrer-Policy" value="same-origin" />
          <!--The HTTP Feature-Policy header provides a mechanism to allow and deny the use of browser features in its own frame, and in content within any <iframe> elements in the document.
            https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy-->
          <add name="Feature-Policy" value="accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment *; usb 'none'" />
          <!-- Setting X-Permitted-Cross-Domain-Policies header to “master-only” will instruct Flash and PDF files that 
                 they should only read the master crossdomain.xml file from the root of the website. 
                 https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html -->
          <add name="X-Permitted-Cross-Domain-Policies" value="master-only" />
        </customHeaders>
      </httpProtocol>
    </system.webServer>
  </location>
</configuration>