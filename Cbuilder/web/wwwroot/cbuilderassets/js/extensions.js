var extendedComps = {
    "accordion": {
        "componentname": "accordion",
        "category": "advance",
        "icon": "fa fa-archive",
        "row": false,
        "hidden": false,
        "bucket": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM('accordion/accordionview'),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if ($(document).find('#hdnAccordianSettingAttr').length <= 0)
                $('body').append('<div data-attribute="" style="display: none;" id="hdnAccordianSettingAttr"></div>');
            let AccorSpeed = 500;
            $('.accordianTitle').off('click').on('click', function () {
                let $this = $(this);
                let $thisParent = $this.parents('.accordianWrap').eq(0);
                let AccorItems = $thisParent.find('>.acordianItem');
                AccorItems.find('>.accordianTitle.active').css('background-color', $thisParent.attr('data-titlebgcolor'));
                AccorItems.find('>.accordianTitle.active h2').css('color', $thisParent.attr('data-titlecolor'));
                AccorItems.find('>.accordianTitle.active .accordian-icon .dis-table i').css('color', $thisParent.attr('data-iconcolor'));
                AccorItems.find('>.accordianTitle.active').next('.acordianContent').slideUp(AccorSpeed);
                AccorItems.find('>.accordianTitle .accordian-icon.static .dis-table i').removeClass('fa-chevron-up').addClass('fa-chevron-down');
                AccorItems.find('>.accordianTitle').removeClass('active');
                let activeAcor = $this.next('.acordianContent');
                if (activeAcor.is(":hidden")) {
                    $this.addClass('active');
                    $this.find('.accordian-icon.static .dis-table i').removeClass('fa-chevron-down').addClass('fa-chevron-up');
                    $this.css('background-color', $thisParent.attr('data-activecolor'));
                    $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                    $this.find('.accordian-icon .dis-table i').css('color', $thisParent.attr('data-activeicon'));
                    activeAcor.slideDown(AccorSpeed);
                } else {
                    $this.removeClass('active');
                    activeAcor.slideUp(AccorSpeed);
                }
            });
            $('.accordianTitle').off('mouseover mouseout').on('mouseover mouseout', function (evt) {
                let $this = $(this);
                let $thisParent = $this.parents('.accordianWrap').eq(0);
                if (evt.type === 'mouseover') {
                    $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                    $this.find('.accordian-icon i').css('color', $thisParent.attr('data-activeicon'));
                    $this.css('background-color', $thisParent.attr('data-hovercolor'));
                } else if (evt.type === "mouseout") {
                    if ($this.hasClass('active')) {
                        $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                        $this.find('.accordian-icon .dis-table i').css('color', $thisParent.attr('data-activeicon'));
                        $this.css('background-color', $thisParent.attr('data-activecolor'));

                    } else {
                        $this.find('h2').css('color', $thisParent.attr('data-titlecolor'));
                        $this.find('.accordian-icon  i').css('color', $thisParent.attr('data-iconcolor'));
                        $this.css('background-color', $thisParent.attr('data-titlebgcolor'));
                    }
                }
            });
        },
        "onsort": function (ui) { },
        "settingDOMs": {
            "tabs": {
                "Data": {
                    "DOM": EasyLibrary.ReadDOM('accordion/accordiondatasetting'),
                    "onload": function ($item) {
                        let attr = $('#hdnAccordianSettingAttr').data('attribute');
                        if (attr !== '') {
                            $('#popupModel').attrs(attr);
                            $('#hdnAccordianSettingAttr').data('attribute', '');
                        }
                        let AccordianDataSetting = {
                            IconClassReg: /fa-\w+(\-*\w*)*/g,
                            SettingButton: $item,
                            Position: 0,
                            Container: $activeDOM,
                            init: function () {
                                let $ItemList = AccordianDataSetting.Container.find('.accordianWrap').eq(0).find('>.acordianItem');
                                let html = '';
                                let AcorLen = $ItemList.length;
                                $ItemList.each(function () {
                                    let $this = $(this);
                                    let Title = $this.find('.accordian-head h2').text();
                                    let $Icon = $this.find('.accordian-icon').not('.accordian-icon.static').find('.dis-table i').attr('class').match(AccordianDataSetting.IconClassReg);
                                    html += '<div class="field-row item accordionItem">';
                                    html += '<div class="field-row stElWrap col100">';
                                    //html += '<span class="fCol">';
                                    html += '<span class="sfCol_10 cPointer TxAl-c"><i class="fa fa-arrows-v accorSort"></i></span>';
                                    html += '<span class="sfCol_10 TxAl-c"><i class="iconChooser in-form-icon fa ' + $Icon + '" title="Click to change icon"></i></span>';
                                    html += '<span class="sfCol_70 cb_input"><input type="text" class="title accordianInput" placeholder="Title" value="' + Title + '" ></span>';
                                    if (AcorLen > 1)
                                        html += '<span class="sfCol_10 TxAl-r"><i title="Delete" class="deleteAccordian fa fa-trash in-form-icon delete-icon"></i></span>';
                                    html += '</div></div>';
                                });
                                $('.accordianEditList').html(html);
                                AccordianDataSetting.UIEvents();
                            },
                            UIEvents: function () {
                                $('.addMoreAccordian').off().on('click', function () {
                                    let LastItem = AccordianDataSetting.Container.find('.acordianItem').last();
                                    let NewDom = document.createElement("div");
                                    $(NewDom).attrs(LastItem.attrs());
                                    $(NewDom).html(LastItem.html());
                                    $(NewDom).find('.acordianContent').css('display', 'none');
                                    AccordianDataSetting.Container.find('.accordianWrap').eq(0).prepend(NewDom);
                                    $('#hdnAccordianSettingAttr').data('attribute', $('#popupModel').attrs());
                                    SettingEvents();
                                    component["accordion"].afterdrop();
                                    AccordianDataSetting.SettingButton.trigger('click');
                                });

                                $('.deleteAccordian').off().on('click', function () {
                                    let $this = $(this);
                                    SageConfirmDialog('Are you sure?').done(function () {
                                        let pos = $('.accordianEditList .item').index($this.closest('.item'));
                                        AccordianDataSetting.Container.find('.accordianWrap').eq(0).find('>.acordianItem').eq(pos).remove();
                                        AccordianDataSetting.init();
                                    });
                                });
                                $('.accordianInput').off().on('keyup', function () {
                                    let $this = $(this);
                                    let $Val = $this.val();
                                    let $pos = $('.accordianEditList .item').index($this.closest('.item'));
                                    let ActiveItem = AccordianDataSetting.Container.find('.accordianWrap').eq(0).find('>.acordianItem').eq($pos);
                                    ActiveItem.find('.accordian-head h2').text($Val);
                                });
                                $('#AccorfontIconCollection').html($('ul#fontIconCollection').html());

                                $('.accordianEditList .iconChooser').off('click').on('click', function () {
                                    let $this = $(this);
                                    $this.parent().parent().parent().after($('.tabcontent .accorIconList'));
                                    AccordianDataSetting.Position = $('.accordianEditList .item').index($this.closest('.item'));
                                    $('.accorIconList').removeClass('Dn');
                                    $('#AccorfontIconCollection').find('li').removeClass('selected');
                                    let CurrentClass = $this.attr('class').match(AccordianDataSetting.IconClassReg)[0];
                                    $('#AccorfontIconCollection').find('li i[data-class="' + CurrentClass + '"]').parent().addClass('selected');

                                });
                                $('.accorIconList .closeIconChooser').off().on('click', function () {
                                    $('.accorIconList').addClass('Dn').insertAfter($('.accordianEditList'));
                                });
                                $('#AccorSearchIcon').on('keyup', function () {
                                    let searchVal = $(this).val();
                                    $('#AccorfontIconCollection').find('li').each(function () {
                                        let $this = $(this);
                                        let dataClass = $this.find('i').attr('data-class');
                                        let pos = dataClass.indexOf(searchVal);
                                        if (pos < 0) {
                                            $this.addClass('Dn');
                                        } else {
                                            $this.removeClass('Dn');
                                        }
                                    });
                                });
                                $('#AccorfontIconCollection').find('li').on('click', function () {

                                    let chooseClass = $(this).find('i').attr('data-class');
                                    $('#AccorfontIconCollection').find('li').removeClass('selected');
                                    $('#AccorfontIconCollection').find('li i[data-class="' + chooseClass + '"]').parent().addClass('selected');
                                    let $FormIcon = $('.accordianEditList .item').eq(AccordianDataSetting.Position).find('i.iconChooser');
                                    let PrevClass = $FormIcon.attr('class').match(AccordianDataSetting.IconClassReg)[0];
                                    $FormIcon.removeClass(PrevClass);
                                    $FormIcon.addClass(chooseClass);
                                    let $ViewIcon = AccordianDataSetting.Container.find('.accordianWrap').eq(0).find('>.acordianItem').eq(AccordianDataSetting.Position).find('.accordian-icon').not('.accordian-icon.static').find('i');
                                    $ViewIcon.removeClass(PrevClass);
                                    $ViewIcon.addClass(chooseClass);
                                    $(".accorIconList .closeIconChooser").trigger("click");
                                });
                                //sortable
                                $('.accorSort').on('mousedown', function () {
                                    $('.accorIconList').find('.closeIconChooser').trigger('click');
                                });
                                $(".accordianEditList").AdvanceSorting({
                                    targetParent: $item.closest('.SetHdlr').parent().find(".accordianWrap"),
                                    targetElem: '.acordianItem',
                                    sortableOptions: {
                                        items: "> div.accordionItem",
                                        handle: ".accorSort",
                                        containment: 'div.accordianEditList'
                                    }
                                });
                            }
                        };
                        AccordianDataSetting.init();
                    }
                },
                "Icon": {
                    "DOM": EasyLibrary.ReadDOM('accordion/accordioniconsetting'),
                    "onload": function ($item) {
                        let AccordianIconSetting = {
                            Container: $activeDOM.find('.accordianWrap'),
                            init: function () {
                                $('.accordianColorPicker.accrIcon').css('background-color', AccordianIconSetting.Container.attr('data-iconcolor'));
                                $('.accordianColorPicker.accrActiveIcon').css('background-color', AccordianIconSetting.Container.attr('data-activeicon'));

                                AccordianIconSetting.UIEvents();
                            },
                            UIEvents: function () {
                                let AccorItems = AccordianIconSetting.Container.find('>.acordianItem');
                                let firstItem = AccorItems.find('.accordian-icon').first();
                                if (firstItem.css('display') !== 'none') {
                                    $('#chkIsActiveAccordianIcon').prop('checked', true);
                                } else {
                                    $('.accordionIconSettings').find('.iconAttributes').addClass('Dn');
                                }
                                $('#chkIsActiveAccordianIcon').off().on('click', function () {
                                    let IconWrap = AccorItems.find('.accordian-icon').not('.accordian-icon.static');
                                    if ($(this).is(':checked')) {
                                        IconWrap.show();
                                        $('.accordionIconSettings').find('.iconAttributes').removeClass('Dn');
                                    } else {
                                        IconWrap.hide();
                                        $('.accordionIconSettings').find('.iconAttributes').addClass('Dn');
                                    }
                                });

                                let CurrentIconSize = AccorItems.first().find('>.accordianTitle .accordian-icon .dis-table i').css('font-size').replace('px', '');

                                function IconFontSize(space) {
                                    AccorItems.find('>.accordianTitle .accordian-icon .dis-table i').css('font-size', space + 'px');
                                    IconHolderWidth(space + 5);
                                }
                                AdvanceSageSlider($('#accorTitleIconSlider'), $('#accorTitleIconSliderHandle'), 10, 40, CurrentIconSize, IconFontSize, '', 'px');

                                let IconHolder = AccorItems.find('>.accordianTitle .accordian-icon');

                                function IconHolderWidth(space) {
                                    IconHolder.css('width', space + 'px');
                                    IconHolder.css('height', space + 'px');
                                }

                                let coloraccordinOption = ColorPickerOption({
                                    renderCallback: function ($elm, toggled) {
                                        let objColor = RenderCallBackColor(this);
                                        if ($elm.hasClass('accrIcon')) {
                                            AccordianIconSetting.Container.attr('data-iconcolor', objColor.bgColor);
                                            AccorItems.find('>.accordianTitle .accordian-icon .dis-table i').css('color', objColor.bgColor);
                                        } else if ($elm.hasClass('accrActiveIcon')) {
                                            AccordianIconSetting.Container.attr('data-activeicon', objColor.bgColor);
                                            AccorItems.find('>.accordianTitle.active .dis-table i').css('color', objColor.bgColor);
                                        }
                                    }
                                });
                                $('.accordianColorPicker').colorPicker(coloraccordinOption);
                            }
                        };
                        AccordianIconSetting.init();
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('accordion/accordiontextsetting'),
                    "onload": function ($item) {
                        $('#settingsFor').off('change').on('change', function () {
                            let selected = $(this).val();
                            $('#titleSetting').addClass('Dn');
                            $('#contentSetting').addClass('Dn');
                            $(`#${selected}Setting`).removeClass('Dn');
                        });
                        //let $parent = $item.parents('.SetHdlr').parent();
                        $("#accTitleSet").AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: '.accordian-head > h2',
                            options: {
                                color: false,
                                width: false
                            }
                        });
                        let $accWrap = $activeDOM.find('.accordianWrap');
                        let $accItems = $accWrap.find('>.acordianItem');
                        $('.accTitleColorPicker.accrTitle').css('background-color', $accWrap.attr('data-titlecolor'));
                        $('.accTitleColorPicker.accrTitleBg').css('background-color', $accWrap.attr('data-titlebgcolor'));
                        $('.accTitleColorPicker.accrActiveColor').css('background-color', $accWrap.attr('data-activecolor'));
                        $('.accTitleColorPicker.accrHoverColor').css('background-color', $accWrap.attr('data-hovercolor'));
                        $('.accTitleColorPicker.accrActiveTitleText').css('background-color', $accWrap.attr('data-activetitle'));
                        let colorOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                let objColor = RenderCallBackColor(this);
                                if ($elm.hasClass('accrTitle')) {
                                    $accWrap.attr('data-titlecolor', objColor.bgColor);
                                    $accItems.find('>.accordianTitle h2').css('color', objColor.bgColor);
                                } else if ($elm.hasClass('accrTitleBg')) {
                                    $accWrap.attr('data-titlebgcolor', objColor.bgColor);
                                    $accItems.find('>.accordianTitle').not('.accordianTitle.active').css('background-color', objColor.bgColor);
                                } else if ($elm.hasClass('accrActiveColor')) {
                                    $accWrap.attr('data-activecolor', objColor.bgColor);
                                    $accItems.find('>.accordianTitle.active').css('background-color', objColor.bgColor);
                                } else if ($elm.hasClass('accrActiveTitleText')) {
                                    $accWrap.attr('data-activetitle', objColor.bgColor);
                                    $accItems.find('>.accordianTitle.active h2').css('color', objColor.bgColor);
                                } else if ($elm.hasClass('accrHoverColor')) {
                                    $accWrap.attr('data-hovercolor', objColor.bgColor);
                                }
                            }
                        });
                        $('.accTitleColorPicker').colorPicker(colorOption);
                        $("#accContentSet").AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: '.acordianContent p.editor-para'
                        });
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("accordion/accordionCommon"),
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        $("#slcAccordionSetting").off("change").on("change", function () {
                            let $this = $(this);
                            $parent.find('.actEle').removeClass('actEle');
                            $parent.find($this.val()).addClass('actEle');
                            InitSpacing($this.val());
                        });
                        function InitSpacing(target) {
                            if (target === ".editor-component.accordian")
                                $parent = $parent.parent();
                            else
                                $parent = $activeDOM;
                            $('#accMarginSet').AdvanceSpacing({
                                targetParent: $parent,
                                targetElem: target,
                                "options": {
                                    "margin": {
                                        "max": 80,
                                        "min": -80,
                                        "times": 5,
                                        "position": ["all", "top", "left", "bottom", "right"]
                                    }
                                }
                            });
                            $('#accPaddingSet').AdvanceSpacing({
                                targetParent: $parent,
                                targetElem: target,// '.accordianTitle',
                                "options": {
                                    "padding": {
                                        "max": 80,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "left", "bottom", "right"]
                                    }
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcAccordionSetting').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAccordionSetting').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div id="titleAlign"></div><div id="contentAlign"></div>',
                    "onload": function ($item) {
                        $('#titleAlign').AdvanceAlignment({
                            targetParent: $activeDOM.parent(),
                            targetElem: '.accordianTitle',
                            labels: {
                                'horizontal': 'Title Alignment'
                            }
                        });
                        $('#contentAlign').AdvanceAlignment({
                            targetParent: $activeDOM.parent(),
                            targetElem: '.acordianContent .paragraph',
                            labels: {
                                'horizontal': 'Content Alignment'
                            }
                        });
                    }
                }
            }
        },
        "styleDOMs": {
            "tabs": {
                //"Colors": {
                //    "DOM": EasyLibrary.ReadDOM('accordion/accordioncolorsetting'),
                //    "onload": function ($item) {
                //        let AccordianColor = {
                //            Container: $item.parents('.accordian').eq(0).find('.accordianWrap').eq(0),
                //            init: function () {
                //                $('.accordianColorPicker.accrTitle').css('background-color', AccordianColor.Container.attr('data-titlecolor'));
                //                $('.accordianColorPicker.accrIcon').css('background-color', AccordianColor.Container.attr('data-iconcolor'));
                //                $('.accordianColorPicker.accrTitleBg').css('background-color', AccordianColor.Container.attr('data-titlebgcolor'));

                //                $('.accordianColorPicker.accrActiveColor').css('background-color', AccordianColor.Container.attr('data-activecolor'))
                //                $('.accordianColorPicker.accrHoverColor').css('background-color', AccordianColor.Container.attr('data-hovercolor'));
                //                $('.accordianColorPicker.accrActiveIcon').css('background-color', AccordianColor.Container.attr('data-activeicon'));
                //                $('.accordianColorPicker.accrActiveTitleText').css('background-color', AccordianColor.Container.attr('data-activetitle'));

                //                AccordianColor.UIEvents();
                //            },
                //            UIEvents: function () {
                //                let AccorItems = AccordianColor.Container.find('>.acordianItem');

                //                let coloraccordinOption = ColorPickerOption({
                //                    renderCallback: function ($elm, toggled) {
                //                        let objColor = RenderCallBackColor(this);
                //                        if ($elm.hasClass('accrTitle')) {
                //                            AccordianColor.Container.attr('data-titlecolor', objColor.bgColor);
                //                            AccorItems.find('>.accordianTitle h2').css('color', objColor.bgColor);
                //                        } else if ($elm.hasClass('accrIcon')) {
                //                            AccordianColor.Container.attr('data-iconcolor', objColor.bgColor);
                //                            AccorItems.find('>.accordianTitle .accordian-icon .dis-table i').css('color', objColor.bgColor);
                //                        } else if ($elm.hasClass('accrTitleBg')) {
                //                            AccordianColor.Container.attr('data-titlebgcolor', objColor.bgColor);
                //                            AccorItems.find('>.accordianTitle').not('.accordianTitle.active').css('background-color', objColor.bgColor);
                //                        } else if ($elm.hasClass('accrActiveColor')) {
                //                            AccordianColor.Container.attr('data-activecolor', objColor.bgColor);
                //                            AccorItems.find('>.accordianTitle.active').css('background-color', objColor.bgColor);
                //                        } else if ($elm.hasClass('accrActiveTitleText')) {
                //                            AccordianColor.Container.attr('data-activetitle', objColor.bgColor);
                //                            AccorItems.find('>.accordianTitle.active h2').css('color', objColor.bgColor);
                //                        } else if ($elm.hasClass('accrActiveIcon')) {
                //                            AccordianColor.Container.attr('data-activeicon', objColor.bgColor);
                //                            AccorItems.find('>.accordianTitle.active .dis-table i').css('color', objColor.bgColor);
                //                        } else if ($elm.hasClass('accrHoverColor')) {
                //                            AccordianColor.Container.attr('data-hovercolor', objColor.bgColor);
                //                        }
                //                    }
                //                });
                //                $('.accordianColorPicker').colorPicker(coloraccordinOption);
                //            },
                //        }
                //        AccordianColor.init();
                //    }
                //},
                "Border": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("accordion/accordionCommon"),//"<div id='accorBorderSet'></div>",
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $("#slcAccordionSetting").off("change").on("change", function () {
                            let $this = $(this);
                            $parent.find('.actEle').removeClass('actEle');
                            $parent.find($this.val()).addClass('actEle');
                            InitBorder($this.val());
                        });

                        function InitBorder(target) {
                            if (target === ".editor-component.accordian")
                                $parent = $parent.parent();
                            else
                                $parent = $activeDOM;

                            $('#accorBorderSet').AdvanceBorder({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"]
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcAccordionSetting').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAccordionSetting').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": "<div id='accorBoxRadSet'></div>",
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $('#accorBoxRadSet').AdvanceBoxRadius({
                            targetParent: $parent,
                            targetElem: '.accordianTitle',
                            options: {
                                "max": 50,
                                "min": 0,
                                "times": 1,
                                "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                            }
                        });
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": "<div id='accorBoxShadowSet'></div>",
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $('#accorBoxShadowSet').AdvanceBoxShadow({
                            targetParent: $parent,
                            targetElem: '.accordianTitle'
                        });
                    }
                }
            }
        },
        "selectLayer": function ($elem) {
            let $parent = $elem.parents('.accordian').eq(0).find('.accordianWrap:first >.acordianItem');
            return $parent;
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "title fontsize": {
                            "DOM": "<div class='field-row stElWrap'><label>Title</label></div><div id='resAccTitle'></div><div class='field-row stElWrap'><label>Content</label></div><div id='resAccContent'></div>",
                            "prepend": true,
                            "onload": function ($item) {
                                $("#resAccTitle").AdvanceTextSetting({
                                    targetParent: $activeDOM,
                                    targetElem: '.accordian-head > h2',
                                    options: {
                                        width: false,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: false
                                    }
                                });
                                $("#resAccContent").AdvanceTextSetting({
                                    targetParent: $activeDOM,
                                    targetElem: '.acordianContent .editor-para',
                                    options: {
                                        width: false,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: false
                                    }
                                });
                            }
                        },
                        "visibility": {}
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("accordion/accordionCommon"),//"<div id='accMarginSet'></div><div id='accPaddingSet'></div>",
                    "onload": function ($item) {
                        component[$activeDOM.attr("data-type")].settingDOMs.tabs.Spacing.onload($item);
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div id="titleAlign"></div><div id="contentAlign"></div>',
                    "onload": function ($item) {
                        $('#titleAlign').AdvanceAlignment({
                            targetParent: $activeDOM.parent(),
                            targetElem: '.accordianTitle',
                            labels: {
                                'horizontal': 'Title Alignment'
                            }
                        });
                        $('#contentAlign').AdvanceAlignment({
                            targetParent: $activeDOM.parent(),
                            targetElem: '.acordianContent .paragraph',
                            labels: {
                                'horizontal': 'Content Alignment'
                            }
                        });
                    }
                }
            }
        },
        "remove": function ($cloneViewDom) { },
        "view": {
            "view": function () {
                this.library.initAcordian();
            },
            "library": {
                "initAcordian": function () {
                    let AccorSpeed = 500;
                    $('.accordianTitle').off('click').on('click', function () {
                        let $this = $(this);

                        let $thisParent = $this.parents('.accordianWrap').eq(0);
                        let AccorItems = $thisParent.find('>.acordianItem');
                        AccorItems.find('>.accordianTitle.active').css('background-color', $thisParent.attr('data-titlebgcolor'));
                        AccorItems.find('>.accordianTitle.active h2').css('color', $thisParent.attr('data-titlecolor'));
                        AccorItems.find('>.accordianTitle.active .accordian-icon .dis-table i').css('color', $thisParent.attr('data-iconcolor'));
                        AccorItems.find('>.accordianTitle.active').next('.acordianContent').slideUp(AccorSpeed);
                        AccorItems.find('>.accordianTitle .accordian-icon.static .dis-table i').removeClass('fa-chevron-up').addClass('fa-chevron-down');
                        AccorItems.find('>.accordianTitle').removeClass('active');
                        let activeAcor = $this.next('.acordianContent');
                        if (activeAcor.is(":hidden")) {
                            $this.addClass('active');
                            $this.find('.accordian-icon.static .dis-table i').removeClass('fa-chevron-down').addClass('fa-chevron-up');
                            $this.css('background-color', $thisParent.attr('data-activecolor'));
                            $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                            $this.find('.accordian-icon .dis-table i').css('color', $thisParent.attr('data-activeicon'));
                            activeAcor.slideDown(AccorSpeed);
                        } else {
                            $this.removeClass('active');
                            activeAcor.slideUp(AccorSpeed);
                        }
                    });
                    $('.accordianTitle').off('mouseover mouseout').on('mouseover mouseout', function (evt) {
                        let $this = $(this);
                        let $thisParent = $this.parents('.accordianWrap').eq(0);
                        if (evt.type === 'mouseover') {
                            $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                            $this.find('.accordian-icon i').css('color', $thisParent.attr('data-activeicon'));
                            $this.css('background-color', $thisParent.attr('data-hovercolor'));
                        } else if (evt.type === "mouseout") {
                            if ($this.hasClass('active')) {
                                $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                                $this.find('.accordian-icon .dis-table i').css('color', $thisParent.attr('data-activeicon'));
                                $this.css('background-color', $thisParent.attr('data-activecolor'));

                            } else {
                                $this.find('h2').css('color', $thisParent.attr('data-titlecolor'));
                                $this.find('.accordian-icon  i').css('color', $thisParent.attr('data-iconcolor'));
                                $this.css('background-color', $thisParent.attr('data-titlebgcolor'));
                            }
                        }
                    });
                }
            }
        }
    }
,    "bar chart": {
        "componentname": "bar chart",
        "category": "advance",
        "icon": "fa fa-bar-chart",
        "row": false,
        "bucket": true,
        "hidden": false,
        "collection": true,
        "type": "graph",
        "defaultdata": EasyLibrary.ReadDOM('barchart/barchartdom'),
        "beforeDrop": function ($this) {
        },
        "afterdrop": function ($appendedParent, $appendLayer) {

            this.view.view($appendLayer.find('.barChartWrapper').attr('data-barSize'));
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('barchart/barchartbasicsettings') + CreateSliderDOM('barWidthID', 'barWidthHandlerID', 'Bar Width'),
                    "onload": function ($this) {
                        let $parent = $this.closest('.SetHdlr').parent();
                        var barAxesColor = $parent.find('.barChartWrapper').attr('data-axescolor');
                        var barFontColor = $parent.find('.barChartWrapper').attr('data-barfontcolor');
                        var barTitle = $parent.find('.barTitle').text();
                        var chartScale = $parent.find('.barChartWrapper').attr('data-scale');
                        $('#ddlBarChartScaling').val(chartScale);
                        $("#txtBarChartTitle").val(barTitle);
                        $("#txtBarChartTitle").off().on("keyup", function () {
                            var value = $(this).val().trim();
                            var $elm = $parent.find('.barTitle');
                            $elm.text(value);
                        });
                        $('#ddlBarChartScaling').on('change', function () {
                            var val = $(this).val();
                            $parent.find('.barChartWrapper').attr('data-scale', val);
                            component['bar chart'].afterdrop($parent.parent(), $parent);
                        });
                        component['bar chart'].common.textSetting();
                        var fontWidth = $parent.find('.barChartWrapper').attr('data-barfontsize').replace('px', '');
                        function ListIconSizeSlider(space) {
                            $parent.find('.barChartWrapper').attr('data-barfontsize', space);
                            component['bar chart'].afterdrop($parent.parent(), $parent);
                            $parent.find('.labelIcon').css('font-size', space);
                        }
                        AdvanceSageSlider($('#barfontsizeSlider'), $('#barfontsizeHandle'), 10, 40, fontWidth, ListIconSizeSlider, $parent, 'px');

                        let barSize = $parent.find('.barChartWrapper').attr('data-barSize');
                        function barSizeSlider(space) {
                            $parent.find('.barChartWrapper').attr('data-barSize', space);
                            component['bar chart'].view.view(space);
                            //$parent.find('.labelIcon').css('font-size', space);
                        }
                        AdvanceSageSlider($('#barWidthID'), $('#barWidthHandlerID'), 5, 50, barSize, barSizeSlider, $parent, 'px');
                    },
                },
                "Data": {
                    "DOM": EasyLibrary.ReadDOM('barchart/barchartdatawrapper'),
                    "onload": function ($this) {
                        var $parent = $this.parent().parent().parent().parent();
                        var eleIndex = -1;
                        var $barChartWrapper = $parent.find('.barChartWrapper');
                        var barData = $barChartWrapper.attr('data-value');
                        var barDataArray = JSON.parse(barData);
                        LoadData();
                        function LoadData() {
                            var $items = $parent.find('.barChartWrapper').attr('data-value');
                            var $count = JSON.parse($items).length;
                            var html = '';
                            $("#barChartEditWrapper").html('');
                            $.each(barDataArray, function (index, item) {
                                html += '<div class="field-row data-row">';
                                html += '<div class="field-row stElWrap col100">';
                                html += '<span class="fcol cPointer sfCol_6"><i class="fa  fa-arrows-v barSort"></i></span>';
                                html += '<span class="fcol pkrWrp sfCol_7">';
                                html += '<span class="color-picker-holder chooseColor chooseBarFontColor" style="background-color: ' + item.color + '"></span>';
                                html += '</span>';
                                html += '<span class="sfCol_40 Ml-5 cb_input">';
                                html += '<input type="text" maxlength="15" class=" indBarName" value="' + item.name + '"/>';
                                html += '</span>';
                                html += '<span class="sfCol_35 Ml-5 cb_input">';
                                html += '<input type="text" class="indBarValue" value="' + item.value + '"/>';
                                html += '</span>';
                                if ($count > 1) {
                                    html += '<span class="sfCol_7 Ml-5">';
                                    html += '<i title="delete" class=" in-form-icon fa fa-trash-o delete-icon deleteBar"></i>';
                                    html += '</span>';
                                }
                                html += '</div>';
                                html += '</div>';
                            });
                            $("#barChartEditWrapper").html(html);

                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    var dataIndex = $('#barChartEditWrapper').find('.data-row').index($elm.parent().parent().parent());
                                    barDataArray[dataIndex].color = objColor.bgColor;
                                    var jsonData = JSON.stringify(barDataArray);
                                    $barChartWrapper.attr('data-value', jsonData);
                                    component['bar chart'].afterdrop($parent.parent(), $parent);
                                }
                            });
                            $('.chooseBarFontColor').colorPicker(colorPickerOption);
                            InitAddMoreBarEvent();
                            InitBarEvents();
                        }
                        function InitBarEvents() {
                            $("#barChartEditWrapper .indBarName").off('keyup').on('keyup', function () {
                                var value = $(this).val().trim();
                                var dataIndex = $('#barChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());
                                barDataArray[dataIndex].name = value;
                                var jsonData = JSON.stringify(barDataArray);
                                $barChartWrapper.attr('data-value', jsonData);
                                component['bar chart'].afterdrop($parent.parent(), $parent);
                            });

                            $("#barChartEditWrapper .indBarValue").off('keyup').on('keyup', function () {
                                var value = $(this).val().trim();
                                var dataIndex = $('#barChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());
                                if (value.length == 0) {
                                    value = 0;
                                    barDataArray[dataIndex].value = value;
                                    var jsonData = JSON.stringify(barDataArray);
                                    $barChartWrapper.attr('data-value', jsonData);
                                    component['bar chart'].afterdrop($parent.parent(), $parent);
                                    $(this).attr('value', value);
                                    $(this).val(value);
                                } else if (isNaN(value)) {
                                    $(this).attr('value', barDataArray[dataIndex].value);
                                    $(this).val(barDataArray[dataIndex].value);
                                } else if (parseFloat(value) < 0) {
                                    $(this).attr('value', barDataArray[dataIndex].value);
                                    $(this).val(barDataArray[dataIndex].value);
                                } else {
                                    barDataArray[dataIndex].value = value;
                                    var jsonData = JSON.stringify(barDataArray);
                                    $barChartWrapper.attr('data-value', jsonData);
                                    component['bar chart'].afterdrop($parent.parent(), $parent);
                                }
                            });

                            $("#barChartEditWrapper").off('click').on('click', '.deleteBar', function () {
                                var $parent = $this.parent().parent().parent().parent();
                                var dataIndex = $('#barChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());
                                barDataArray.splice(dataIndex, 1);
                                var jsonData = JSON.stringify(barDataArray);
                                $barChartWrapper.attr('data-value', jsonData);
                                $(this).parent().parent().parent().remove();
                                component['bar chart'].afterdrop($parent.parent(), $parent);
                                LoadData();
                            });


                            // sortable
                            $("#barChartEditWrapper").AdvanceSorting({

                                targetParent: $parent,
                                targetElem: '.barChart',
                                sortableOptions: {
                                    items: "div.data-row",
                                    handle: ".barSort",
                                    containment: '#barChartEditWrapper',
                                    start: function (event, ui) {
                                        //hide color
                                    },
                                    stop: function (event, ui) {
                                        barDataArray = [];
                                        $("#barChartEditWrapper").find(".data-row").each(function (i, o) {
                                            let obj = {
                                                id: i + 1,
                                                name: $(o).find('.indBarName').val(),
                                                value: $(o).find('.indBarValue').val(),
                                                color: $(o).find('.chooseBarFontColor').css('background-color')
                                            };
                                            barDataArray.push(obj);
                                            var jsonData = JSON.stringify(barDataArray);
                                            $barChartWrapper.attr('data-value', jsonData);
                                            component['bar chart'].afterdrop($parent.parent(), $parent);
                                        });
                                    }
                                }
                            });
                        }
                        function InitAddMoreBarEvent() {
                            $("#btnAddMoreBarData").off().on("click", function () {
                                var count = 1;
                                var html = '';
                                var $editParent = $('#barChartEditWrapper');
                                if ($editParent.find('.data-row').length > 0) {
                                    var html = '';
                                    var duplicateData = barDataArray[0];
                                    var itemCount = barDataArray.length;
                                    var $firstDom = $editParent.find('.data-row').eq(0);
                                    var attrClass = $firstDom.attr('class');
                                    html += '<div class="field-row data-row">';
                                    html += '<div class="field-row stElWrap col100">';
                                    html += '<span class="fcol cPointer sfCol_6"><i class="fa  fa-arrows-v barSort"></i></span>';
                                    html += '<span class="fcol pkrWrp sfCol_7">';
                                    html += '<span class="color-picker-holder chooseColor chooseBarFontColor" style="background-color: ' + duplicateData.color + '"></span>';
                                    html += '</span>';
                                    html += '<span class="sfCol_40 Ml-5 cb_input">';
                                    html += '<input type="text" maxlength="15" class=" indBarName" value="' + duplicateData.name + '"/>';
                                    html += '</span>';
                                    html += '<span class="sfCol_35 Ml-5 cb_input">';
                                    html += '<input type="text" class="indBarValue" value="' + duplicateData.value + '"/>';
                                    html += '</span>';
                                    html += '<span class="sfCol_7 Ml-5">';
                                    html += '<i title="delete" class=" in-form-icon fa fa-trash-o delete-icon deleteBar"></i>';
                                    html += '</span>';
                                    html += '</div>';
                                    html += '</div>';
                                    $editParent.prepend(html);
                                    var newData = {
                                        "id": itemCount + 1,
                                        "name": duplicateData.name,
                                        "value": duplicateData.value,
                                        "color": duplicateData.color
                                    };
                                    barDataArray.unshift(newData);

                                } else {
                                    html += '<div class="field-row data-row">';
                                    html += '<div class="field-row stElWrap col100">';
                                    html += '<span class="fcol sfCol_6"><i class="fa  fa-arrows-v barSort"></i></span>';
                                    html += '<span class="fcol sfCol_7">';
                                    html += '<span class="color-picker-holder chooseColor chooseBarFontColor" style="background-color:#A55CA5"></span>';
                                    html += '</span>';
                                    html += '<span class="sfCol_40 Ml-5 cb_input">';
                                    html += '<input type="text" maxlength="15" class=" indBarName" value="data 1" aria-invalid="false" type="text"/>';
                                    html += '</span>';
                                    html += '<span class="sfCol_35 Ml-5 cb_input">';
                                    html += '<input type="text" class="indBarValue" value="10" type="text"/>';
                                    html += '</span>';
                                    html += '<span class="sfCol_7 Ml-5">';
                                    html += '<i title="delete" class=" in-form-icon fa fa-trash-o delete-icon deleteBar"></i>';
                                    html += '</span>';
                                    html += '</div>';
                                    html += '</div>';
                                    $editParent.prepend(html);
                                    var defaultData = {
                                        "id": 1,
                                        "name": "data 1",
                                        "value": 10,
                                        "color": "#A55CA5"
                                    };
                                    barDataArray.unshift(defaultData);

                                }

                                var jsonData = JSON.stringify(barDataArray);
                                $barChartWrapper.attr('data-value', jsonData);
                                component['bar chart'].afterdrop($parent.parent(), $parent);
                                var colorPickerOption = ColorPickerOption({
                                    renderCallback: function ($elm, toggled) {
                                        var objColor = RenderCallBackColor(this);
                                        var dataIndex = $('#barChartEditWrapper').find('.data-row').index($elm.parent().parent().parent());
                                        barDataArray[dataIndex].color = objColor.bgColor;
                                        var jsonData = JSON.stringify(barDataArray);
                                        $barChartWrapper.attr('data-value', jsonData);
                                        component['bar chart'].afterdrop($parent.parent(), $parent);
                                    }
                                });
                                $('.chooseBarFontColor').colorPicker(colorPickerOption);
                                LoadData();
                                InitBarEvents();
                            });
                        }
                    },
                },

                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('barchart/alignment'),
                    "onload": function ($item) {
                        component['bar chart'].common.alignment();
                    },
                    "active": function () {
                        $('#barChartAlignment').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#barChartAlignment').trigger('change').addClass('slcActiveEleSetting');
                    }
                }

            }
        },

        "styleDOMs": {
            "tabs": {
                "Color": {
                    "DOM": EasyLibrary.ReadDOM('barchart/barchartcolor'),
                    "onload": function ($this) {
                        var $parent = $this.parent().parent().parent().parent();
                        var barAxesColor = $parent.find('.barChartWrapper').attr('data-axescolor');
                        $('#chooseBarAxesColor').css('background-color', barAxesColor);
                        var colorPickerOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $parent.find('.barChartWrapper').attr('data-axescolor', objColor.bgColor);
                                component['bar chart'].afterdrop($parent.parent(), $parent);
                            }
                        });
                        $('#chooseBarAxesColor').colorPicker(colorPickerOption);

                        var barFontColor = $parent.find('.barChartWrapper').attr('data-barfontcolor');
                        $('#chooseBarFontColor').css('background-color', barFontColor);
                        var colorPickerOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $parent.find('.barChartWrapper').attr('data-barfontcolor', objColor.bgColor);
                                component['bar chart'].afterdrop($parent.parent(), $parent);
                            }
                        });
                        $('#chooseBarFontColor').colorPicker(colorPickerOption);
                    }
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('barchart/responsivebasic'),
                    "custom": true,
                    "onload": function () {
                        let options = {
                            width: false,
                            spacing: false
                        }
                        let dAlpha = ViewDeviceAlpha();
                        IsVisible();
                        component['bar chart'].common.textSetting(options); 

                        $("#barchartVisibility").html('');
                        $('#barchartVisibility').AdvanceVisibility({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM
                        });
                        $('#barchartVisibility').off().on('change', function () {
                            IsVisible();
                        });
                        function IsVisible() {
                            if ($activeDOM.hasClass(dAlpha + 'Dn'))
                                $('#barChartText').removeClass('Dn').addClass('Dn');
                            else
                                $('#barChartText').removeClass('Dn');
                        }
                    }
                },

                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('barchart/alignment'),
                    "onload": function ($item) {
                        component['bar chart'].common.alignment();
                    },
                    "active": function () {
                        $('#barChartAlignment').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#barChartAlignment').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "common": {
            "alignment": function () {
                var $parent = $activeDOM;
                let targetEle = $('#ddlBarChartAlign').val();
                alignment();
                $('#ddlBarChartAlign').off('change').on('change', function () {
                    targetEle = $(this).val();
                    $parent.find('.actEle').removeClass('actEle')
                        .end()
                        .find(targetEle).addClass('actEle');
                    alignment();
                })
                function alignment() {
                    $('#barChartAlignment').html('');
                    $('#barChartAlignment').AdvanceAlignment({
                        targetParent: $parent,
                        targetElem: targetEle
                    });
                }
            },
            "textSetting": function (options) {
                $("#barChartText").html('');
                $("#barChartText").AdvanceTextSetting({
                    targetParent: $activeDOM,
                    targetElem: '.barTitle',
                    options: options
                });
            }
        },

        "onsort": function (ui) {
            this.view.view();
        },
        "view": {
            "view": function ($size) {
                var myCanvasList = document.querySelectorAll(".barCanvas");
                let $p = $(".barChartWrapper");
                if ($size == undefined)
                    $size = $p.attr('data-barSize');
                var _this = this;
                if (myCanvasList.length == 0) {

                } else {
                    $.each(myCanvasList, function (index, item) {
                        var myCanvas = item;
                        var parentWidth = item.parentNode.offsetWidth;

                        parentWidth = Math.max(parentWidth, 250);
                        myCanvas.height = 350 / parentWidth * parentWidth;
                        myCanvas.width = parentWidth * 0.75;

                        var barAxesColor = item.parentNode.getAttribute('data-axescolor');
                        var barFontColor = item.parentNode.getAttribute('data-barfontcolor');
                        var barFontSize = item.parentNode.getAttribute('data-barfontsize');
                        //console.log(barFontSize);
                        var barChartData = item.parentNode.getAttribute('data-value');
                        var barData = JSON.parse(barChartData);
                        var barScaleFactor = item.parentNode.getAttribute('data-scale');
                        //alert(JSON.stringify(barData));
                        var ctx = myCanvas.getContext("2d");

                        _this.library.BarChart({
                            canvas: myCanvas,
                            seriesName: "Bar Chart",
                            padding: 20,
                            gridScale: barScaleFactor,
                            barAxesColor: barAxesColor,
                            barFontColor: barFontColor,
                            data: barData,
                            barFontSize: barFontSize,
                            barSize: $size
                        });
                    });
                }
            },
            "library": {
                "DrawLine": function (ctx, startX, startY, endX, endY, color) {
                    ctx.save();
                    ctx.strokeStyle = color;
                    ctx.beginPath();
                    ctx.moveTo(startX, startY);
                    ctx.lineTo(endX, endY);
                    ctx.stroke();
                    ctx.restore();
                },

                "DrawBar": function (ctx, upperLeftCornerX, upperLeftCornerY, width, height, color) {
                    ctx.save();
                    ctx.fillStyle = color;
                    ctx.fillRect(upperLeftCornerX, upperLeftCornerY, width, height);
                    ctx.restore();
                },

                "BarChart": function (options) {
                    this.options = options;
                    this.canvas = options.canvas;
                    this.ctx = this.canvas.getContext("2d");
                    //this.colors = options.colors;
                    var _this = this;
                    this.draw = function () {
                        //console.log(this.options);
                        var maxValue = 0;
                        var maxWidth = 0;
                        $.each(this.options.data, function (index, categ) {
                            //console.log(categ);
                            maxValue = Math.max(maxValue, categ.value);
                            maxWidth = Math.max(maxWidth, _this.ctx.measureText(categ.name).width);
                        });

                        //console.log(maxValue);

                        var canvasActualHeight = this.canvas.height - this.options.padding * 2;
                        var canvasActualWidth = this.canvas.width - this.options.padding * 2;

                        //drawing the grid lines
                        var gridValue = 0;
                        var entered = 0;
                        while (gridValue <= maxValue) {
                            entered++;
                            var gridY = canvasActualHeight * (1 - gridValue / maxValue) + this.options.padding;

                            //x-axis
                            _this.DrawLine(
                                this.ctx,
                                0,
                                gridY,
                                this.canvas.width,
                                gridY,
                                this.options.barAxesColor
                            );

                            //y-axis
                            _this.DrawLine(
                                this.ctx,
                                0,
                                0,
                                0,
                                gridY,
                                this.options.barAxesColor
                            );

                            //writing grid markers
                            this.ctx.save();

                            gridValue += parseInt(this.options.gridScale);
                            //alert(gridValue + this.options.gridScale);
                        }

                        //drawing the bars
                        var barIndex = 0;
                        var numberOfBars = this.options.data.length;
                        var barSize = (canvasActualWidth) / numberOfBars;
                        let width = this.options.barSize;
                        var textWidth = 0;
                        $.each(this.options.data, function (index, categ) {
                            var val = categ.value;
                            var barHeight = Math.round(canvasActualHeight * val / maxValue);



                            _this.DrawBar(
                                _this.ctx,
                                _this.options.padding + barIndex * barSize,
                                _this.canvas.height - barHeight - _this.options.padding,
                                width,
                                barHeight,
                                categ.color
                            );
                            textWidth = _this.ctx.measureText(categ.name).width;
                            var valueWidth = _this.ctx.measureText(categ.value).width;
                            _this.ctx.fillStyle = _this.options.barFontColor;
                            var fontSize = _this.options.barFontSize;
                            //console.log(fontSize);
                            _this.ctx.font = "bold " + parseInt(fontSize) + "px Arial";
                            _this.ctx.fillText(categ.name, (_this.options.padding + barIndex * barSize + 15) - textWidth / 2, _this.canvas.height);
                            _this.ctx.fillText(val, _this.options.padding + barIndex * barSize + 15 - valueWidth / 2, _this.canvas.height - barHeight - 30);

                            barIndex++;
                        });

                    };

                    this.draw();
                }
            }
        },
        "resize": function () {
            this.view.view();
        }
    }
,    "body": {
        "componentname": "body",
        "category": "layout",
        "icon": "icon-icon-row",
        "row": false,
        "hidden": true,
        "collection": false,
        "defaultdata": '',
        "type": "hidden",
        "afterdrop": function ($appendLayer) { },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Background": {
                    "options": ["image", "color"]
                },
                "Spacing": {
                    "options": {
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                $(".editor-box").removeClass("activeSetting");
                var $parent = $(".editor-box");
                $parent.addClass("activeSetting");
                return $parent;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Spacing": {
                    "options": {
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    },
                    "selectLayer": function ($elem) {
                        $(".editor-box").removeClass("activeSetting");
                        var $parent = $(".editor-box");
                        $parent.addClass("activeSetting");
                        return $parent;
                    },
                },
            },
        }
    }
,    "button": {
        "componentname": "button",
        "category": "basic",
        "icon": "icon icon-buton",
        "row": false,
        "hidden": false,
        "collection": true,
        "type": "element",
        "DOM": {
            buttonstyle: EasyLibrary.ReadDOM('starter/button/buttonStyles')
        },
        "defaultdata": EasyLibrary.ReadDOM("starter/button/defaultbutton"),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {
            let _this = this;
            let allButtonStyles = BtnCollection();

            function BtnCollection() {
                let btncoll = _this.DOM.buttonstyle;
                let $btn = $(btncoll);
                let html = '';
                $btn.find('> .editor-component.button').each(function ($index, $val) {
                    html += liWrap($($val).wrap('<p/>').parent().html());
                });

                function liWrap(elem) {
                    let li = '<li class="selectData  Mt-10 Mr-10 Mb-10 Ml-10" style="" data-title="Simple button style" data-style="5">'
                    li += elem;
                    li += "</li>";
                    return li;
                }
                if (html.length > 0) {
                    html = `<ul class="selectDataWrapper Dfx flxWrp TxAl-c " style="height:100%">
                                    <li class ="title sfCol_100 Dn">Simple button style</li>
                                    ${html}
                                </ul>
                            `;
                }
                return html;
            }
            FullPagePopup({
                data: allButtonStyles,
                heading: "Button Styles",
                showheading: true,
                width: '70%'
            });

            $('.selectData').off().on('click', function () {
                component['button'].common.copyAttributes($appendLayer, $(this));
                CloseFullPagePopup();
            });

            return 'no data to show';
        },
        "afterdrop ": function ($appendedParent, $appendLayer, dropped) {
            $appendLayer.find('.com-style').removeClass('com-style').addClass('com-temp');
            if (dropped) {
                SetDefaultFont(
                    options = {
                        targetParent: $appendedParent,
                        targetElem: $appendLayer
                    });
            }
            anylinkstop();
        },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("starter/button/defaultbuttonbasic", false),
                    "onload": function ($item) {
                        var $parent = $activeDOM;
                        $("#txtbasictab").AdvanceTextSetting({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM,
                            options: {
                                size: true,
                                lineheight: true,
                                width: false,
                                spacing: true,
                                transform: true,
                                family: true,
                                weight: true,
                                color: false
                            }
                        });
                        var $Icon = $parent.find('a > i');
                        var $text = $parent.find('a > span');
                        var $anchor = $parent.find('a');
                        let enableButtonText = "#enableButtonText";
                        let enableButtonIcon = "#enableButtonIcon";
                        InitEvents();
                        checkIconBeforeText();

                        function InitEvents() {
                            //FontSize();
                            WrapperSize();
                            WrapperHeight();
                            FontIconColor();
                            // TextTranformCheck();

                            EnableText();
                            EnableIcon();
                            FontIcon();
                            //LineHeight();
                        }
                        //function FontSize() {
                        //    component["button"].common.fontsize();
                        //}
                        function WrapperSize() {
                            component["button"].common.width();
                        }
                        //function LineHeight() {
                        //    component["button"].common.lineheight();
                        //}
                        function WrapperHeight() {
                            var buttonHeight = $parent.css('height').replace('px', '');

                            function ButtonHeightChange(space) {
                                $parent.css('height', space + 'px');
                            }
                            AdvanceSageSlider($('#buttonWrapperHeightSlider'), $('#buttonWrapperHeightHandle'), 5, 500, buttonHeight, ButtonHeightChange, $parent, 'px');
                        }

                        function FontIconColor() {
                            $('#buttonColor').css('background-color', $anchor.css('color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $Icon.css({
                                        'color': objColor.bgColor
                                    });
                                    $text.css({
                                        'color': objColor.bgColor
                                    });
                                    $anchor.css({
                                        'color': objColor.bgColor
                                    });
                                }
                            });
                            $('#buttonColor').colorPicker(colorPickerOption);
                        }

                        //function TextTranformCheck() {
                        //    var trasformValue = '';
                        //    if ($parent.hasClass('txU')) {
                        //        trasformValue = 'txU';
                        //    } else if ($parent.hasClass('txL')) {
                        //        trasformValue = 'txL';
                        //    }
                        //    $('#buttonTextTransform').val(trasformValue);
                        //    $('#buttonTextTransform').on('change', function () {
                        //        var tranformCase = $(this).val();
                        //        switch (tranformCase) {
                        //            case 'txU':
                        //                $parent.removeClass('txL').removeClass('txC').addClass('txU');
                        //                break;
                        //            case 'txL':
                        //                $parent.removeClass('txU').removeClass('txC').addClass('txL');
                        //                break;
                        //            case 'txC':
                        //                $parent.removeClass('txU').removeClass('txL').addClass('txC');
                        //                break;
                        //            case '':
                        //                $parent.removeClass('txU').removeClass('txL').removeClass('txU');
                        //                break;
                        //        }
                        //    });
                        //}

                        function ChnageMenulinkType() {
                            if ($('#chkOnePageMenu').is(':checked')) {
                                $anchor.attr('data-link', linklist.onepage);
                                $anchor.removeClass('anchorpage');
                            } else {
                                $anchor.attr('data-link', linklist.internal);
                                $anchor.addClass('anchorpage');
                            }
                        }

                        function EnableText() {
                            if ($text.length > 0) {
                                var text = $text.text().trim();
                                $(enableButtonText).prop('checked', true);
                                $('#buttonText').val(text);
                                $('#divEnableText').show();
                            } else {
                                $(enableButtonText).prop('checked', false);
                            }
                            $(enableButtonText).on('click', function () {
                                if ($(this).is(':checked')) {
                                    $('#buttonText').val('').focus();
                                    $('#divEnableText').slideDown(400);
                                    if ($parent.find('a > span').length == 0) {
                                        if ($('#linkBeforeText').is(':checked')) {
                                            $parent.find('a').append('<span class="com-button-text c" contenteditable="true">default text</span>');
                                        } else {
                                            $parent.find('a').prepend('<span class="com-button-text onhovercolor" contenteditable="true">default text</span>');
                                        }
                                        $('#buttonText').val('default text');
                                        $text = $parent.find('a > span');
                                    }
                                    checkIconBeforeText();
                                } else {
                                    $('#divEnableText').slideUp(400);
                                    $parent.find('a > span').remove();
                                    IsChecked(enableButtonIcon);
                                }
                            });
                            $('#buttonText').on('keyup', function () {
                                var $this = $(this);
                                var val = $this.val().trim();
                                var text = 'default text';
                                if (val.length > 0) {
                                    text = val;
                                }
                                $text.text(text);
                            });
                        }

                        function IsChecked(elementID) {
                            if (!$(elementID).is(":checked")) {
                                $(elementID).trigger("click");
                            }
                            checkIconBeforeText();
                        }

                        function EnableIcon() {
                            if ($Icon.length > 0) {
                                var iconClass = $Icon.attr('class').replace('fa ', '').replace('onhovercolor', '');
                                $(enableButtonIcon).prop('checked', true);
                                $('#buttonIcon').show();
                            } else {
                                $(enableButtonIcon).prop('checked', false);
                            }
                            $(enableButtonIcon).on('click', function () {
                                if ($(this).is(':checked')) {
                                    $('#buttonIcon').slideDown(400);
                                    var iconClass = 'fa-arrow-right';
                                    if ($('#buttonfontIconCollection').find('li.selected').length > 0) {
                                        iconClass = $('#buttonfontIconCollection').find('li.selected').find('i').attr('data-class');
                                    } else {
                                        $('#buttonfontIconCollection').find('li').parent().addClass('selected');
                                        $('#buttonfontIconCollection').find('li i[data-class="fa-arrow-right"]').parent().addClass('selected');
                                    }
                                    if ($parent.find('a > i').length == 0) {
                                        if ($('#linkBeforeText').is(':checked')) {
                                            $parent.find('a').prepend('<i class="fa ' + iconClass + ' onhovercolor"></i>');
                                        } else {
                                            $parent.find('a').append('<i class="fa ' + iconClass + ' onhovercolor"></i>');
                                        }
                                        $Icon = $parent.find('a > i');
                                    }
                                    checkIconBeforeText();

                                } else {
                                    $('#buttonIcon').slideUp(400);
                                    $('#linkBeforeText').prop('checked', false);
                                    $parent.find('a > i').remove();
                                    IsChecked(enableButtonText);
                                }
                            });
                            $('#linkBeforeText').on('click', function () {
                                var $i = $parent.find('a > i');
                                var $s = $parent.find('a > span');
                                if ($(this).is(':checked')) {
                                    if ($i.length > 0 && $s.length > 0) {
                                        $anchor.append($i);
                                        $anchor.append($s);
                                    }
                                } else {
                                    if ($i.length > 0 && $s.length > 0) {
                                        $anchor.append($s);
                                        $anchor.append($i);
                                    }
                                }
                            });
                        }

                        function checkIconBeforeText() {
                            if ($(enableButtonIcon).is(":checked") && $(enableButtonText).is(":checked"))
                                $("#iconBeforeTextToggle").show();
                            else $("#iconBeforeTextToggle").hide();
                        }

                        function FontIcon() {
                            $('#buttonfontIconCollection').html(EasyLibrary.FontCollectionList());
                            SearchFontIcon();
                        }

                        function SearchFontIcon() {
                            $('#buttonSearchIcon').on('keyup', function () {
                                var searchVal = $(this).val();
                                $('#buttonfontIconCollection').find('li').each(function () {
                                    var $this = $(this);
                                    var dataClass = $this.find('i').attr('data-class');
                                    var pos = dataClass.indexOf(searchVal);
                                    if (pos < 0) {
                                        $this.addClass('Dn');
                                    } else {
                                        $this.removeClass('Dn');
                                    }
                                });
                            });
                            if ($Icon.length > 0) {
                                var fontClasses = $Icon.attr('class').replace('fa ', '').replace('onhovercolor', '').trim();
                                $('#buttonfontIconCollection').find('li i[data-class="' + fontClasses + '"]').parent().addClass('selected');
                            }
                            $('#buttonfontIconCollection').find('li').on('click', function () {
                                var chooseClass = $(this).find('i').attr('data-class');
                                $Icon.attr('class', 'onhovercolor fa ' + chooseClass);
                                $('#buttonfontIconCollection').find('li').removeClass('selected');
                                $(this).addClass('selected');
                            });
                        }

                    }
                },
                "Action": {
                    DOM: EasyLibrary.ReadDOM("starter/button/buttonaction", false),
                    onload: function () {
                        let $anchor = $activeDOM.find('a.com-button');
                        commonEvent();

                        function EnableLink() {
                            var linklist = {
                                'internal': 'internal',
                                'external': 'external'
                            };
                            let linkType = $activeDOM.find('.com-button').attr('data-link');
                            let $linkTextURL = $('#linkTextURL');
                            let $selectLink = $("#enableExternalLink");
                            $selectLink.val(linkType);
                            let $anchorPageList = $("#anchorPageList");
                            var link = $anchor.attr('data-href');
                            let $messageContainer = $('#messageContainer');
                            $anchorPageList.off().on('change', function () {
                                var url = $('#anchorPageList option:selected').text().replaceAll(" ", "-");
                                $anchor.attr('href', SageFrameHostURL + '/' + url).replaceAll("-", " ");
                                $anchor.addClass('anchorpage');
                            });
                            if (typeof linkType !== "undefined") {
                                if (linkType == linklist.external) {
                                    $selectLink.val(linklist.external);
                                    $linkTextURL.removeClass('Dn');
                                    $linkTextURL.val(link);
                                    $('#anchorPageListHolder').addClass("Dn");
                                    $anchor.removeClass('anchorpage');
                                    $linkTextURL.focus();
                                } else {
                                    $selectLink.val(linklist.internal);
                                    GetPageList();
                                    $messageContainer.html('');
                                    $anchor.addClass('anchorpage');
                                    $anchor.addClass("redirectLink");
                                    $('#anchorPageListHolder').removeClass("Dn");
                                    $anchorPageList.find('option').filter(function () {
                                        return this.text == link.replace(SageFrameHostURL + '/', '').replaceAll("-", " ");
                                    }).attr('selected', true);
                                    $anchor.attr("data-pageName", $("#anchorPageList option:selected").text());
                                    $('#anchorPageListHolder').removeClass('Dn');
                                }
                            } else {
                                $('#anchorPageListHolder').show();
                            }

                            if (typeof $anchor.attr('target') !== "undefined") {
                                $('#targetFrame').val($anchor.attr('target'));
                            }

                            $('#targetFrame').on('change', function () {
                                $anchor.attr('target', $(this).val());
                            });
                            $('#enableExternalLink').off().on('change', function () {
                                var selected = $(this).val();
                                $anchor.removeClass("redirectLink");
                                if (selected == linklist.external) {
                                    $anchor.attr('data-link', linklist.external);
                                    $linkTextURL.val(link);
                                    $linkTextURL.removeClass('Dn');
                                    $('#anchorPageListHolder').addClass("Dn");
                                    $linkTextURL.val('').focus();
                                    $anchor.removeClass('anchorpage');
                                } else {
                                    $messageContainer.html('');
                                    $anchor.attr('data-link', linklist.internal);
                                    GetPageList();
                                    $linkTextURL.addClass('Dn');
                                    $('#anchorPageListHolder').removeClass('Dn');
                                    $anchor.addClass("redirectLink");
                                    $anchorPageList.trigger('change');
                                }
                            });

                            function GetPageList() {
                                $anchorPageList.html(EasyLibrary.GetPageOption());

                                $anchorPageList.off().on('change', function () {
                                    let $selectedOption = $anchorPageList.find('option:selected');
                                    $anchor.attr('href', SageFrameHostURL + '/' + $selectedOption.text().replaceAll(" ", "-"));
                                    $anchor.attr("data-pageName", $selectedOption.text().replaceAll(" ", "-"));
                                });
                            }

                            $linkTextURL.on('input focusout', function () {
                                var $this = $(this);
                                let externalURL = "";
                                var val = $this.val().trim();
                                if (val.length > 0) {
                                    externalURL = val;
                                    var protocol = /^(https?):\/\/[^\s\/$.?#]*.[^\s]*$/i;
                                    if (!protocol.test(val)) {
                                        $this.css('border-color', 'red');
                                        $messageContainer.html('Invalid url. <br />Example of valid url: <br />http://www.contentder.com/ <br />https://www.contentder.com/');
                                    } else {

                                        $messageContainer.html('');
                                        $this.css('border-color', '');
                                    }
                                } else
                                    $messageContainer.html('Enter a valid URL');
                                $anchor.attr('href', externalURL);
                                component["button"].view.library.buttonlick();
                            });
                        }

                        function OpenPopUpEvent() {
                            let $slcPopup = $('#slcBtnStpopup');
                            let optHtml = '';
                            $('.edit-area .btnlinked-popup').each(function () {
                                let $ths = $(this);
                                optHtml += '<option value="' + $ths.attr('data-id') + '">' + $ths.attr('data-name') + '</option>';
                            });
                            $slcPopup.html(optHtml);
                            $slcPopup.off().on('change', function () {
                                $anchor.attr('data-modalid', $(this).val());
                            });
                            $slcPopup.val($anchor.attr('data-modalid')).trigger('change');
                        }

                        function GotoSecEvnt() {
                            let $slcSection = $('#slcBtnStSection');
                            var ophtml = '';
                            let allsections = [];
                            $('.edit-area .cRow').not('.popupidentity,.btnlinked-popup').each(function () {
                                let $this = $(this);
                                let secNm = $this.find('h1').length > 0 ? $this.find('h1').eq(0).text() : $this.attr('data-type');
                                secNm = secNm.toLowerCase();
                                if (secNm.length > 20)
                                    secNm = secNm.substring(0, 20) + "...";
                                var count = 0;
                                allsections.forEach(function (v, i) {
                                    if (v == secNm) {
                                        count++;
                                    };
                                });
                                allsections.push(secNm);
                                if (count > 0)
                                    secNm = secNm + '-' + count;
                                ophtml += '<option value="' + $this.attr('data-id') + '">' + secNm + '</option>';
                            });
                            $slcSection.html(ophtml);
                            $slcSection.off().on('change', function () {
                                let val = $(this).val();
                                let $tar = $('.edit-area .cRow[data-id="' + val + '"]');
                                $anchor.attr('data-sectionid', val);
                                if ($tar.length > 0) {
                                    $('html, body').animate({
                                        scrollTop: $tar.offset().top - 80,
                                    }, 500);
                                }
                            });
                            $slcSection.val($anchor.attr('data-sectionid')).trigger('change');

                        }

                        function DownloadFileEvnt() {
                            let attch = $anchor.attr('data-attachment');
                            if (EasyLibrary.IsDefined(attch)) {
                                $('#btnStActDwnFileName').text(attch.split('/').pop());
                            }
                            $('#btnStActChooseFile').SageMedia({
                                userModuleID: webBuilderUserModuleID,
                                onSelect: function (src, response, type, filename, extension, alt) {
                                    $anchor.attr('data-attachment', src);
                                    $('#btnStActDwnFileName').text(filename);
                                },
                                mediaType: '*'
                            });
                        }

                        function commonEvent() {
                            $('#anchorPageList').html(EasyLibrary.GetPageOption());
                            $('#slcBtnStActionType').off('change').on('change', function () {
                                let val = $(this).val();
                                $('.btnActionTypes').addClass('Dn');
                                $('.btnActionTypes.' + val).removeClass('Dn');
                                $anchor.removeClass("redirectLink");
                                $anchor.attr('data-actiontype', val);
                                let href = $anchor.attr('href');
                                if (typeof href !== 'undefined') {
                                    $anchor.attr('data-href', href);
                                    $anchor.removeAttr('href');
                                    $anchor.removeClass('anchorpage');
                                }
                                switch (val) {
                                    case 'Actlink':
                                        EnableLink();
                                        break;
                                    case 'ActPopup':
                                        OpenPopUpEvent();
                                        break;
                                    case 'ActSection':
                                        GotoSecEvnt();
                                        break;
                                    case 'ActflDownload':
                                        DownloadFileEvnt();
                                        break;
                                }
                            });
                            $('#slcBtnStActionType').val($anchor.attr('data-actiontype')).trigger('change');
                        };
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='customouterspacing'></div> <div id='custominnerspacing'></div>",
                    "onload": function ($item) {
                        $('#customouterspacing').AdvanceSpacing({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM,
                            "options": {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                            },
                        });
                        $('#custominnerspacing').AdvanceSpacing({
                            targetParent: $activeDOM,
                            targetElem: $activeDOM.find('a'),
                            "options": {
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                            },
                        });
                    }
                },
                "Hover Effect": {
                    "options": {
                        "color": ["all", "background", "text"],
                        "shadow": "on",
                        "border": {
                            "max": 20,
                            "min": 0,
                            "times": 1,
                            "position": ["all", "top", "right", "bottom", "left"],
                            "selectLayer": function ($elem) {
                                //return $parent;
                            },
                        }
                    },
                    "Scroll Effect": {
                        "options": [],
                        "selectLayer": function ($elem) {
                            return $elem.parent().parent();
                        }
                    }
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 200,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow": {
                    "options": {

                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Line Height": {
                            "DOM": CreateSliderDOM('LineHeightSizeSlider', 'LineHeightSizeHandle', 'Line Height'),
                            "prepend": "true",
                            "onload": function () {
                                LineHeight();

                                function LineHeight() {
                                    component["button"].common.lineheight();
                                }
                            }
                        },
                        //"Height": {
                        //    "callback": function (space, $elem) {
                        //        let $parent = $activeDOM;
                        //        let parentClasses = $parent.attr('class');
                        //        let dAlpha = DeviceAlphaSpace();
                        //        let regex = new RegExp(dAlpha + 'Lh-[0-9]{1,4}', 'g');
                        //        let lineHeightClass = parentClasses.match(regex);
                        //        if (lineHeightClass !== null) {
                        //            $parent.removeClass(lineHeightClass[0]);
                        //        }
                        //        $parent.addClass(dAlpha + 'Lh-' + space);
                        //    }
                        //},
                        "Widths": {
                            "DOM": CreateSliderDOM('buttonWrapperSizeSlider', 'buttonWrapperSizeHandle', 'Width'),
                            "prepend": "true",
                            "onload": function () {
                                LineHeight();

                                function LineHeight() {
                                    component["button"].common.width();
                                }
                            }
                        },
                        "FontSize": {},
                        "Visibility": {}
                    }

                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "left", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "removeedit": function ($editDOM) {
            $editDOM.find('div[data-type="button"]').find('a').removeClass('anchorpage').addClass('anchorpage');
        },
        "view": {
            "view": function () {
                this.library.buttonlick();
            },
            "library": {
                "buttonlick": function () {
                    let _ths = this;
                    if (!EditorMode)
                        $('.editor-component.button').find('.com-button').off().on('click', function (e) {
                            var $this = $(this);
                            switch ($this.attr('data-actiontype')) {
                                case 'ActSection':
                                    _ths.gotoSection($this);
                                    break;
                                case 'ActPopup':
                                    _ths.openPopUp($this);
                                    break;
                                case 'ActflDownload':
                                    _ths.downloadFile($this);
                                    break;
                            }
                        });
                },
                "gotoSection": function ($this) {
                    let $tar = $('.cRow[data-id="' + $this.attr('data-sectionid') + '"]');
                    if ($tar.length > 0) {
                        $('html, body').animate({
                            scrollTop: $tar.offset().top - 80,
                        }, 500);
                    }
                },
                "openPopUp": function ($this) {
                    let $targetModel = $('.btnlinked-popup[data-id="' + $this.attr('data-modalid') + '"]');
                    if ($targetModel.length > 0) {
                        $targetModel.fadeIn();
                    }
                },
                "downloadFile": function ($this) {
                    let attch = $this.attr('data-attachment');
                    if (typeof attch !== 'undefined' && attch.length > 0) {
                        window.location.href = SageFrameHostURL + attch;
                    }
                },
            }
        },
        "common": {
            "width": function () {
                let $parent = $activeDOM;

                function WidthChange(space) {
                    ReplaceClassByPattern($parent, 'W-[0-9]{1,4}', 'W-' + space);
                }
                AdvanceSageSlider($('#buttonWrapperSizeSlider'), $('#buttonWrapperSizeHandle'), 5, 1080,
                    GetValueByClassName($parent, 'W-[0-9]{1,4}', 'W-'), WidthChange, $parent, 'px');
            },
            "lineheight": function () {
                let $parent = $activeDOM;

                function LineHeightChange(space) {
                    ReplaceClassByPattern($parent, 'Lh-[0-9]{1,4}', 'Lh-' + space);
                }
                AdvanceSageSlider($('#LineHeightSizeSlider'), $('#LineHeightSizeHandle'), 5, 200,
                    GetValueByClassName($parent, 'Lh-[0-9]{1,4}', 'Lh-'), LineHeightChange, $parent, 'px');
            },
            "fontsize": function () {
                let $parent = $activeDOM;

                function LineHeightChange(space) {
                    ReplaceClassByPattern($parent, 'Fs-[0-9]{1,4}', 'Fs-' + space);
                }
                AdvanceSageSlider($('#buttonSizeSlider'), $('#buttonSizeHandle'), 5, 200,
                    GetValueByClassName($parent, 'Fs-[0-9]{1,4}', 'Fs-'), LineHeightChange, $parent, 'px');
            },
            "copyAttributes": function ($dropped, $choosen) {
                let $selected = $choosen.children('.editor-component');
                $selected.each(function () {
                    $.each(this.attributes, function () {
                        if (this.specified) {
                            $dropped.attr(this.name, this.value);
                        }
                    });
                });
            }
        }
    }
,    "carousel": {
        "componentname": "carousel",
        "category": "advance",
        "icon": "icon-icon-row",
        "row": false,
        "hidden": true,
        "collection": false,
        "bucket": true,
        "type": "carousel",
        "defaultdata": EasyLibrary.ReadDOM("carouseldata"),
        "pageload": function () {
            let $imageSlider = $('.ImageSliderWrapper');
            $imageSlider.removeClass('binded');
            $imageSlider.each(function (index, value) {
                let carousel = new CarouselInit($(this));
            });
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            let $slider = $appendLayer.find('.ImageSliderWrapper');
            $slider.removeClass('binded');
            //$slider.parent().attr('data-id', 'sl_' + Math.floor((Math.random() * 1000) + 100));
            var carousel = new CarouselInit($slider);
        },
        "onsort": function (ui) {
            let $imageSlider = ui.find('.ImageSliderWrapper');
            $imageSlider.removeClass('binded');
            let carousel = new CarouselInit($imageSlider);
        },
        "loadSetting": function ($item) { },
        "common": {
            "InitHeading": function ($item, $parent) {
                $('#showHeadingCarousel').off().on('click', function () {
                    let $imageWrapper = $parent.find('.itemWrapper');
                    if ($(this).is(':checked')) {
                        $imageWrapper.find('.carouselheading').removeClass('Dn');
                        SettingEvents();
                    } else {
                        $imageWrapper.find('.carouselheading').addClass('Dn');

                    }
                    // component.carousel.settingDOMs.tabs.Data.onload($item);
                    component.carousel.managedata.option.onappend($item);
                });
                $('#showParagraphCarousel').off().on('click', function () {
                    let $imageWrapper = $parent.find('.itemWrapper');
                    if ($(this).is(':checked')) {
                        $imageWrapper.find('.carouselParagraph').removeClass('Dn');
                        SettingEvents();
                    } else {
                        $imageWrapper.find('.carouselParagraph').addClass('Dn');
                    }
                    //component.carousel.settingDOMs.tabs.Data.onload($item);
                    component.carousel.managedata.option.onappend($item);
                });

                $('#showrReadMoreCarousel').off().on('click', function () {
                    let $imageWrapper = $parent.find('.itemWrapper');
                    if ($(this).is(':checked')) {
                        $imageWrapper.find('.button').removeClass('Dn');
                    } else {
                        $imageWrapper.find('.button').addClass('Dn');
                    }
                    component.carousel.managedata.option.onappend($item);

                });
            },
            "selectedLayer": function () {
                let $parent = $activeDOM;
                if ($activeDOM.hasClass('cRow')) {
                    $parent = $activeDOM.find('.ImageSliderDOM');
                }
                return $parent;
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("carouselbasic"),
                    "onload": function ($item) {
                        let $parent = component["carousel"].common.selectedLayer();

                        if ($parent.hasClass('.editor-row-shaded-layer'))
                            $parent = $parent.parent();
                        let $imageWrapper = $parent.find('.itemWrapper');
                        LoadSettings();
                        InitEvents();

                        function LoadSettings() {
                            let $firstSlider = $imageWrapper.eq(0);
                            let c = $firstSlider.find('.textWrapper').attr('class').match(/container-(\w+)/g);
                            if (c != null) {
                                $('#carContainerWidth').val(c[0]);
                            }

                            if ($parent.hasClass('fullpagebanner')) {
                                $('#heightAdjustCarousel').prop('checked', true);
                                $('#heightadjust').hide();
                            } else {
                                $('#heightAdjustCarousel').prop('checked', false);
                                $('#heightadjust').show();
                            }
                            if ($parent.find('.arrows-wrapper').hasClass('Dn')) {
                                $('#showArrowCarousel').prop('checked', false);
                            } else {
                                $('#showArrowCarousel').prop('checked', true);
                            }
                            if ($parent.find('.pager-dot').hasClass('Dn')) {
                                $('#showDotsCarousel').prop('checked', false);
                                $('#sliderDotsGeneric').addClass('Dn');
                            } else {
                                $('#showDotsCarousel').prop('checked', true);
                                $('#sliderDotsGeneric').removeClass('Dn');
                            }

                            let tranType = $parent.attr('data-transition');
                            if (typeof (tranType) !== "undefined")
                                $('#carouselAnimation').val(tranType);
                            let loop = $parent.attr('data-loop');
                            if (typeof loop !== "undefined" && loop.length > 0) {
                                $('#AutoSlideCarousel').prop('checked', true);
                            } else {
                                $('#AutoSlideCarousel').prop('checked', false);
                            }
                            if ($firstSlider.find(".carousel-shade").length > 0) {
                                $('#carouselShadedLayer').prop('checked', true);
                                $('.caroselShadeCP').removeClass('Dn');
                            } else {
                                $('#carouselShadedLayer').prop('checked', false);
                                $('.caroselShadeCP').addClass('Dn');
                            }
                            loadShadePicker();

                            //Slider dots setting init
                            $("#sliderDotsGeneric").AdvanceSliderDots({
                                targetParent: $activeDOM,
                                targetElem: '.dots',
                                targetSliderWrap: '.ImageSliderWrapper',
                                targetActiveDot: '.active-dot',
                                sliderShape: true,
                                dotsSize: true,
                                callback: {

                                }
                            });
                        }

                        function InitEvents() {
                            $('#carContainerWidth').off('change').on('change', function () {
                                let v = $(this).val();
                                let $textWrapper = $imageWrapper.find('.textWrapper');
                                $textWrapper.removeClass('editor-row-container').removeClass('container-small').removeClass('container-medium').removeClass('container-large').removeClass('container-extralarge').removeClass('container-fluid');
                                if (v.length > 0) {
                                    $textWrapper.addClass('editor-row-container').addClass(v);
                                }
                            });

                            $('#heightAdjustCarousel').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    //remove height classes
                                    $parent.removeClass(function (i, cl) {
                                        return (cl.match(/\bH-[0-9]{1,3}\b/g) || []).join(' ');
                                    });
                                    $parent.find('.ImageSlider').removeClass(function (i, cl) {
                                        return (cl.match(/\bH-[0-9]{1,3}\b/g) || []).join(' ');
                                    });
                                    $parent.addClass('fullpagebanner');
                                    AdjustSizeFullpage($parent);
                                    $('#heightadjust').hide();
                                } else {
                                    RemoveCarouselHeight($parent);
                                    let d = ViewDeviceAlpha();
                                    let regex = new RegExp('\\b' + d + 'H-([0-9]{1,3})' + '\\b', 'g');
                                    let hCls = $parent.attr('class').match(regex);
                                    let h = 620;
                                    if (hCls !== null && hCls[0]) {
                                        h = hCls[0].replaceAll(d + 'H-', '');
                                    }
                                    ChangeSliderValue($('#carouselHeightSlider'), h);
                                    $parent.removeClass('fullpagebanner');
                                    $('#heightadjust').show();
                                }
                            });

                            component["carousel"].common.InitHeading($item, $parent);
                            $('#showArrowCarousel').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    $parent.find('.arrows-wrapper').removeClass('Dn');
                                } else {
                                    $parent.find('.arrows-wrapper').addClass('Dn');
                                }
                            });
                            $('#showDotsCarousel').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    $parent.find('.pager-dot').removeClass('Dn');
                                    $('#sliderDotsGeneric').removeClass('Dn');
                                } else {
                                    $parent.find('.pager-dot').addClass('Dn');
                                    $('#sliderDotsGeneric').addClass('Dn');
                                }
                            });
                            $('#carouselAnimation').off().on('change', function () {
                                let type = $(this).val();
                                $parent.attr('data-transition', type);
                                $parent.find('.ImageSliderWrapper').removeClass('binded');
                                InitCarouselSlider($parent.find('.ImageSliderWrapper'));
                            });
                            $('#AutoSlideCarousel').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    $parent.attr('data-loop', "loop");
                                } else {
                                    $parent.attr('data-loop', "");
                                }
                                $parent.find('.ImageSliderWrapper').removeClass('binded');
                                InitCarouselSlider($parent.find('.ImageSliderWrapper'));
                            });
                            let itemsPerSlider = DeviceItemPerView($parent.attr('data-perslider'));
                            //if (typeof ($parent.attr('data-perslider')) !== "undefined") {
                            //    itemsPerSlider = parseInt($parent.attr('data-perslider'));
                            //}
                            $('#itemsperslider').val(itemsPerSlider);
                            $('#itemsperslider').on('change', function () {
                                let $this = $(this);
                                let perSlider = $this.val();
                                $parent.attr('data-perslider', SetDeviceItemPerView($parent.attr('data-perslider'), perSlider));
                                $parent.find('.ImageSliderWrapper').removeClass('binded');
                                InitCarouselSlider($parent.find('.ImageSliderWrapper'));
                            });
                            component["carousel"].common1.sliderheight();
                            $("#carouselShadedLayer").off().on("click", function () {
                                if ($(this).is(':checked')) {
                                    $('.caroselShadeCP').removeClass('Dn');
                                    addShade();
                                } else {
                                    $('.caroselShadeCP').addClass('Dn');
                                    removeShade();
                                }
                            });
                        }

                        function loadShadePicker() {
                            $('#carouselShadeColor').css('background-color', getDefaultShadeColor());
                            let colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    let objColor = RenderCallBackColor(this);
                                    $parent.find('.carousel-shade').css({ 'background-color': objColor.bgColor });
                                    $parent.attr('data-shadecolor', objColor.bgColor);
                                }
                            });
                            $('#carouselShadeColor').colorPicker(colorPickerOption);
                        }

                        function getDefaultShadeColor() {
                            let defColor = $parent.attr('data-shadecolor');
                            if (typeof defColor === 'undefined') {
                                defColor = 'rgba(255,255,255,0.5)';
                            }
                            return defColor;
                        }

                        function addShade() {
                            let defColor = getDefaultShadeColor();
                            $parent.find('.itemWrapper').each(function () {
                                $(this).find('.carousel-shade').remove();
                                $(this).prepend('<div class="carousel-shade" style="width: 100%;height: 100%; position:absolute; background-color: ' + defColor + ';">');
                            });
                            $parent.attr('data-shadecolor', defColor);
                        }

                        function removeShade() {
                            $parent.find(".carousel-shade").remove();
                        }
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('carouseltext'),
                    "onload": function ($item) {
                        let $parent = component["carousel"].common.selectedLayer();
                        $('#settingsFor').off('change').on('change', function () {
                            let selected = $(this).val();
                            $('#headSetting').addClass('Dn');
                            $('#paraSetting').addClass('Dn');
                            $(`#${selected}Setting`).removeClass('Dn');
                        });
                        $("#carHeadSet").AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: '.carouselheading > h1.editor-para',
                        });
                        $("#carParaSet").AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: '.carouselParagraph > p.editor-para'
                        });
                    }
                },

                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row">
                                <div class="field-row stElWrap col40-60">
                                    <label class="fCol">Settings for</label>
                                    <span class="fCol select__box">
                                        <select id="spacingFor">
                                            <option value="car">Carousel</option>
                                            <option value="head">Heading</option>
                                            <option value="para">Paragraph</option>
                                            <option value="button">Button</option>
                                        </select>
                                    </span>
                                </div>
                            </div>
                            <div id="carSpacing">
                                <div id='carMarSet'></div>
                                <div id='carPadSet'></div>
                            </div>
                            <div id="headSpacing" class ="Dn">
                                <div id='headMarSet'></div>
                            </div>
                            <div id="paraSpacing" class ="Dn">
                                <div id='paraMarSet'></div>
                            </div>
                            <div id="buttonSpacing" class ="Dn">
                                <div id='buttonMarSet'></div>
                            </div>`,
                    "onload": function () {
                        $('#spacingFor').off('change').on('change', function () {
                            let selected = $(this).val();
                            $('#carSpacing').addClass('Dn');
                            $('#headSpacing').addClass('Dn');
                            $('#paraSpacing').addClass('Dn');
                            $('#buttonSpacing').addClass('Dn');
                            $(`#${selected}Spacing`).removeClass('Dn');
                        });
                        let $parent = component["carousel"].common.selectedLayer();
                        $('#carMarSet').AdvanceSpacing({
                            targetParent: $parent.parent(),
                            targetElem: $parent,
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                            }
                        });
                        $('#carPadSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.itemWrapper',
                            options: {
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        //head
                        $('#headMarSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.carHeadChild',
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        //para
                        $('#paraMarSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.carParaChild',
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        //button
                        $('#buttonMarSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.button',
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                    }
                },

                "Alignment": {
                    custom: true,
                    DOM: '<div id="carAlign"></div>',
                    onload: function () {
                        let $parent = component["carousel"].common.selectedLayer();
                        $('#carAlign').AdvanceAlignment({
                            targetParent: $parent,
                            targetElem: 'li.itemWrapper, .carouselheading, .carouselParagraph',
                            options: {
                                "horizontal": ["left", "center", "right"],
                                "vertical": ["top", "middle", "bottom"]
                            }
                        });
                    }
                },
            },
            "selectLayer": function ($elem) {
                return component["carousel"].common.selectedLayer();
            },
        },
        "styleDOMs": {
            "tabs": {
                "Box Shadow": {
                    "options": {}
                },

                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                }
            },
            "selectLayer": function ($elem) {
                return component["carousel"].common.selectedLayer();
            },
        },
        "managedata": {
            "option": {
                heading: "Manage Image Slider",
                data: EasyLibrary.ReadDOM("carouseltabdom"),
                carouselbtnDOM: EasyLibrary.ReadDOM("carouselbtn"),
                showheading: true,
                width: "50%",
                height: "80%",
                advance: false,
                onappend: function ($wrapper) {
                    let carBtnTmp = this.carouselbtnDOM;
                    let $parent = component["carousel"].common.selectedLayer();
                    if ($parent.length == 0) {
                        console.error("no activedom ", $parent);
                    }
                    let $imageWrapper = $parent.find('.itemWrapper');
                    let deleteIcon = '<div class="Remove" style="position: absolute; left: 0; top: 0; padding: 5px; font-size: 12px; cursor: pointer; color: white; background-color: #e14a4a;">' + '<i class="fa fa-trash deleteCarouselItem" style="display: inline-block; vertical-align: middle;" title="delete"></i>' + divEnd;
                    let DragIcon = '<span class="fcol cPointer sfCol_6"><i class="fa Ml-5 Fs-20  ImageSort fa fa-arrows-v"></i></span>';
                    let $item = $(this);
                    LoadSettings();
                    initImages();
                    initEvents();
                    InitEvent();
                    //-------------------------------------loadsetting---------------------------------------
                    function LoadSettings() {
                        if ($parent.hasClass('.editor-row-shaded-layer'))
                            $parent = $parent.parent();

                        let $firstSlider = $imageWrapper.eq(0);
                        let contains = $firstSlider.find('img');
                        if (contains.length > 0) {
                            $('#showImageCarousel').prop('checked', true);
                        } else {
                            $('#showImageCarousel').prop('checked', false);
                        }
                        carouselheading = $firstSlider.find('.carouselheading').hasClass('Dn');
                        $('#showHeadingCarousel').prop('checked', !carouselheading);
                        carouseParagraph = $firstSlider.find('.carouselParagraph').hasClass('Dn');
                        $('#showParagraphCarousel').prop('checked', !carouseParagraph);
                        carouseButton = $firstSlider.find('.button').hasClass('Dn');
                        $('#showrReadMoreCarousel').prop('checked', !carouseButton);
                    }
                    //--------------------------------------initEvent--------------------------------------
                    function InitEvent() {
                        $('#showImageCarousel').off().on('click', function () {
                            if ($(this).is(':checked')) {
                                $parent.find('.itemWrapper').each(function (i, o) {
                                    if ($(o).hasClass('hideimage')) {
                                        $(o).removeClass('hideimage');
                                        let src = $(o).attr('data-imgsrc');
                                        $(o).prepend('<img src="' + src + '" style="width: 100%; height: 100%; object-fit: cover;">');
                                    } else {
                                        let image = '<img  src="' + webbuildermodulepath + '/cbuilderassets/img/def1.jpg" style="width: 100%; height: 100%; object-fit: cover;">';
                                        $(o).prepend(image);
                                    }
                                });
                                //if ($parent.find('.hideimage').length > 0) {
                                //    $parent.find('.hideimage').each(function () {
                                //        $(this).removeClass('hideimage');
                                //        let src = $(this).attr('data-imgsrc');
                                //        $(this).prepend('<img src="' + src + '" style="width: 100%; height: 100%; object-fit: cover;">');
                                //    });
                                //} else {
                                //    let image = '<img  src="' + webbuildermodulepath + '/img/def1.jpg" style="width: 100%; height: 100%; object-fit: cover;">';
                                //    $imageWrapper.prepend(image);
                                //}
                            } else {
                                $parent.find('img').each(function () {
                                    let $im = $(this);
                                    $im.parent().attr('data-imgsrc', $im.attr('src')).addClass('hideimage');
                                    $im.remove();
                                });
                            }
                            component.carousel.managedata.option.onappend($item);
                        });
                        component["carousel"].common.InitHeading($item, $parent);
                    }
                    //-------------------------------------------------------------------------------------

                    function initImages() {
                        let $imageSliderWrapper = $parent.find('.itemsWrapper');
                        let $carousels = $imageSliderWrapper.find('.itemWrapper');
                        let items = $carousels.length;
                        if (items < 1) {
                            console.log("No items ", $parent, $imageSliderWrapper);
                        }
                        orderSerttingDOM();
                        let sort_pos = [];
                        $('.sortablecomponent > .popup-item-sort').each(function () {
                            sort_pos.push($(this).attr('data-sort'));
                        });
                        let carouselDOM = '<ul class="Dfx flxWrp" style="position: relative; padding: 0; margin: 0; list-style: none;">';
                        for (let i = 0; i < items; i++) {
                            let $elem = $carousels.eq(i);
                            carouselDOM += '<li class="sfCol_100 item-image" style="padding: 0; margin: 0; list-style: none;width: 100%; margin-right: 3%; margin-bottom: 25px; position: relative;">';
                            carouselDOM += '<div class="carouselItem">';
                            carouselDOM += '<div class="imgWrapper"><img src="' + $elem.find('img').attr('src') + ' " />';
                            if ($("#showImageCarousel").is(':checked')) {
                                carouselDOM += '<span class="caro_img_ch" style="cursor:pointer; font-size:12px;">Change Image</span>';
                            }
                            carouselDOM += '</div><div class="textWrapper">';

                            sort_pos.forEach(function (d, i) {
                                let t = d.toLowerCase();
                                switch (t) {
                                    case 'carheading':
                                        if ($("#showHeadingCarousel").is(':checked'))
                                            carouselDOM += '<h1 contenteditable="true" class="carheading" style="position: relative;font-size: 14px;font-weight: 700;padding: 0 10px; height: 48px; line-height: 150%; border: solid 1px rgba(0,0,0,0.2); overflow: hidden; margin: 0; margin-bottom: 5px;">' + $elem.find('h1').text() + ' </h1>';
                                        break;
                                    case 'carparagraph':
                                        if ($("#showParagraphCarousel").is(':checked'))
                                            carouselDOM += '<p contenteditable="true" class="carparagraph" style="position: relative;font-size: 12px;font-weight: 300;padding: 0 10px; height: 48px; line-height: 150%; border: solid 1px rgba(0,0,0,0.2); overflow: hidden; margin: 0; margin-bottom: 5px;">' + $elem.find('p').text() + ' </p>';
                                        break;
                                }
                            });

                            carouselDOM += divEnd;
                            carouselDOM += DragIcon;
                            carouselDOM += divEnd;
                            carouselDOM += deleteIcon;
                            carouselDOM += '</li>';
                        }
                        $('#imagecollection').html(carouselDOM);
                        DeleteRow();
                        $('#imagecollection').find('img').each(function () {
                            let $this = $(this);
                            $this.on('click', function () {
                                let media = $this.SageMedia({
                                    onSelect: function (src, response, type, filename, extension) {
                                        src = typeof (src) !== "undefined" && src !== "" ? src.replace(/\/{2,}/g, '/') : src;
                                        $this.attr('src', src);
                                        let index = $('#imagecollection').find('img').index($this);
                                        $parent.find('.itemWrapper').find('img').eq(index).attr('src', src);
                                    },
                                    mediaType: 'image',
                                    extension: 'png,jpeg,jpg,ico,svg,gif,webp'
                                });
                                media.Show();
                            });
                        });
                        $(document).off("click", ".caro_img_ch").on("click", ".caro_img_ch", function () {
                            let $this = $(this);
                            let media = $this.SageMedia({
                                onSelect: function (src, response, type, filename, extension) {
                                    src = typeof (src) !== "undefined" && src !== "" ? src.replace(/\/{2,}/g, '/') : src;
                                    $this.prev('img').attr('src', src);
                                    let index = $('#imagecollection').find('.caro_img_ch').index($this);
                                    let $row = $parent.find('.itemWrapper').eq(index);
                                    let $img = $row.find('img');
                                    if ($img.length > 0) {
                                        $img.attr('src', src);
                                    } else {
                                        $row.append('<img src="' + src + '" style="width: 100%; height: 100%; object-fit: cover;">');
                                    }
                                },
                                mediaType: 'image',
                                extension: 'png,jpeg,jpg,ico,svg,gif,webp'
                            });
                            media.Show();
                        });
                        $('#imagecollection').find('li').each(function () {
                            initTextEdit($(this));
                        });
                    }

                    function initEvents() {
                        $('#btnAddnewCarousel').off().on('click', function () {
                            let $imageSliderWrapper = $parent.find('.itemsWrapper');
                            let $carousels = $('#imagecollection').find('ul li');
                            let slider = '';
                            if ($("#showImageCarousel").is(':checked')) {
                                let media = $(this).SageMedia({
                                    onSelect: function (src, response, type, filename, extension) {
                                        src = typeof (src) !== "undefined" && src !== "" ? src.replace(/\/{2,}/g, '/') : src;
                                        AppendImage(src);
                                    },
                                    mediaType: 'image',
                                    extension: 'png,jpeg,jpg,ico,svg,gif,webp'
                                });
                                media.Show();
                            }
                            else {
                                AppendImage('');
                            }
                            function AppendImage(src) {
                                let newHtml = '';
                                let img = '', img2 = '';
                                if ($('#carouselShadedLayer').is(':checked')) {
                                    img += '<div class="carousel-shade" style="width: 100%;height: 100%; position:absolute; background-color: ' + getDefaultShadeColor() + ';"></div>';
                                }
                                if (src.length > 0) {
                                    img += '<img src="' + src + '" style="width: 100%; height: 100%; object-fit: cover;">';
                                    img2 += '<img src="' + src + '">';
                                }
                                let text = '';
                                let data = '';
                                let s_align = 'TxAl-l TxAl-m';
                                let s_head_style = 'editor-para carHeadChild Mt-0 Mb-0 ff-montserrat f-weight-100 Fs-96 mFs-20 tFs-20';
                                let s_para_style = 'editor-para carParaChild slidercom Mt-0 Mb-0 tFs-16 mFs-15 Lh-47 Fs-25 ff-montserrat f-weight-100';
                                let textWrapStyle = 'textWrapper editor-row-container container-extralarge';
                                let tmpSlides = $imageSliderWrapper.find('.itemWrapper');
                                let tmpHead = false;
                                let tmpPara = false;
                                let _textOptionClone = $(textOption).clone();
                                _textOptionClone.find('li.deletehelper').remove();
                                _textOptionClone.find('span.sortComponent').remove();
                                _textOptionClone.addClass("no-drag");
                                let _textOption = _textOptionClone.wrapAll('<div />').parent().html();
                                if (tmpSlides.length > 0) {
                                    let $first = tmpSlides.eq(0);
                                    let tmpClass = $first.attr('class').match(/([a-z]?)TxAl-([a-z])/g);
                                    if (tmpClass.length > 0) {
                                        s_align = tmpClass.join(' ');
                                    }
                                    s_head_style = $first.find('h1.carHeadChild').attr('class');
                                    s_para_style = $first.find('p.carParaChild').attr('class');
                                    textWrapStyle = $first.find('div.textWrapper').attr('class');
                                    carBtnTmp = $first.find('div.button').clone().wrapAll('<div/>').parent().html();
                                }

                                let data_pos = [];
                                $('.sortablecomponent > .item-sort ').each(function () {
                                    data_pos.push($(this).attr('data-refer'));
                                });
                                data_pos.forEach(function (d, i) {
                                    let t = d.toLowerCase();
                                    switch (t) {
                                        case 'carouselheading':
                                            if ($("#showHeadingCarousel").is(':checked')) {
                                                data += '<h1 contenteditable="true" style="position: relative;font-size: 14px; font-weight: 700; padding: 0 10px; height: 48px; line-height: 150%; border: solid 1px rgba(0,0,0,0.2); overflow: hidden; margin: 0; margin-bottom: 5px;">This is heading</h1>';
                                                text += DOMCreate('div', _textOption + '<h1 contenteditable="true" data-spacecollection="carHeadChild" class="' + s_head_style + '" style="color: rgb(255, 255, 255);">This is heading </h1>', 'editor-component com-heading carouselheading slidercom sfCol_100 carHeadPar ' + s_align + ' carHeadPar', '', ['data-childCollection="carHeadChild"', 'data-parCollection="carHeadPar"', 'data-alignCollection="carHeadPar"', 'data-ForSort="caroheading"', 'data-type="text"']);
                                            }
                                            else {
                                                data += '<h1 class="Dn" contenteditable="true" style="position: relative;font-size: 14px; font-weight: 700; padding: 0 10px; height: 48px; line-height: 150%; border: solid 1px rgba(0,0,0,0.2); overflow: hidden; margin: 0; margin-bottom: 5px;">This is heading</h1>';
                                                text += DOMCreate('div', _textOption + '<h1 contenteditable="true" data-spacecollection="carHeadChild" class="' + s_head_style + '" style="color: rgb(255, 255, 255);">This is heading </h1>', 'editor-component Dn com-heading carouselheading slidercom sfCol_100  carHeadPar ' + s_align + ' carHeadPar', '', ['data-childCollection="carHeadChild"', 'data-parCollection="carHeadPar"', 'data-alignCollection="carHeadPar"', 'data-ForSort="caroheading"', 'data-type="text"']);
                                            }
                                            break;
                                        case 'carouselparagraph':
                                            if ($("#showParagraphCarousel").is(':checked')) {
                                                data += '<p contenteditable="true" style="position: relative;font-size: 12px; font-weight: 300; padding: 0 10px; height: 48px; line-height: 150%; border: solid 1px rgba(0,0,0,0.2); overflow: hidden; margin: 0; margin-bottom: 5px;">Lorem Ipsums is simply dummy text of the printing and typesetting industry</p>';
                                                text += DOMCreate('div', _textOption + '<p contenteditable="true" data-spacecollection="carParaChild" class="' + s_para_style + '" style="color: rgb(255, 255, 255);">Lorem Ipsums is simply dummy text of the printing and typesetting industry</p>', 'editor-component com-heading carouselParagraph sfCol_100 ' + s_align + ' carParaPar', '', ['data-childCollection="carParaChild"', 'data-parCollection="carParaPar"', 'data-alignCollection="carParaPar"', 'data-ForSort="caroparagraph"', 'data-type="text"']);
                                            }
                                            else {
                                                data += '<p class="Dn" contenteditable="true" style="position: relative;font-size: 12px; font-weight: 300; padding: 0 10px; height: 48px; line-height: 150%; border: solid 1px rgba(0,0,0,0.2); overflow: hidden; margin: 0; margin-bottom: 5px;">Lorem Ipsums is simply dummy text of the printing and typesetting industry</p>';
                                                text += DOMCreate('div', _textOption + '<p contenteditable="true" data-spacecollection="carParaChild" class="' + s_para_style + '" style="color: rgb(255, 255, 255);">Lorem Ipsums is simply dummy text of the printing and typesetting industry</p>', 'editor-component com-heading carouselParagraph sfCol_100 ' + s_align + ' carParaPar Dn', '', ['data-childCollection="carParaChild"', 'data-parCollection="carParaPar"', 'data-alignCollection="carParaPar"', 'data-ForSort="caroparagraph"', 'data-type="text"']);
                                            }
                                            break;
                                        case 'button':
                                            if ($("#showrReadMoreCarousel").is(':checked')) {
                                                text += $(carBtnTmp).clone().removeClass('Dn').wrapAll('<div />').parent().html();
                                            }
                                            else {
                                                text += $(carBtnTmp).clone().addClass('Dn').wrapAll('<div />').parent().html();
                                            }
                                            break;
                                    }
                                });

                                slider = img;
                                if (text.length > 0) {
                                    slider += DOMCreate('div', text, textWrapStyle, '', ['style="position: absolute;top: 15%;left: 0;width: 100%;padding: 40px 15%;"']);
                                }
                                newHtml = '<div style="width: 20%; float: left;">' + img2;
                                if (src.length > 0) {
                                    newHtml += '<span class="caro_img_ch" style="cursor:pointer; font-size:12px;">Change Image</span>';
                                }
                                newHtml += '</div>' + DOMCreate('div', data, 'textWrapper', '', ['class="width: 80%; float: left; padding: 0 15px;"']);
                                newHtml = divStart("carouselItem") + newHtml + divEnd + DragIcon + deleteIcon;


                                $('#imagecollection').find('ul').append('<li class="sfCol_100" style="padding: 0; margin: 0; list-style: none;width: 100%; margin-right: 3%; margin-bottom: 25px; position: relative;">' + newHtml + '</li>');

                                $imageSliderWrapper.append(`<li class="itemWrapper ${s_align}" style="display: inline-block; height: 100%; background-repeat: no-repeat; background-size: cover; position: relative;">${slider}</li>`);
                                $parent.find('.ImageSliderWrapper').removeClass('binded');
                                InitCarouselSlider($parent.find('.ImageSliderWrapper'));

                                let $lastchild = $('#imagecollection').find('img').last();
                                $lastchild.on('click', function () {
                                    let media = $lastchild.SageMedia({
                                        onSelect: function (src, response, type, filename, extension) {
                                            src = typeof (src) !== "undefined" && src !== "" ? src.replace(/\/{2,}/g, '/') : src;
                                            $lastchild.attr('src', src);
                                            let index = $('#imagecollection').find('img').index($lastchild);
                                            $parent.find('.itemWrapper').find('img').eq(index).attr('src', src);
                                        },
                                        mediaType: 'image',
                                        extension: 'png,jpeg,jpg,ico,svg,gif,webp'
                                    });
                                    media.Show();
                                });
                                setTimeout(function () {
                                    $('#imagecollection').find('li').each(function () {
                                        initTextEdit($(this));
                                    });
                                });
                                component.carousel.managedata.option.onappend($item);
                                component["carousel"].common.InitHeading($item, $parent);
                                DeleteRow();
                                SettingEvents();
                                LoadSettings();
                            }
                        });
                        //orderSerttingDOM();
                    }
                    function initTextEdit($this) {
                        $this.find("h1").off().on('blur keyup', function () {
                            let index = $('#imagecollection').find('h1').index($this.find("h1"));
                            $parent.find('.itemWrapper').find('h1').eq(index).text($(this).text());
                        });

                        $this.find("p").off().on('blur keyup', function () {
                            let index = $('#imagecollection').find('p').index($this.find("p"));
                            $parent.find('.itemWrapper').find('p').eq(index).text($(this).text());
                        });
                    }

                    function DeleteRow() {
                        $('.deleteCarouselItem').off().on('click', function () {
                            let $this = $(this);
                            SageConfirmDialog('Do you want to delete.').done(function () {
                                let $slider = $this.parent().parent();
                                let index = $('#imagecollection').find('ul li').index($slider);
                                $slider.remove();
                                $parent.find('.itemWrapper').eq(index).remove();
                                $parent.find('.ImageSliderWrapper').removeClass('binded');
                                InitCarouselSlider($parent.find('.ImageSliderWrapper'));
                            });
                        });
                    }
                    function getDefaultShadeColor() {
                        let defColor = $parent.attr('data-shadecolor');
                        if (typeof defColor === 'undefined') {
                            defColor = 'rgba(255,255,255,0.5)';
                        }
                        return defColor;
                    }

                    function orderSerttingDOM() {
                        let orderedSetDOM = [];
                        let $slidertext = $parent.find(".textWrapper");
                        let $items = "";
                        for (let i = 0; i <= $slidertext.length; i++) {
                            let $searchitem = $slidertext.eq(i).find('.editor-component').attr('data-ForSort');
                            if ($searchitem !== undefined) {
                                $items = $slidertext.eq(i).find('.editor-component');
                                break;
                            }
                        }
                        let $itemcount = $items.length;
                        if ($itemcount > 0) {
                            $.each($items, function (index, value) {
                                var classN = $(value).attr('data-ForSort');
                                var ddd = $('.' + classN);
                                orderedSetDOM.push(ddd);
                            });
                            $('.sortablecomponent').html('');
                            $('.sortablecomponent').append(orderedSetDOM);
                        }
                    }

                    //-----------------------------heading text sort----------------------------------
                    let $SortHeadingParent = $parent.find('.textWrapper');
                    $(".carouselsort").AdvanceSorting({
                        targetParent: $SortHeadingParent,
                        targetElem: '.slidercom',
                        sortableOptions: {
                            items: "div.item-sort",
                            handle: ".sorter",
                            containment: 'div.carouselsort',
                            stop: function (event, ui) {
                                SortElement();
                                SortElementPopup();
                            }
                        }
                    });

                    function SortElement() {
                        let position = [];
                        $('.sortablecomponent > .item-sort ').each(function () {
                            position.push($(this).attr('data-refer'));
                        });
                        $parent.find('.itemWrapper >.textWrapper').each(function () {
                            let $this = $(this);
                            let length = position.length;
                            for (var i = 0; i < length; i++) {
                                $this.append($this.find(`.${position[i]}`));
                            }
                        });
                    }
                    function SortElementPopup() {
                        let position1 = [];
                        $('.sortablecomponent > .popup-item-sort').each(function () {
                            position1.push($(this).attr('data-sort'));
                        });
                        //$test = $('.fullpagepopup').find('.textWrapper');
                        $('.fullpagepopup').find('.textWrapper').each(function () {
                            let $this1 = $(this);
                            let length1 = position1.length;
                            for (var i = 0; i < length1; i++) {
                                $this1.append($this1.find(`.${position1[i]}`));
                            }
                        });
                    }
                    //--------------------------------------------------------------------------------

                    let $sortimages = $parent.find('.SliderWrapper');
                    $("#imagecollection").AdvanceSorting({
                        targetParent: $sortimages,
                        targetElem: '.itemWrapper',
                        sortableOptions: {
                            items: ".item-image",
                            handle: ".ImageSort",
                            containment: '#imagecollection'
                        }
                    });
                },

                onclose: function ($wrapper) {
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "CustomVisibility": {
                            custom: true,
                            "DOM": '<div id="imageSliderVis"></div>',
                            "onload": function () {
                                let $parent = component["carousel"].common.selectedLayer();
                                $('#imageSliderVis').AdvanceVisibility({
                                    targetParent: $parent.parent(),
                                    targetElem: $parent,
                                    label: 'Visibility',
                                    showCls: "Db",
                                });
                            }
                        },
                        "Slider Height": {
                            "DOM": '<div class="field-row stElWrap"><label>Slider Height</label></div>' + CreateSliderDOM('carouselHeightSlider', 'carouselHeightHandle', 'Height'),
                            "prepend": "true",
                            "onload": function () {
                                component["carousel"].common1.sliderheight();
                            }
                        },
                        "Content Fontsize": {
                            custom: true,
                            "DOM": "<div class='field-row stElWrap'><label>Heading</label></div><div id='resCarHead'></div><div class='field-row stElWrap'><label>Paragraph</label></div><div id='resCarPara'></div>",
                            "prepend": true,
                            "onload": function ($item) {
                                let $parent = component["carousel"].common.selectedLayer();
                                $("#resCarHead").AdvanceTextSetting({
                                    targetParent: $parent,
                                    targetElem: '.carouselheading > h1.editor-para',
                                    options: {
                                        width: false,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: false
                                    }
                                });
                                $("#resCarPara").AdvanceTextSetting({
                                    targetParent: $parent,
                                    targetElem: '.carouselParagraph > p.editor-para',
                                    options: {
                                        width: false,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: false
                                    }
                                });
                            }
                        },
                        "Per slider": {
                            "DOM": "<div id='carItemPerSlide'></div>",
                            "onload": function () {
                                let $parent = component["carousel"].common.selectedLayer();
                                $('#carItemPerSlide').AdvanceItemPerView({
                                    label: 'Item per slider',
                                    min: 1,
                                    max: 4,
                                    value: DeviceItemPerView($parent.attr('data-perslider')),
                                    onChange: function (val) {
                                        $parent.attr('data-perslider', SetDeviceItemPerView($parent.attr('data-perslider'), val));
                                        $parent.find('.ImageSliderWrapper').removeClass('binded');
                                        InitCarouselSlider($parent.find('.ImageSliderWrapper'));
                                    }
                                });
                            }
                        }

                    }
                },

                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row">
                                <div class="field-row stElWrap col40-60">
                                    <label class="fCol">Settings for</label>
                                    <span class="fCol select__box">
                                        <select id="resSpacingFor">
                                            <option value="car">Carousel</option>
                                            <option value="head">Heading</option>
                                            <option value="para">Paragraph</option>
                                            <option value="button">Button</option>
                                        </select>
                                    </span>
                                </div>
                            </div>
                            <div id="carResSpacing">
                                <div id='carResMarSet'></div>
                                <div id='carResPadSet'></div>
                            </div>
                            <div id="headResSpacing" class ="Dn">
                                <div id='headResMarSet'></div>
                            </div>
                            <div id="paraResSpacing" class ="Dn">
                                <div id='paraResMarSet'></div>
                            </div>
                            <div id="buttonResSpacing" class ="Dn">
                                <div id='buttonResMarSet'></div>
                            </div>`,
                    "onload": function () {
                        $('#resSpacingFor').off('change').on('change', function () {
                            let selected = $(this).val();
                            $('#carResSpacing').addClass('Dn');
                            $('#headResSpacing').addClass('Dn');
                            $('#paraResSpacing').addClass('Dn');
                            $('#buttonResSpacing').addClass('Dn');
                            $(`#${selected}ResSpacing`).removeClass('Dn');
                        });
                        let $parent = component["carousel"].common.selectedLayer();
                        $('#carResMarSet').AdvanceSpacing({
                            targetParent: $parent.parent(),
                            targetElem: $parent,
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                            }
                        });
                        $('#carResPadSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.itemWrapper',
                            options: {
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        //head
                        $('#headResMarSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.carHeadChild',
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        //para
                        $('#paraResMarSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.carParaChild',
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        //button
                        $('#buttonResMarSet').AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.button',
                            options: {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                    }
                },
            },
            "selectLayer": function ($elem) {
                return component["carousel"].common.selectedLayer();
            }
        },

        "common1": {
            "sliderheight": function () {
                let $parent = component["carousel"].common.selectedLayer();
                let $ImageSlider = $parent.find('.ImageSlider');
                function LineHeightChange(space) {
                    ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + space);
                    ReplaceClassByPattern($ImageSlider, 'H-[0-9]{1,4}', 'H-' + space);
                }
                AdvanceSageSlider($('#carouselHeightSlider'), $('#carouselHeightHandle'), 5, 800, GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-'), LineHeightChange, $parent, 'px');
            }
        },
        "resize": function () {
            this.pageload();
        }
        //----------------------------------
    }
,    "column": {
        "componentname": "column",
        "category": "layout",
        "group": "column",
        "subgroup": "onecolumn",
        "row": false,
        "hidden": true,
        "collection": false,
        "type": "hidden",
        "afterdrop": function ($appendedParent, $appendLayer, dropped) { },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "bottom"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["image", "color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 50,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow": {
                    "options": {

                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "visibility": {}
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "bottom"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        }
    }
,    "search": {
        "componentname": "search",
        "category": "advance",
        "icon": "fa fa-search",
        "row": false,
        "hidden": false,
        "collection": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("commonsearch/search/viewdom", false),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            var ths = this;
            if (dropped)
                EasyLibrary.ComponentTemplate($appendLayer, dropped);
            else
                ths.view.evntListener();
        },
       
        "tempItemsClass": "sfCol_33 tsfCol_50 msfCol_100 Pa-15",
        "applyTemplate": function ($parent, $temp, dropped) {
            $parent.attr('class', $temp.attr('class')).attr('data-formtype', $temp.attr('data-formtype'));
            $parent.find('.btnOpnComnSrch,.srch-cont,.srch-wrp').remove();
            $parent.find('.btnOpnComnSrch,.srch-cont').remove();
            $parent.append($temp.find('.btnOpnComnSrch'));
            var $cont = $temp.find('.srch-cont');
            if ($cont.length === 0) {
                $cont = $temp.find('.srch-wrp');
            }
            $parent.append($cont);
            this.view.evntListener();
        },
        "getSettingsOptions": function () {
            var $dom;
            var typ = $activeDOM.attr('data-formtype');
            if (typ === 'normal' || typ === 'leftpush') {
                $dom = $('<div/>').html(this.SettingsOptions);
                $dom.find('.adv').remove();
                return $dom.html();
            } else if (typ === 'Ldropdown' || typ === 'Rdropdown') {
                $dom = $('<div/>').html(this.SettingsOptions);
                $dom.find('.noDrp').remove();
                $dom.find('.opn').text('Open/Close Button');
                return $dom.html();
            } else {
                $dom = $('<div/>').html(this.SettingsOptions);
                if ($activeDOM.hasClass('fOpen')) {
                    $dom.find('.comp').remove();
                    $dom.find('.opn').remove();
                } else {
                    $dom.find('.opn').text('Open Button');
                }
                return $dom.html();
            }
        },
        "SettingsOptions": EasyLibrary.ReadDOM("commonsearch/search/commonoptions", false),
        "settingDOMs": {
            "tabs": {
                'Basic': {
                    'custom': true,
                    'DOM': EasyLibrary.ReadDOM("commonsearch/search/basic", false),
                    'onload': function () {
                        var $pr = $activeDOM;
                        var $tarInp = $pr.find('.txtCommonSrch');
                        $('#txtSrchPlcHldr').val($tarInp.attr('placeholder'));
                        $('#txtSrchPlcHldr').off().on('keyup', function () {
                            $tarInp.attr('placeholder', $(this).val());
                        }); 
                        let $anchorPageList = $("#anchorPageList");
                        GetPageList();
                        //$anchorPageList.find('option').filter(function () {
                        //    return this.text == link.replace(SageFrameHostURL + '/', '').replaceAll("-", " ");
                        //}).attr('selected', true);
                       // $anchorPageList.parent().removeClass('Dn');
                        var alFa = ViewDeviceAlpha();
                        $('.chkEnDnDevEle').off('change').on('change', function () {
                            var $ths = $(this);
                            if ($ths.prop('checked'))
                                $pr.find($ths.attr('data-target')).removeClass(alFa + "Dn");
                            else
                                $pr.find($ths.attr('data-target')).addClass(alFa + "Dn");
                            checkState();
                        });
                        function checkState() {
                            $('.chkEnDnDevEle').each(function () {
                                var $ths = $(this);
                                $ths.prop('checked', $pr.find($ths.attr('data-target')).is(":visible"));
                            });
                        }
                        checkState();



                        var type = $pr.attr('data-formtype');
                        if (type === "Ldropdown" || type === "Rdropdown") {
                            $('#divStDrpType').removeClass('Dn');
                            $('#slcStSrchStyle').val(type);
                            $('#slcStSrchStyle').off().on('change', function () {
                                var val = $(this).val();
                                $pr.attr('data-formtype', val);
                                ApplyFormTypes(val);
                            });
                        } else if (type === "topfixed" || type === "fullpage") {
                            var $tar = $activeDOM.find('.srch-wrp');
                            $('#slcStContainer').val($tar.attr('data-cont'));
                            $('#divStDrpContainer').removeClass('Dn');
                            $('#slcStContainer').off().on('change', function () {
                                $tar.removeClass($tar.attr('data-cont'));
                                $tar.addClass($(this).val());
                                $tar.attr('data-cont', $(this).val());
                            });
                        }
                        function ApplyFormTypes(type) {
                            var open = false;
                            $pr.find('.btnOpnComnSrch,.btnCloseComnSrch,.srch-cont').hide();
                            $pr.find('.txtCommonSrch').show().val('');
                            switch (type) {
                                case 'normal':
                                    $pr.find('.srch-cont').show();
                                    break;
                                case 'leftpush':
                                    $pr.find('.btnCommonSrch').trigger('click');
                                    $pr.find('.srch-cont').show();
                                    break;
                                case 'Ldropdown':
                                case 'Rdropdown':
                                case 'fullpage':
                                case 'topfixed':
                                    $pr.find('.btnOpnComnSrch').show();
                                    open = true;
                                    break;
                            }
                            $pr.find('.btnCloseComnSrch').trigger('click');
                            if (open) {
                                $pr.find('.btnOpnComnSrch').trigger('click');
                            }
                        }

                        function GetPageList() {
                            $anchorPageList.html(EasyLibrary.GetPageOption());                            
                            var detailpage = $pr.attr("data-page");
                            if (detailpage != undefined) {
                                $anchorPageList.find('option').filter(function () {
                                    return this.text == detailpage.replaceAll("-", " ");
                                }).attr('selected', true);
                            }                            
                            $anchorPageList.off().on('change', function () {
                                let $selectedOption = $anchorPageList.find('option:selected');
                                $pr.attr('data-page', $selectedOption.text().replaceAll(" ", "-"));
                            });
                        }
                    }
                },
                'Spacing': {
                    'custom': true,
                    'DOM': '<div id="divDynSpcStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynSpcStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceSpacing({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    }
                                }
                            });

                        }

                    },
                    'active': function () {
                        var $stSlc = $('#divDynSpcStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                'Text': {
                    'custom': true,
                    'DOM': '<div id="divDynTxtStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynTxtStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.find('option').not('.tx').remove();
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $activeDOM.find(val).addClass('actEle');
                            var opt = {
                                width: false
                            };
                            if (val === ".srchBtn i" || val === ".btnOpnComnSrch" || val === ".btnCloseComnSrch") {
                                opt = {
                                    width: false,
                                    size: true,
                                    spacing: false,
                                    transform: false,
                                    family: false,
                                    weight: false,
                                    color: true,
                                    style: false
                                };
                                if (val === ".srchBtn i")
                                    opt.color = false;
                            }
                            init(val, opt);
                        });
                        function init(target, opt) {
                            $stCont.AdvanceTextSetting({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: opt
                            });
                        }
                    },
                    'active': function () {
                        var $stSlc = $('#divDynTxtStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                'Alignment': {
                    'custom': true,
                    'DOM': '<div id="divDynAlignStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynAlignStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.find('option').not('.sz').remove();
                        $stSlc.find('.nAl').remove();
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceAlignment({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"]
                                }
                            });
                        }
                    },
                    'active': function () {
                        var $stSlc = $('#divDynAlignStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                'Size': {
                    'custom': true,
                    'DOM': EasyLibrary.ReadDOM("commonsearch/search/sizeSettings", false),
                    'onload': function () {
                        var $mainCont = $('#divDynSizeStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.find('option').not('.sz').remove();
                        var typ = $activeDOM.attr('data-formtype');
                        if (typ === "topfixed" || typ === "fullpage") {
                            $stSlc.find('.fm').remove();
                        }
                        var alfa = DeviceAlpha();
                        $stSlc.off().on('change', function () {
                            typ = $activeDOM.attr('data-formtype');
                            $('#divDynHeightSt').hide();
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                if (val === ".rslt")
                                    val += "-wrp";
                                target = $activeDOM.find(val);
                                if (val === ".rsImg") {
                                    $('#divDynHeightStWrp').removeClass('Dn');
                                    initHeight(target);
                                }
                                target.addClass('actEle');
                            }
                            else {
                                $activeDOM.addClass("actEle");
                            }
                            var wTyp = 'sfwidth';
                            var max = 100;
                            if ((typ === "Ldropdown" || typ === "Rdropdown") && val === ".srch-cont") {
                                wTyp = 'width';
                                ReplaceClassByPattern(target, 'sfCol_[0-9]{1,3}', '');
                            } else if (val === ".srch-cont") {
                                ReplaceClassByPattern(target, 'W-[0-9]{1,3}', '');
                            } else if (val === ".btnOpnComnSrch") {
                                wTyp = 'width';
                                initHeight(target);
                            }
                            if (wTyp === 'width') {
                                if (alfa === 'm')
                                    max = 320;
                                else if (alfa === 't')
                                    max = 768;
                                else
                                    max = 1080;
                            }
                            init(target, wTyp, max);
                        });
                        function init(target, type, max) {
                            $stCont.AdvanceDimension({
                                targetParent: $activeDOM,
                                targetElem: target,
                                type: type,
                                max: max,
                                callback: function () {
                                    if (typ === "Ldropdown" || typ === "Rdropdown")
                                        calcPos()
                                }
                            });
                        }
                        function initHeight(target) {

                            $('#divDynHeightSt').show().AdvanceDimension({
                                targetParent: $activeDOM,
                                targetElem: target,
                                type: 'height',
                                label: 'height'
                            });
                        }
                        var $cont = $activeDOM.find('.srch-cont');
                        var $opnBtn = $activeDOM.find('.btnOpnComnSrch');
                        function calcPos() {

                            var left = $opnBtn.offset().left - $activeDOM.offset().left;
                            if (typ === "Ldropdown")
                                left = left + $opnBtn.outerWidth() - $cont.outerWidth();
                            $cont.css('left', left + "px");
                        }
                    },
                    'active': function () {
                        var $stSlc = $('#divDynSizeStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                'Sort': {
                    'custom': true,
                    'DOM': EasyLibrary.ReadDOM("commonsearch/search/sorting", false),
                    'onload': function () {
                        var typ = $activeDOM.attr('data-formtype');
                        if (typ === "topfixed") {
                            $("#divSortSearchItems").html('');
                            var html = $('#hdnDivSortEle').html();
                            $activeDOM.find(".srch-wrp .ele").each(function () {
                                var $html = $(html);
                                $html.find('label').text($(this).attr('data-title'));
                                $("#divSortSearchItems").append($html);
                            });
                            $("#divSortSearchItems").AdvanceSorting({
                                targetParent: $activeDOM.find(".srch-wrp"), //view
                                targetElem: '.ele', //view
                                sortableOptions: {
                                    items: "> div.stElWrap", //editor
                                    handle: ".accorSort", //editor
                                    containment: '#divSortSearchItems' //editor
                                }
                            });
                        } else {
                            $('#tabHeadWrap li[data-tabs="tab6"]').hide();
                        }
                    }
                }
            }
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": '<div id="divDynBgStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynBgStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBackground({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: ["color"]
                            });
                        }
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBgStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": `<div id="divDynBrdrStDOM"></div>
                             <div class="field-row stElWrap col50-50" id="lstItmBdr" style="">
                            <label class="fCol">Disable on Last Item</label>
                            <div class="fCol TxAl-r"><span class="toggle_btn">
                            <input type="checkbox"   name="tglBtnBdr">
                            <label for="tglBtnBdr" class="tgl_slider"></label>
                            </span></div></div>
                    `,
                    'onload': function () {
                        var $mainCont = $('#divDynBrdrStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');

                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            if (target === '.dynItem') {
                                if ($('input[name="tglBtnBdr"]').prop('checked'))
                                    target = $activeDOM.find(target).not($activeDOM.find('.dynItem').last());
                                $('#lstItmBdr').show();
                            } else {
                                $('#lstItmBdr').hide();
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBorder({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"]
                                }
                            });
                        }
                        function eventLastItemBorder() {
                            $('input[name="tglBtnBdr"]').on('change', function () {
                                $stSlc.trigger('change');
                                if ($(this).prop("checked")) {
                                    $activeDOM.find('.dynItem').last().css('border', 'none');
                                    $activeDOM.attr('data-borderlast-none', "true");
                                } else {
                                    $activeDOM.attr('data-borderlast-none', "false");
                                    $activeDOM.find('.dynItem').attr('style', $activeDOM.find('.dynItem').first().attr('style'));
                                }
                            });
                            $('input[name="tglBtnBdr"]').attr('checked', $activeDOM.attr('data-borderlast-none') === "true");
                        }
                        eventLastItemBorder();
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBrdrStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": '<div id="divDynBxRdsStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynBxRdsStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');

                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBoxRadius({
                                targetParent: $activeDOM,
                                targetElem: target,
                                "options": {
                                    "max": 200,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });
                        }
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBxRdsStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": '<div id="divDynBxShdStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynBxShdStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');

                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBoxShadow({
                                targetParent: $activeDOM,
                                targetElem: target
                            });
                        }
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBxShdStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": '<div id="divDynHvrEffStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynHvrEffStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions());
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.find('option').not('.hvr').remove();
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "color": ["background", "text"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        }
                    },
                    'active': function () {
                        var $stSlc = $('#divDynHvrEffStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                }
            },
            "selectLayer": function ($elem) {
                var $parent = $elem.closest(".news-list");
                return $parent;
            }
        },
        "responsiveDOMs": {
            "tabs": {}
        },
        "complete": function () {
            var thsComp = this;
            for (var p in thsComp.settingDOMs.tabs) {
                if (p !== "Sort")
                    thsComp.responsiveDOMs.tabs[p] = thsComp.settingDOMs.tabs[p];
            }
        },
        "remove": function ($cloneDOM) {
            this.view.view();
            $cloneDOM.find('.btnCloseComnSrch').trigger('click');
        },
        "removeedit": function ($editDOM) {
            $editDOM.find('.btnCloseComnSrch').trigger('click');
        },
        "binddata": function ($parent, response) {

        },
        "binddataerror": function ($parent, response) {
            console.log(response);
        },
        "view": {
            view: function () {

                this.evntListener();
            },
            stringToSlug: function (v) {
                return v.toLowerCase().trim()
                    .replace(/\s+/g, '-')
                    .replace(/&/g, '-and-')
                    .replace(/([~!@#$%^&*()_+=`{}\[\]\|\\:;'‘’<>,.\/? ])+/g, '-')
                    .replace(/\-\-+/g, '-');
            },
            search: function (val, detailpage) {
                if (detailpage == undefined || detailpage == '') {
                    return false;
                }
                var url = WbHostURL + '/' + detailpage+'/keyword/' + this.stringToSlug(val);
                if (!EditorMode) {
                    window.location = url;
                } else {
                    SageConfirmDialog('Are you sure you want to switch to "search result" page? All your unsaved data will be lost.').done(function () {
                        window.location = url;
                    });
                }
            },
            evntListener: function () {
                var ths = this;
                $('.btnCommonSrch').off('click').on('click', function () {
                    var $pr = $(this).closest('.editor-component');
                    var $inp = $pr.find('.txtCommonSrch');
                    var val = $inp.val();
                    var typ = $pr.attr('data-formtype');
                    
                    var detailpage = $pr.attr("data-page");
                    if (val !== '' && typ !== 'leftpush') {
                        ths.search(val, detailpage);
                    } else if ($pr.hasClass('fBoxOpen') && val !== '') {
                        ths.search(val, detailpage);
                    } else if (typ === 'leftpush') {
                        if ($pr.hasClass('fBoxOpen') && val === '') {
                            $pr.find('.txtCommonSrch').hide("slide", { direction: "right" }, 0);
                            $pr.removeClass('fBoxOpen');
                        } else {
                            $pr.addClass('fBoxOpen');
                            $pr.find('.txtCommonSrch').show("slide", { direction: "right" }, 0);
                        }
                    }
                });
                $('.txtCommonSrch').off('keyup').on('keyup', function (e) {

                    if (e.keyCode === 13 && $(this).val() !== '') {
                        $(this).closest('.editor-component').find('.btnCommonSrch').trigger('click');
                    }
                });
                $('.btnOpnComnSrch').off('click').on('click', function () {

                    var $pr = $(this).closest('.editor-component');
                    if ($pr.hasClass('fOpen')) {
                        $('.btnCloseComnSrch').trigger('click');
                    }
                    else {
                        $pr.find('.btnOpnComnSrch').addClass('fa-close').removeClass('fa-search');
                        ths.formTypes($pr);
                    }
                });
                $('.btnCloseComnSrch').off('click').on('click', function () {
                    var $pr = $(this).closest('.editor-component');
                    if ($pr.hasClass('fOpen')) {
                        $(this).hide();
                        var typ = $pr.attr('data-formtype');
                        if (typ !== 'normal' && typ !== 'leftpush') {
                            $pr.find('.srch-cont').hide();
                            $pr.find('.btnOpnComnSrch').removeClass('fa-close').addClass('fa-search').show();
                        }
                        ths.clearAll($pr);
                    }
                });
                if (!EditorMode) {
                    $('body').on('click', function (e) {
                        var $tar = $(e.target);
                        if ($tar.parents('.srch-cont').length === 0 && !$tar.hasClass('btnOpnComnSrch'))
                            $('.btnCloseComnSrch').trigger('click');
                    });
                }
            },
            clearAll: function ($pr) {
                $pr.css({ 'top': '', 'left': '', 'bottom': '', 'height': '', 'z-index': '' });
                $cont = $pr.find('.srch-cont');
                $cont.css({ 'top': '', 'left': '', 'height': '' }).removeClass('PosA zi-9');
                if ($pr.hasClass("PosF")) {
                    $pr.removeClass(ViewDeviceAlpha() + 'sfCol_100');
                    $pr.addClass($pr.attr('data-prev-state'));
                }
                var cls = ['zi-9', 'fOpen', 'PosF', 'PosA', 'Mclr', 'Pclr'];
                cls.forEach(function (v, i) {
                    $pr.removeClass(v);
                });
                $pr.find('.btnCloseComnSrch').hide();
                $pr.show();
            },
            makeFixed: function ($pr, top, left, bottom, height) {
                var alFa = ViewDeviceAlpha();
                $pr.hide();
                var reg = new RegExp('\\bs' + alFa + 'fCol_[0-9]{1,3}\\b', 'g');
                var prevCls = $pr.attr('class').match(reg);
                if (prevCls !== null) {
                    prevCls.forEach(function (v, i) {
                        $pr.removeClass(v);
                    });
                    $pr.attr('data-prev-state', prevCls.join(' '));
                } else {
                    $pr.attr('data-prev-state', '');
                }
                $pr.addClass('PosF Mclr Pclr').removeClass('PosR').addClass(alFa + 'sfCol_100');
                $pr.find('.srch-cont').show().css('height', height);
                $pr.css({ 'top': top, 'left': left, 'bottom': bottom, 'height': height, 'z-index': '9991' });
                $pr.find('.btnCloseComnSrch').show();
                $pr.find('.btnOpnComnSrch').hide();
                $pr.show(300);
                if (EditorMode)
                    $pr.find('.com-settings').trigger('click');
            },
            makeDropDown: function ($pr, type) {
                this.clearAll($pr);
                var $cont = $pr.find('.srch-cont');
                var $opn = $pr.find('.btnOpnComnSrch');
                $cont.addClass('PosA zi-9').show(200);
                $pr.addClass("PosR").removeClass("PosF");
                var ofst = $opn.offset();
                $cont.css('top', (ofst.top - $pr.offset().top) + $opn.outerHeight() + 5);
                var left = ofst.left - $pr.offset().left;
                if (type === "L")
                    left = left + $opn.outerWidth() - $cont.outerWidth();
                $cont.css('left', left + "px");
            },
            formTypes: function ($pr) {
                var ths = this;
                $pr.addClass('fOpen');
                switch ($pr.attr('data-formtype')) {
                    case 'Ldropdown':
                        ths.makeDropDown($pr, "L");
                        break;
                    case 'Rdropdown':
                        ths.makeDropDown($pr, "R");
                        break;
                    case 'fullpage':
                        ths.makeFixed($pr, '0', '0', '', '100vh');
                        break;
                    case 'topfixed':
                        ths.makeFixed($pr, '0', '0', '', '');
                        break;
                }
                $pr.addClass('fOpen');
            }
        }
    }
,    "search result": {
        "componentname": "search result",
        "category": "advance",
        "icon": "fa fa-list",
        "row": false,
        "hidden": false,
        "collection": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("commonsearch/result/viewdom", false),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped) {
                if ($('.editor-component.srch-rslt').length > 1) {
                    SageAlertDialog("You can drop only one search result component", "Warining");
                    $appendLayer.remove();
                } else {
                    this.view.getData($appendLayer);
                }
            }
        },
        "getSettingsOptions": EasyLibrary.ReadDOM("commonsearch/result/commonoptions", false),
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('commonsearch/result/basic', false),
                    "onload": function ($item) {
                        var $pr = $activeDOM;
                        var thsComp = component[$pr.attr('data-type')];
                        function NoOfItemHandler(space) {
                            $pr.attr("data-limit", space);
                            thsComp.createTemplate($pr);
                            thsComp.view.getData($pr);
                        }
                        AdvanceSageSlider($('#divNsItmSlide'), $('#divNsItmSlideHandler'), 1, 30, $pr.attr('data-limit'), NoOfItemHandler, $pr, '');
                        var chkDOM = $('#hdnChkStDOM').html();
                        $pr.find('.rslt-wrp').eq(0).find('.ele').each(function (i, v) {
                            var $chk = $(chkDOM);
                            var $ths = $(this);
                            var id = "chkEnDn" + i;
                            var tar = '.ele[data-title="' + $ths.attr('data-title') + '"]';
                            $chk.find('.tgl_slider').attr('for', id);
                            $chk.find('.fLbl').text($ths.attr('data-title'));
                            $chk.find('input').attr('id',id).attr('data-target', tar).prop('checked', $ths.is(':visible'));
                            $('#divStEnDnEle').append($chk);
                        });
                        var alFa = DeviceAlpha();
                        $('.chkEnDnDevEle').off('change').on('change', function () {
                            var $ths = $(this);
                            var $tar = $pr.find($ths.attr('data-target'));
                            if ($ths.prop('checked')) {
                                $tar.removeClass(alFa + "Dn");
                            }
                            else {
                                $tar.addClass(alFa + "Dn");
                            }
                        });
                    },
                    'active': function () {
                    }
                },
                'Spacing': {
                    'custom': true,
                    'DOM': '<div id="divDynSpcStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynSpcStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceSpacing({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    }
                                }
                            });

                        };

                    },
                    'active': function () {
                        var $stSlc = $('#divDynSpcStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                'Text': {
                    'custom': true,
                    'DOM': '<div id="divDynTxtStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynTxtStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.find('option').not('.tx').remove();
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $activeDOM.find(val).addClass('actEle');
                            init(val);
                        });
                        function init(target) {
                            $stCont.AdvanceTextSetting({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    width: false,
                                }
                            });
                        };
                    },
                    'active': function () {
                        var $stSlc = $('#divDynTxtStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                'Alignment': {
                    'custom': true,
                    'DOM': '<div id="divDynAlignStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynAlignStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.find('option').not('.sz').remove();
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceAlignment({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"]
                                }
                            });
                        };
                    },
                    'active': function () {
                        var $stSlc = $('#divDynAlignStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                'Size': {
                    'custom': true,
                    'DOM': EasyLibrary.ReadDOM("commonsearch/result/sizeSettings", false),
                    'onload': function () {
                        var $mainCont = $('#divDynSizeStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.find('option').not('.sz').remove();
                        $stSlc.off().on('change', function () {
                            $('#divDynHeightStWrp').addClass('Dn');
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                if (val === ".rslt")
                                    val += "-wrp";
                                target = $activeDOM.find(val);
                                if (val === ".rsImg") {
                                    $('#divDynHeightStWrp').removeClass('Dn');
                                    initHeight(target);
                                }
                                target.addClass('actEle');
                            }
                            else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceWidthSlider({
                                targetParent: $activeDOM,
                                targetElem: target
                            });
                        };
                        function initHeight(targets) {
                            $('#divDynHeightStWrp').removeClass('Dn');
                            $('#divDynHeightSt').AdvanceDimension({
                                targetParent: $activeDOM,
                                targetElem: targets,
                                label: 'Image Height',
                                type: 'height',
                                defaultValue: targets.eq(0).height(),
                            });
                            $('#btnRefreshImageWidth').off().on('click', function () {
                                ReplaceClassByPattern(targets, 'H-[0-9]{1,4}', '');
                                setTimeout(function () {
                                    ChangeSliderValue($('#divDynHeightSt .ui-slider'), targets.eq(0).height());
                                }, 100);
                            });
                            $('#chkImgFittoCover').off().on('click', function () {
                                if ($(this).prop('checked'))
                                    targets.parent().addClass('fit-image');
                                else
                                    targets.parent().removeClass('fit-image');
                            });
                            $('#chkImgFittoCover').prop('checked', targets.eq(0).parent().hasClass('fit-image'));
                        }

                    },
                    'active': function () {
                        var $stSlc = $('#divDynSizeStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "DOM": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('commonsearch/result/advance', false),
                    "onload": function ($item) {
                        var $parent = $activeDOM;
                        function manageElementOrder() {
                            var newsItem = $parent.find('.rslt-wrp').eq(0);
                            newsItem.find('.ele').each(function () {
                                var thisEle = $(this);
                                var html = '<span class="st-com-element cb-stdrg" data-tarele=".ele[data-title=' + thisEle.attr('data-title') + ']"><span>' + thisEle.attr('data-title') + '</span><span class="mv-ctl"><i data-up="true" title="Move up" class="btnSrtProductEle fa fa-angle-up"></i><i data-up="false" title="Move down" class="btnSrtProductEle fa fa-angle-down"></i></span></span>';
                                if (thisEle.parent().hasClass('cont-1')) {
                                    $('#divContainer1').append(html);
                                } else
                                    $('#divContainer2').append(html);

                            });
                            $(".st-com-element").draggable({
                                helper: "clone",
                                revert: false,
                                cursor: 'pointer',
                                connectWith: '.targetContainer',
                                containment: '.manage-content',
                                start: function (event, ui) {

                                }
                            });
                            $('.targetContainer').droppable({
                                accept: ".st-com-element",
                                greedy: true,
                                hoverClass: "ui-state-row-hover ui-hover-state",
                                drop: function (event, ui) {
                                    var $this = $(this);
                                    var item = $(ui.draggable);
                                    $this.append(item);
                                    var tarCont = $this.attr('data-tarcontain');
                                    $parent.find(item.attr('data-tarele')).each(function () {
                                        $(this).parent().parent().find(tarCont).append($(this));
                                    });
                                    $parent.find('.st-cont').each(function () {
                                        if ($(this).find('.com-ele').length === 1) {
                                            $(this).find('.com-ele .srt.ele').addClass('hide');
                                        } else {
                                            $(this).find('.com-ele .srt-ele').removeClass('hide');
                                        }
                                    });
                                }
                            });
                            $('.btnSrtProductEle').off('click').on('click', function () {
                                var $this = $(this);
                                var isUp = $this.attr('data-up') === 'true' ? true : false;
                                var ldom = $this.closest('.targetContainer').find('.st-com-element');
                                var wrpEle = $this.closest('.st-com-element');
                                var dIndex = ldom.index(wrpEle);
                                sortElement(isUp, dIndex, ldom);
                                $parent.find(wrpEle.attr('data-tarele')).each(function () {
                                    var oDom = $(this).parent().children();
                                    sortElement(isUp, dIndex, oDom);
                                });
                            });
                            function sortElement(isUp, dIndex, oDom) {
                                if (isUp && dIndex > 0) {
                                    oDom[dIndex].parentNode.insertBefore(oDom[dIndex], oDom[dIndex - 1]);
                                } else if (!isUp && dIndex < oDom.length - 1) {
                                    oDom[dIndex].parentNode.insertBefore(oDom[dIndex + 1], oDom[dIndex]);
                                }
                            }
                        }
                        manageElementOrder();
                    }
                }

            }
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": '<div id="divDynBgStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynBgStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');
                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBackground({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: ["color"]
                            });
                        };
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBgStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": `<div id="divDynBrdrStDOM"></div>
                             <div class="field-row stElWrap col50-50" id="lstItmBdr" style="">
                            <label class="fCol">Disable on Last Item</label>
                            <div class="fCol TxAl-r"><span class="toggle_btn">
                            <input type="checkbox"   name="tglBtnBdr">
                            <label for="tglBtnBdr" class="tgl_slider"></label>
                            </span></div></div>
                    `,
                    'onload': function () {
                        var $mainCont = $('#divDynBrdrStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');

                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            if (target === '.dynItem') {
                                if ($('input[name="tglBtnBdr"]').prop('checked'))
                                    target = $activeDOM.find(target).not($activeDOM.find('.dynItem').last());
                                $('#lstItmBdr').show();
                            } else {
                                $('#lstItmBdr').hide();
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBorder({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });
                        };
                        function eventLastItemBorder() {
                            $('input[name="tglBtnBdr"]').on('change', function () {
                                $stSlc.trigger('change');
                                if ($(this).prop("checked")) {
                                    $activeDOM.find('.dynItem').last().css('border', 'none');
                                    $activeDOM.attr('data-borderlast-none', "true");
                                } else {
                                    $activeDOM.attr('data-borderlast-none', "false");
                                    $activeDOM.find('.dynItem').attr('style', $activeDOM.find('.dynItem').first().attr('style'));
                                }
                            });
                            $('input[name="tglBtnBdr"]').attr('checked', $activeDOM.attr('data-borderlast-none') === "true");
                        }
                        eventLastItemBorder();
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBrdrStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": '<div id="divDynBxRdsStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynBxRdsStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');

                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBoxRadius({
                                targetParent: $activeDOM,
                                targetElem: target,
                                "options": {
                                    "max": 200,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });
                        };
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBxRdsStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": '<div id="divDynBxShdStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynBxShdStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');

                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceBoxShadow({
                                targetParent: $activeDOM,
                                targetElem: target
                            });
                        };
                    },
                    'active': function () {
                        var $stSlc = $('#divDynBxShdStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": '<div id="divDynHvrEffStDOM"></div>',
                    'onload': function () {
                        var $mainCont = $('#divDynHvrEffStDOM');
                        $mainCont.html(component[$activeDOM.attr('data-type')].getSettingsOptions);
                        var $stSlc = $mainCont.find('.slcDynSettingAplyOn');
                        var $stCont = $mainCont.find('.dynStngContainer');

                        $stSlc.off().on('change', function () {
                            var val = $(this).val();
                            var target = $activeDOM;
                            $('.actEle').removeClass('actEle');
                            if (val !== "") {
                                target = val;
                                $activeDOM.find(target).addClass('actEle');
                            } else {
                                $activeDOM.addClass("actEle");
                            }
                            init(target);
                        });
                        function init(target) {
                            $stCont.AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "color": ["background", "text"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        };
                    },
                    'active': function () {
                        var $stSlc = $('#divDynHvrEffStDOM').find('.slcDynSettingAplyOn');
                        $stSlc.val($('.slcDynSettingAplyOn.active').val()).trigger('change');
                        $('.slcDynSettingAplyOn.active').removeClass('active');
                        $stSlc.addClass('active');
                    }
                },
            },
            "selectLayer": function ($elem) {
                var $parent = $elem.closest(".news-list");
                return $parent;
            }
        },
        "responsiveDOMs": {
            "tabs": {}
        },
        "complete": function () {
            var thsComp = this;
            for (var p in thsComp.settingDOMs.tabs) {
                if ( p !== "DOM")
                    thsComp.responsiveDOMs.tabs[p] = thsComp.settingDOMs.tabs[p];
            }            
        },
        "remove": function ($cloneDOM) {
            let ths = this;
            $('.editor-component.srch-rslt').each(function () {
                ths.createTemplate($(this));
            });
            $cloneDOM.find('.editor-component.srch-rslt').each(function () {
                let $pr = $(this);
                var compName = $pr.attr('data-type');
                let sparam = $pr.attr("data-limit") + ",%SiteID%";
                ths.apiInvoker(compName, "Search", "1", sparam, EasyLibrary.GetComponenetID($pr), "URL");
            });
        },
        "apiInvoker": function (comName, methodName, params, sParams, componentId, type) {
            var apiCtrl = new APIController();
            apiCtrl.ComponentName = comName;
            apiCtrl.NameSpace = "Cbuilder.CommonSearch";
            apiCtrl.ClassNames = "SearchController";
            apiCtrl.MethodNames = methodName;
            apiCtrl.Parameters = params;
            if (sParams !== "")
                apiCtrl.StaticParameters = sParams;
            apiCtrl.ComponentID = componentId;
            apiCtrl.Type = type;
            EasyLibrary.SetAPI(apiCtrl);
        },
        "createTemplate": function ($pr) {
            if ($pr.find('.rslt-wrp').length > 0) {
                var $temp = $pr.find('.compTemplate');
                $temp.html($pr.find('.rslt-wrp')[0].outerHTML);
                $temp.find('.rsTit,.rsDesc').text('');
                $temp.text($temp.html());
                if ($pr.closest('#WebBuilderWrapperClone').length > 0) {
                    $pr.find('.resultItems').empty();
                    $pr.addClass('Dn tDn mDn');
                }
            }
        },
        "removeedit": function ($editDOM) {
            $editDOM.find('.btnLoadMore.btnRslt').addClass("Dn tDn mDn");
        },

        "binddata": function ($parent, response) {
            try {
                if (!EditorMode) {
                    $parent.attr('data-total', response.TotalResult);
                    this.view.bindData($parent, response);
                }
            } catch (err) {
                console.error(err.message);
            }
        },
        "binddataerror": function ($parent, response) {
            console.log(response);
        },
        "view": {
            view: function () {
                var ths = this;
                $('.btnLoadMore.btnRslt').off('click').on('click', function () {
                    var $pr = $(this).closest('.editor-component');
                    $pr.attr('data-append', true);
                    var newOffset = parseInt($pr.attr('data-offset')) + parseInt($pr.attr('data-limit'));
                    $pr.attr('data-offset', newOffset);
                    ths.getData($pr);
                });
            },
            evtLst: function ($pr) {
                $('.viewMoreDevices').off('click').on('click', function () {
                    var $ths = $(this);
                    var url = WbHostURL + '/' + $pr.attr('data-detailspage') + '/device/' + $ths.attr('data-devtype') + "/category/" + $ths.attr('data-catid') + "/capacity/all/warranty/all";
                    if (EditorMode) {
                        SageConfirmDialog("Are you sure you want to switch to another page? All your unsaved data maybe lost.").done(function () {
                            ReloadPageNone();
                            window.location = url;
                        });
                    } else {
                        window.location = url;
                    }
                });
            },
            getData: function ($pr) {
                var ths = this;
                var config = {
                    data: {
                        siteID: GetSiteID,
                        offset: $pr.attr("data-offset"),
                        limit: $pr.attr("data-limit"),
                        keywords: 'lorem',
                        mode: EditorMode,
                    },
                    method: "SearchMoreResult",
                    dataType: "json",
                    url: '/Modules/CommonSearch/CommonSearchService.asmx',
                    ajaxSuccess: function (data) {
                         data = data.d;
                        if (data.TotalResult === 0)
                            data.TotalResult = $pr.attr('data-total');
                        ths.bindData($pr, data);
                    },
                    ajaxFailure: function () {
                        alert("Server Error.", "Error");
                    }
                };
                CommonLibrary.AjaxCall(config);
            },

            bindData: function ($pr, data) {
                var total = data.TotalResult;
                $pr.find('.rsHdng').text(total + ' Result Found');
                if (total > 0) {
                    var html = $pr.find('.compTemplate').text();
                    var allItems = '';
                    $.each(data.Result, function (i, v) {
                        $html = $(html);
                       
                        v.ImagePath = v.ImagePath.replace('/MediaThumb/large', '').replace('/MediaThumb/medium', '').replace('/MediaThumb/orginal', '');
                        $html.find('.rsImg').attr('src', v.ImagePath);
                        v.URL = EditorMode ? 'javascript:void(0);' : v.URL;
                        $html.find('.rsTit').text(v.Title).attr('href', v.URL);
                        $html.find('.rsDesc').html(v.Description);
                        $html.find('.rsTypeV').text(v.Applications);
                        $html.find('.rsImg-wrp').attr('href', v.URL);
                        allItems += $html[0].outerHTML;
                    });
                    if ($pr.attr('data-append') === 'true')
                        $pr.find('.resultItems').append(allItems);
                    else
                        $pr.find('.resultItems').html(allItems);
                    this.evtLst($pr);
                } else {
                    $pr.find('.resultItems').html(`<p style="padding:15px 0;text-align: center;width: 100%;font-family: 'Open Sans', sans-serif !important;text-transform: uppercase;color: red;font-weight: 600;"><i class="fa fa-exclamation-triangle" style=" margin-right: 10px;display: block;margin-bottom: 15px;font-size: 45px;"></i>Sorry content you are searching not found!</p>`)
                }
                if (EditorMode || total > parseInt($pr.attr("data-limit")) + parseInt($pr.attr("data-offset"))) {
                    $pr.find('.btnLoadMore').removeClass("Dn tDn mDn");

                } else {
                    $pr.find('.btnLoadMore').addClass("Dn tDn mDn");
                }
                $pr.removeClass('Dn tDn mDn');
            }
        }
    }
,    "contact us": {
        "componentname": "contact us",
        "category": "advance",
        "icon": "fa fa-envelope-o",
        "row": false,
        "hidden": true,
        "collection": false,
        "bucket": true,
        "type": "form",
        "defaultdata": EasyLibrary.ReadDOM("contactus"),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {

        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if ($('.site-body').find('.editor-component.contactus').length > 1) {
                $appendLayer.remove();
                SageAlertDialog('You cannot add two contact us component in same page');
            }
            if (dropped)
                this.view.view();
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("contactusbasic"),
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        InitEvent();
                        function InitEvent() {
                            LoadSettings();
                            Events();
                        }
                        function LoadSettings() {
                            let contactuslink = SageFrameHostURL + '/dashboard/manage-contact-us';
                            $('#contactuslink').attr('href', contactuslink);
                            let layout = $parent.attr('data-layout');
                            $("#slcCULayout").val(layout);
                        }
                        function Events() {
                            $(".asterisk").on("click", function () {
                                let isChecked = false;
                                if ($(this).hasClass('required')) {
                                    $(this).css('color', 'white');
                                    $(this).removeClass('required');
                                    isChecked = false;
                                } else {
                                    $(this).css('color', 'red');
                                    $(this).addClass('required');
                                    isChecked = true;
                                }
                                let className = $(this).closest('.cuField').find('input[type="checkbox"]').attr('data-class');
                                if (isChecked) {
                                    $("." + className).find('.contacttextBox').addClass('required');
                                    $("." + className).find('.reqstar').html('*');
                                } else {
                                    $("." + className).find('.contacttextBox').removeClass('required');
                                    $("." + className).find('.reqstar').html('');
                                }
                            });
                            $("#slcCULayout").on("change", function () {
                                let layout = $(this).val();
                                $parent.removeClass('Msnry1Col-l Msnry1Col-r Msnry1Col-c Msnry2Col-l Msnry2Col-r Msnry2Col-c');
                                $parent.addClass(layout);
                                $parent.attr('data-layout', layout);
                            });
                        }
                    }
                },
                "Heading": {
                    "DOM": EasyLibrary.ReadDOM("contactusheadingtab"),
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        $("#headingtext").AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: '.cuHeading'
                        });
                        ManualEntryEvents();
                        function ManualEntryEvents() {
                            $(".cuChangeText").on("keyup", function () {
                                let value = $(this).val().trim();
                                //if (value == "") {
                                //    SageAlertDialog("Required Field", 'Please enter some text');
                                //} else {
                                let className = $(this).attr('data-class');
                                //alert(className);
                                //console.log($parent);
                                //$parent.find("." + className).text(value);
                                //$parent.text(value);
                                //}
                                $("." + className).text(value);
                            });
                            $(".cuCheckbox").on("change", function () {
                                let className = $(this).attr('data-class');
                                let isChecked = $(this).prop("checked");
                                if (isChecked) {
                                    if (className == 'cuHeading') {
                                        $('.contactHeadingSetting').show(400);
                                    }
                                    $("." + className).show(400);
                                } else {
                                    $("." + className).hide(400);
                                    if (className == 'cuHeading') {
                                        $('.contactHeadingSetting').hide(400);
                                    }
                                }
                            });

                            $(".cuChangeText").each(function (index, item) {
                                let className = $(this).attr('data-class');
                                let text = '';
                                text = $("." + className).html();
                                let isVisible = $("." + className).is(":visible");
                                let $fld = $(this).closest('.cuField');
                                if (isVisible) {
                                    $fld.find(".cuCheckbox").prop("checked", true);
                                    //$('.contactHeadingSetting').show(400);
                                } else {
                                    $fld.find(".cuCheckbox").prop("checked", false);
                                    //$('.contactHeadingSetting').hide();
                                }
                                let $ele = $("." + className).parent().find('.contacttextBox');
                                if ($ele.hasClass('required')) {
                                    $fld.find(".asterisk").addClass("required").css('color', 'red');
                                } else {
                                    $fld.find(".asterisk").removeClass("required").css('color', 'white');
                                }
                                $(this).val('');
                                $(this).val(text);
                            });
                            let isVisible = $(".cuHeading").is(":visible");
                            if (isVisible) {
                                $("#chkcuHeading").prop("checked", true);
                                //$('.contactHeadingSetting').show(400);
                            } else {
                                $("#chkcuHeading").prop("checked", false);
                                //$('.contactHeadingSetting').hide();
                            }
                        }
                    }
                },
                "Labels": {
                    "DOM": "<div id='contactlabelchange'></div>",
                    "onload": function ($item) {

                        $("#contactlabelchange").AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: '.cuLabel'
                        });
                    }
                },
                "Text Box": {
                    "DOM": "<div id='contacttextboxchange'></div><div id='textboxbg'></div> <div id='accorBorderSet'></div>",
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        $("#contacttextboxchange").AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: '.contacttextBox '
                        });

                        $("#textboxbg").AdvanceBackground({
                            targetParent: $parent,
                            targetElem: '.contacttextBox',
                            options: ["color"]
                        });
                        $('#accorBorderSet').AdvanceBorder({
                            targetParent: $parent,
                            targetElem: '.contacttextBox',
                            options: {
                                "max": 20,
                                "min": 0,
                                "times": 1,
                                "position": ["all", "top", "right", "bottom", "left"],
                            }
                        });
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $elem.closest('.SetHdlr').parent();
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["color"],
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $elem.closest('.SetHdlr').parent();
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "itemsperrow": {
                            "DOM": `
                                <div class="field-row stElWrap col50-50">
                                    <label class="fCol">Layout</label>
                                    <div class="fCol TxAl-r">
                                        <span class="select__box">
                                             ${SelectDOMCreate('slcCULayout', 'slcCULayout', [
                                                            ['Msnry1Col-l', '1 Col-Left'],
                                                            ['Msnry1Col-r', '1 Col-Right'],
                                                            ['Msnry1Col-c', '1 Col-Center'],
                                                            ['Msnry2Col-l', '2 Col-Left'],
                                                            ['Msnry2Col-r', '2 Col-Right'],
                                                            ['Msnry2Col-c', '2 Col-Center'],
                            ])}
                                        </span>
                                    </div>
                                </div>`,
                            "prepend": "true",
                            "onload": function () {
                                let classname = GetValueByClassName($activeDOM, 'Msnry([0-5])Col-[a-z]', '');
                                $("#slcCULayout").val(classname);
                                $("#slcCULayout").on("change", function () {
                                    let layout = $(this).val();
                                    ReplaceClassByPattern($activeDOM, 'Msnry([0-5])Col-[a-z]', layout);
                                    let classname = GetValueByClassName($activeDOM, 'Msnry([0-5])Col-[a-z]', '');
                                });
                            }
                        },
                        "Visibility": {}
                    }
                },

                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "left", "right"]
                        }
                    }
                },
                "Misc": {
                    "DOM": `<div class="field-row stElWrap">
                        <label class ="fCol">Heading</label>
                        </div>
                        <div id='conHeadSet'></div>
                        <div class ="field-row stElWrap">
                        <label class ="fCol">Label</label>
                        </div>
                        <div id='conLblSet'></div>
                        <div class ="field-row stElWrap">
                        <label class ="fCol">Text Box</label>
                        </div>
                        <div id='conFldSet'></div>`,
                    "onload": function () {
                        $('#conHeadSet').AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: '.cuHeading',
                            options: {
                                size: true,
                                lineheight: true,
                                width: false,
                                spacing: false,
                                transform: false,
                                family: false,
                                weight: false,
                                color: false
                            }
                        });
                        $('#conLblSet').AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: '.cuLabel',
                            options: {
                                size: true,
                                lineheight: true,
                                width: false,
                                spacing: false,
                                transform: false,
                                family: false,
                                weight: false,
                                color: false
                            }
                        });
                        $('#conFldSet').AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: '.contacttextBox',
                            options: {
                                size: true,
                                lineheight: true,
                                width: false,
                                spacing: false,
                                transform: false,
                                family: false,
                                weight: false,
                                color: false
                            }
                        });
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "onsave": function () {

        },
        "remove": function ($view) {
            $view.find('.contacttextBox').val('');
        },
        "view": {
            "view": function () {
                $(function () {
                    function DrawCaptcha() {
                        let a = Math.ceil(Math.random() * 10) + '';
                        let b = Math.ceil(Math.random() * 10) + '';
                        let firstCode = a;
                        let secondCode = b;
                        $("#spnFirstCaptcha").html(firstCode);
                        $("#spnSecondCaptcha").html(secondCode);
                    }

                    // Validate the Entered input aganist the generated security code function
                    function ValidCaptcha() {
                        let firstCode = parseInt(removeSpaces($('#spnFirstCaptcha').html()));
                        let secondCode = parseInt(removeSpaces($('#spnSecondCaptcha').html()));
                        let str2 = removeSpaces($('#txtCapchaInput').val());
                        if ((firstCode + secondCode) == str2) return true;
                        return false;
                    }
                    // Remove the spaces from the entered and generated code
                    function removeSpaces(string) {
                        return string.split(' ').join('');
                    }
                    var $validatorcu = $("#form1").validate({
                        rules: {
                            firstName: {
                                maxlength: 50
                            },
                            lastName: {
                                maxlength: 50
                            },
                            email: {
                                email: true,
                                maxlength: 50
                            },
                            address: {
                                maxlength: 50
                            },
                            telephone: {
                                maxlength: 50
                            },
                            subject: {
                                maxlength: 50
                            },
                            message: {
                                maxlength: 1000
                            },
                            website: {
                                maxlength: 50
                            }
                        },
                        messages: {
                            firstName: {
                                required: "* Required Field"
                            },
                            lastName: {
                                required: "* Required Field"
                            },
                            message: {
                                required: "* Required Field"
                            },
                            email: {
                                required: "* Required Field",
                                email: "Please enter valid email"
                            },
                        },
                        ignore: ':hidden, :disabled'
                    });
                    $validatorcu = $(".contactus").validate({});
                    $(".btncuSave").off("click").on("click", function () {
                        if ($('.site-body').find('.editor-component.contactus > .SetHdlr').length == 0) {
                            if ($validatorcu.form()) {
                                if (ValidCaptcha()) {
                                    let $parent = $(this).parents(".cuWrapper");
                                    let firstName = $parent.find(".firstName").val();
                                    let lastName = $parent.find(".lastName").val();
                                    let email = $parent.find(".email").val();
                                    let message = $parent.find(".message").val();
                                    let telephone = $parent.find(".telephone").val();
                                    let subject = $parent.find(".subject").val();
                                    let address = $parent.find(".address").val();
                                    let website = $parent.find(".website").val();
                                    let objBuilComponent = {
                                        portalID: parseInt(SageFramePortalID),
                                        userName: SageFrameUserName,
                                        secureToken: SageFrameSecureToken
                                    };
                                    let objContactUs = {
                                        FirstName: firstName,
                                        LastName: lastName,
                                        Email: email,
                                        Message: message,
                                        Telephone: telephone,
                                        Subject: subject,
                                        Address: address,
                                        Website: website
                                    };
                                    $.ajax({
                                        isPostBack: false,
                                        async: false,
                                        cache: false,
                                        type: 'POST',
                                        contentType: "application/json; charset=utf-8",
                                        data: JSON2.stringify({
                                            objBuilComponent: objBuilComponent,
                                            objContactUs: objContactUs
                                        }),
                                        dataType: 'json',
                                        crossDomain: true,
                                        url: SageFrameHostURL + '/Builder/SaveContactUsData',
                                        success: function (data) {
                                            $('.conMessage').text("").removeClass("eb-block-error");//.addClass("eb-block-success");
                                            SageAlertDialog("Information Save Successfully", 'Success');
                                            ClearForm();
                                        },
                                        error: function () {
                                            $('.conMessage').text("Error Occured").removeClass("eb-block-success").addClass("eb-block-error");
                                        },
                                    });
                                } else {
                                    SageAlertDialog("Wrong Captcha", 'Alert');
                                    DrawCaptcha();
                                    $("#txtCapchaInput").val();
                                }
                            }
                        }
                    });
                    $(".btncuReset").off().on("click", function () {
                        ClearForm();
                    });

                    function ClearForm() {
                        let $parent = $(".contactFromWrap");
                        $parent.find(".firstName").val('');
                        $parent.find(".lastName").val('');
                        $parent.find(".email").val('');
                        $parent.find(".message").val('');
                        $parent.find(".telephone").val('');
                        $parent.find(".subject").val('');
                        $parent.find(".address").val('');
                        $parent.find(".website").val('');
                        $validatorcu.resetForm();
                        $("#txtCapchaInput").val('');
                        DrawCaptcha();
                    }
                    DrawCaptcha();
                });
            },
            "library": {

            }
        }
    }
,    "container": {
        "componentname": "container",
        "category": "advance",
        "icon": " icon icon-comp-row",
        "row": false,
        "hidden": false,
        "collection": false,
        "type": "Empty Row",
        "typeicon": "fa fa-th",
        "Screenshot": "https://blog.contentder.com/Modules/SmartBlog/SummaryIcon/medium/blog.png",
        "beforedrop": function ($appendedParent, $row, dropped) {
            var ColumnDOM = "";
            var col100 = DOMCreate('div', '100', 'sfCol_100 column');
            var col80 = DOMCreate('div', '80', 'sfCol_80 column');
            var col75 = DOMCreate('div', '75', 'sfCol_75 column');
            var col70 = DOMCreate('div', '70', 'sfCol_70 column');
            var col60 = DOMCreate('div', '60', 'sfCol_60 column');
            var col50 = DOMCreate('div', '50', 'sfCol_50 column');
            var col40 = DOMCreate('div', '40', 'sfCol_40 column');
            var col30 = DOMCreate('div', '30', 'sfCol_30 column');
            var col33 = DOMCreate('div', '33', 'sfCol_33 sfFixed column');
            var col25 = DOMCreate('div', '25', 'sfCol_25 column');
            var col20 = DOMCreate('div', '20', 'sfCol_20 column');
            ColumnDOM = '<ul class="selectDataWrapper selectcolumns sfCol_100">';
            ColumnDOM += DOMCreate('li', col100, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col80 + col20, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col75 + col25, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col70 + col30, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col60 + col40, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col50 + col50, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col40 + col60, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col30 + col70, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col25 + col75, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col20 + col80, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col20 + col60 + col20, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col25 + col50 + col25, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col30 + col40 + col30, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col33 + col33 + col33, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col25 + col25 + col25 + col25, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col20 + col20 + col20 + col20 + col20, 'sfCol_20 selectData');
            ColumnDOM += '</ul>';
            if (typeof (dropped) !== "undefined") {
                if (dropped) {
                    var columnNote = "<p class='popupGuideMessage'>You can manage columns later from  <b>Container >> Manage Columns </b>.</p>";
                    ColumnDOM = columnNote + ColumnDOM;
                }
            }
            FullPagePopup({
                data: ColumnDOM,
                heading: "Manage columns",
                showheading: true,
                width: "60%",
            });
            ColEvents();
            function ColEvents() {
                $('.selectData').on('click', function () {
                    var $this = $(this);
                    var $editcontainer = findSelectedLayer($row);
                    var rowColLength = $editcontainer.find('>.cGrid >.editor-col').length;
                    var choosedCol = $this.find('> .column').length;
                    var width = [];
                    $this.find('> .column').each(function () {
                        width.push($(this).text());
                    });
                    var addedCol = choosedCol - rowColLength;
                    if (addedCol > 0) {
                        var col = '';
                        for (var i = 0; i < addedCol; i++) {
                            //var colspacing = 'editor-com-innerSpacing-top-35 editor-com-innerSpacing-right-35 editor-com-innerSpacing-bottom-35 editor-com-innerSpacing-left-35';
                            col += divStart('editor-col cCol ui-state-default sfFixed  ui-sortable ui-droppable sfCol_40 tsfCol_100 msfCol_100') + DropComponent + divEnd;
                        }
                        $editcontainer.find('> .cGrid').append(col);
                        //if ($editcontainer.length > 0) {
                        //    $editcontainer.find('.colWrapper').append(col);
                        //} else {
                        //    var $shadedLayer = $row.find('.editor-row-shaded-layer');
                        //    if ($shadedLayer.length > 0) {
                        //        $shadedLayer.find('.colWrapper').append(col);
                        //    } else {
                        //        $row.find('.colWrapper').append(col);
                        //    }
                        //}
                        DraggableSortable();
                        SettingEvents();
                        BindColumnEvents($row);
                        ManageWidth();
                        TriggerView($row);
                    } else if (addedCol < 0) {
                        if (typeof (dropped) !== "undefined" && dropped) {
                            if (dropped) {
                                //no need to because it the drop event and  by defaut there is one column
                                // if basic changes then
                            }
                        } else {
                            SageConfirmDialog('You are going to choose  less column. all your data will be switch to the first column ?').done(function () {
                                RemoveColumn();
                                ManageWidth();
                            });
                        }

                    } else if (addedCol == 0) {
                        ManageWidth();
                    }

                    function ManageWidth() {
                        var mWidth = 100;
                        var tWidth = 100;
                        if ($row.find('> .cGrid > .editor-col').length % 2 == 0)
                            tWidth = 50;
                        $row.find('> .cGrid > .editor-col').each(function (i, v) {
                            var $me = $(this);
                            $me.attr('data-type', 'column');
                            var $classes = $me.attr('class').match(/[a-z]{0,1}sfCol_[0-9]{1,3}/g);
                            if ($classes != null) {
                                var length = $classes.length;
                                //use no break in this condition beacause if the length =2 then it must remove 2 class
                                switch (length) {
                                    case 3:
                                        $me.removeClass($classes[2]);
                                    case 2:
                                        $me.removeClass($classes[1]);
                                    case 1:
                                        $me.removeClass($classes[0]);
                                }
                                $me.removeClass($classes[0]);
                            }
                            $me.addClass('sfCol_' + width[i]);
                            var tClass = 'tsfCol_' + tWidth;
                            var mClass = 'msfCol_' + mWidth;
                            $me.addClass(tClass + ' ' + mClass);
                        });
                        CloseFullPagePopup();
                    }
                    function RemoveColumn() {
                        var $editcontainer = $row.find('.editor-row-container');
                        var $removeContainer = '';
                        if ($editcontainer.length > 0) {
                            $removeContainer = $editcontainer.find('> .cGrid > .editor-col');
                        } else {
                            var $shadedLayer = $row.find('.editor-row-shaded-layer');
                            if ($shadedLayer.length > 0) {
                                $removeContainer = $shadedLayer.find('>.cGrid > .editor-col');
                            } else {
                                $removeContainer = $row.find('>.cGrid > .editor-col');
                            }
                        }
                        for (var i = rowColLength - 1; i >= choosedCol; i--) {
                            $removeContainer.eq(i).find('>.editor-component').each(function () {
                                $removeContainer.eq(0).append($(this));
                                $removeContainer.eq(0).find(".column-data-empty").remove();
                            });
                            $removeContainer.eq(i).remove();
                        }
                        TriggerView($row);
                    }
                });
            }
        },
        'pageload': function () {
            $('.cRow').each(function () {
                RowAddBindEvent($(this));
            });
        },
        'defaultdata': EasyLibrary.ReadDOM("container/row"),
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if ($appendLayer.parent().closest('[data-type="container"]').length > 0) {
                $appendLayer.remove();
                CloseFullPagePopup();
                SageAlertDialog('You cannot add container inside container');
            }
            else {
                RowAddBindEvent($appendLayer);
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("container/basic"),
                    "onload": function () {
                        component["container"].common.onload("horizontal");
                        component["container"].common.heightInit();
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "bottom"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }

                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                        "vertical": ["top", "middle", "bottom"]
                    }
                },
                "Scroll Effect": {
                    "options": []
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["image", "color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 50,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow": {
                    "options": {

                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "visibility": {},
                        "ordering": {},
                        "itemsperrow": {
                            "prepend": "true",
                            "DOM": "<div id='itemsperow'></div>",
                            "onload": function ($item) {
                                $parent = $activeDOM;
                                let $targetElem = $activeDOM.find('>.cGrid >.editor-col');
                                let $shaded = $activeDOM.find('>.editor-row-shaded-layer');
                                if ($shaded.length > 0) {
                                    $targetElem = $activeDOM.find('>.editor-row-shaded-layer >.cGrid >.editor-col');
                                }
                                $("#itemsperow").AdvanceItemsPerRow({
                                    targetParent: $activeDOM,
                                    targetElem: $targetElem,
                                    label: 'Items per row',
                                });
                            }
                        },
                        "Basic": {
                            "DOM": EasyLibrary.ReadDOM("container/basic"),
                            "onload": function () {
                                component["container"].common.onload("all");
                                component["container"].common.heightInit();

                            },
                            "prepend": "true",
                        },
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "bottom"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                        "vertical": ["top", "middle", "bottom"]
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "common": {
            "heightInit": function () {
                let dAlpha = DeviceAlpha();
                if ($activeDOM.hasClass(dAlpha + 'adjustheight')) {
                    $('#adJustHeight').prop('checked', true);
                    $('#adjustHeaderHolder').show();
                } else {
                    $('#adJustHeight').prop('checked', false);
                }
                $('#adJustHeight').off().on('click', function () {
                    if ($(this).is(':checked')) {
                        $('#autoheightAdjustRow').prop('checked', false);
                        let parentClasses = $activeDOM.attr('class');
                        let dAlpha = DeviceAlphaSpace();
                        let regex = new RegExp(dAlpha + 'H-[0-9]{1,4}', 'g');
                        let rowHeightClass = parentClasses.match(regex);
                        if (rowHeightClass !== null) {
                            $activeDOM.removeClass(rowHeightClass[0]);
                        }
                        $activeDOM.css({ 'height': '' });
                        $activeDOM.removeClass('fullpagebanner').addClass(dAlpha + 'adjustheight');
                        $('#adjustHeaderHolder').fadeIn(400);
                        var rowHeight = $activeDOM.css('height').replace('px', '');
                        ChangeSliderValue($('#rowHeightSlider'), rowHeight);
                    } else {
                        let parentClasses = $activeDOM.attr('class');
                        let dAlpha = DeviceAlphaSpace();
                        let regex = new RegExp(dAlpha + 'H-[0-9]{1,4}', 'g');
                        let rowHeightClass = parentClasses.match(regex);
                        if (rowHeightClass !== null) {
                            $activeDOM.removeClass(rowHeightClass[0]);
                        }
                        $activeDOM.removeClass(dAlpha + 'adjustheight');
                        $activeDOM.css({ 'height': '' });
                        $('#adjustHeaderHolder').fadeOut(400);
                    }
                });
                RowHeight();
                function RowHeight() {
                    let $parent = $activeDOM;
                    function rowHeightChange(space) {
                        ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + space);
                    }
                    AdvanceSageSlider($('#rowHeightSlider'), $('#rowHeightHandle'), 50, 1080,
                        GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-'), rowHeightChange, $parent, 'px');
                }
            },
            "onload": function (type) {
                $("#containerHeight").AdvanceDimension({
                    type: 'height',
                    targetParent: $activeDOM,
                    targetElem: $activeDOM,
                    label: 'Height',
                    defaultValue: 100
                });
                $("#containerWidth").AdvanceDimension({
                    type: 'sfwidth',
                    targetParent: $activeDOM,
                    targetElem: $activeDOM,
                    label: 'Width',
                    defaultValue: 100,
                });
                $('#containergutterspace').AdvanceGutterSpace({
                    targetParent: $activeDOM,
                    targetElem: $activeDOM.find('.cGrid > div'),
                    type: type,
                    itemsperrow: $activeDOM.find('.cGrid > div').length,
                });
            },
        }
    }
,    dynamic_cmp_detail: {
        componentname: 'dynamic_cmp_detail',
        category: "advance",
        icon: "fa fa-file-text-o",
        row: false,
        hidden: true,
        collection: false,
        bucket: false,
        type: "dynamic_post",
        defaultdata: "",
        beforedrop: function ($appendedParent, $appendLayer, dropped, cmpName) {
            //let cmpName = this.componentname;
            let self = this;
            if (typeof dropped !== 'undefined' && dropped === false) {
                self.library.showTemplateChooser(cmpName, $appendedParent, $appendLayer);
            }
        },
        afterdrop: function ($appendedParent, $appendLayer, dropped, cmpName) {
            if ($('.site-body').find('.editor-component.dynamic-component-detail').length > 1) {
                $appendLayer.remove();
                SageAlertDialog('You cannot add two dynamic detail components on same page.');
                return;
            }
            let self = this;
            if (typeof dropped !== 'undefined' && dropped === true) {
                self.library.showTemplateChooser(cmpName, $appendedParent, $appendLayer);
            }
            if (typeof cmpName === 'undefined') {
                cmpName = $appendLayer.attr('data-type');
            }
            if (dropped !== true) {
                self.view.view({ dataType: cmpName });
            }
            //if multiple detail components is to be allowed in same page, uncomment lines below
            //if (dropped !== true) {
            //    let $detailCmps = $('.dynamic-component-detail');
            //    $.each($detailCmps, function (i, c) {
            //        self.view.view({ dataType: $(c).attr('data-type') });
            //    });
            //}
        },
        settingDOMs: {
            "tabs": {
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM.find('.dynamicComponentDetailItem');
                    },

                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },
                "Scroll Effect": {
                    "options": [],
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        styleDOMs: {
            "tabs": {
                "Background": {
                    "options": ["color", "image"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 200,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow":
                    {
                        "options": {

                        }
                    },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        responsiveDOMs: {
            "tabs": {
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    },
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                    },
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
    binddata: function ($layer, apiResponse) {
            let $itemTemplate = $layer.find('.dynamicComponentDetailItemTmp');

            if ($itemTemplate.find('.dyn_no_tmp').length > 0) {
                $layer.find('.dynamicComponentDetailWrap').html($itemTemplate.eq(0).clone().removeClass('Dn tDn mDn dynamicComponentDetailItemTmp').addClass('dynamicComponentDetailItem'));
                return;
            }

            let jsonData = {};
            try {
                jsonData = JSON.parse(apiResponse.JsonData);
                let postId = $layer.attr('data-post-type-id');
                if (typeof apiResponse.PostKey !== 'undefined' && apiResponse.PostKey != postId) {
                    if (!EditorMode) {
                        return;
                    }
                    console.log("post type mismatch");
                    jsonData = {};
                }
            } catch (e) {
                if (!EditorMode) {
                    return;
                }
                console.log("API response error");
            }
            let $template = $itemTemplate.eq(0).clone().removeClass('Dn tDn mDn dynamicComponentDetailItemTmp').addClass('dynamicComponentDetailItem');
            $.each(jsonData, function (index, value) {
                let $targets = $template.find('div[data-value-key="' + value.name + '"]');
                if ($targets.length > 0) {
                    $.each($targets, function (i, target) {
                        let $target = $(target);
                        $target.removeClass('Dn tDn mDn').addClass('Dib tDib mDib');
                        let fldval = '';
                        let defval = $target.attr('data-default-value');
                        if (typeof defval === 'undefined') {
                            defval = '';
                        }
                        switch (value.type) {
                            case 'sageIcon':
                                fldval = value.value.trim();
                                if (fldval.length == 0) {
                                    if ($target.find('.dyn-hide-no-val').length > 0) {
                                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                        break;
                                    }
                                    fldval = defval;
                                }
                                $target.find('.dyncmpfldval').removeClass(function (index, className) {
                                    return (className.match(/\bfa-([^\s]+)\b/g) || []).join(' ');
                                }).addClass(fldval);
                                break;
                            case 'text':
                            case 'textarea':
                                fldval = value.value.trim();
                                if (fldval.length == 0) {
                                    if ($target.find('.dyn-hide-no-val').length > 0) {
                                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                        break;
                                    }
                                    fldval = defval;
                                }
                                $target.find('.dyncmpfldval').text(fldval);
                                break;
                            case 'richtext':
                                if (value.value.trim().length == 0 && $target.find('.dyn-hide-no-val').length > 0) {
                                    $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                    break;
                                }
                                $target.find('.dyncmpfldval').html(value.value);
                                $target.find('.documenttext').removeAttr('contenteditable');
                                break;
                            case 'sageMedia':
                                try {
                                    let val = JSON.parse(value.value);
                                    if (EditorMode) {
                                        $target.find('.dyncmpfldval').attr('src', val.filePath).attr('alt', val.alt);
                                    } else if (typeof FakeImageURL !== 'undefined' && typeof ImageLazyLoader === 'function') {
                                        $target.find('.dyncmpfldval').attr('data-cimage', val.filePath).attr('src', FakeImageURL).attr('alt', val.alt);
                                    } else {
                                        $target.find('.dyncmpfldval').attr('src', val.filePath).attr('alt', val.alt);
                                    }
                                } catch (e) {
                                    if ($target.find('.dyn-hide-no-val').length > 0) {
                                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                        break;
                                    }
                                    if (defval) {
                                        if (EditorMode) {
                                            $target.find('.dyncmpfldval').attr('src', defval).attr('alt', value.label);
                                        } else if (typeof FakeImageURL !== 'undefined' && typeof ImageLazyLoader === 'function') {
                                            $target.find('.dyncmpfldval').attr('data-cimage', defval).attr('src', FakeImageURL).attr('alt', value.label);
                                        } else {
                                            $target.find('.dyncmpfldval').attr('src', defval).attr('alt', value.label);
                                        }
                                    }
                                }
                                break;
                            case 'checkbox-group':
                            case 'select':
                            case 'radio-group':
                                component["dynamic_cmp_detail"].library.displayMultipleValues($target, value);
                                break;
                            case 'sageVideo':
                                try {
                                    let vid = JSON.parse(value.value);
                                    if (typeof vid.url !== 'undefined' && vid.url && vid.url.trim().length > 0) {
                                        component["dynamic_cmp_detail"].library.displayVideo($target, vid);
                                    } else {
                                        throw "no video url";
                                    }
                                } catch (e) {
                                    if ($target.find('.dyn-hide-no-val').length > 0) {
                                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                        break;
                                    }
                                    if (defval) {
                                        component["dynamic_cmp_detail"].library.displayVideo($target, { provider: 'youtube', url: defval });
                                        //$target.find('.dyncmpfldval > iframe').attr('src', defval);
                                    }
                                }
                                break;
                            case 'sageUrl':
                                fldval = value.value.trim();
                                if (fldval.length == 0) {
                                    if ($target.find('.dyn-hide-no-val').length > 0) {
                                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                        break;
                                    }
                                    fldval = defval;
                                }
                                if (fldval.length > 0 && fldval != '#' && fldval.indexOf('://') == -1) {
                                    fldval = 'http://' + fldval;
                                }
                                $target.find('.dyncmpfldval').attr('href', fldval);
                                break;
                        }
                    });
                }
            });
            $layer.find('.dynamicComponentDetailWrap').append($template);
            ViewMouseOverEffect();
            //$itemTemplate.remove();
        },
        binddataerror: function ($layer, response) {
            if (EditorMode) {
                component["dynamic_cmp_detail"].binddata($layer, { JsonData: "{}" });
                component["dynamic_cmp_detail"].library.fillDefaultValues($layer);
            }
        },
        removeedit: function ($editDOM, comName) {
            $editDOM.find('.editor-component[data-type="' + comName + '"]').each(function () {
                var $this = $(this);

                let $detailWrapper = $this.find('.dynamicComponentDetailWrap');
                //append one hidden list template
                let hdnTmp = $detailWrapper.find('.dynamicComponentDetailItem').eq(0).clone().addClass('Dn tDn mDn dynamicComponentDetailItemTmp').removeClass('dynamicComponentDetailItem').wrapAll('<div>').parent().html();
                hdnTmp = $(hdnTmp).find('.editor-component.dyncmpfld').removeAttr('data-type').end().wrapAll('<div />').parent().html();
                $this.find('.dynamicComponentDetailItemTmp').remove();
                $this.append(hdnTmp);
                $detailWrapper.empty();
            });
        },
        remove: function ($cloneDOM, comName) {
            $cloneDOM.find('.editor-component[data-type="' + comName + '"]').each(function () {
                var $this = $(this);

                let $detailWrapper = $this.find('.dynamicComponentDetailWrap');
                //append one hidden list template
                let hdnTmp = $detailWrapper.find('.dynamicComponentDetailItem').eq(0).clone().addClass('Dn dynamicComponentDetailItemTmp').removeClass('dynamicComponentDetailItem').wrapAll('<div>').parent().html();
                hdnTmp = $(hdnTmp).find('.editor-component.dyncmpfld').removeAttr('data-type').end().wrapAll('<div />').parent().html();
                $this.find('.dynamicComponentDetailItemTmp').remove();
                $this.append(hdnTmp);
                $detailWrapper.empty();

                let APICntrl = new APIController();
                APICntrl.ComponentName = comName;
                APICntrl.NameSpace = "Cbuilder.Core.DynamicPost";
                APICntrl.ClassNames = "DynamicComponentController";
                APICntrl.MethodNames = "GetPostDataById";
                //index of parameter
                APICntrl.Parameters = "0";
                //your componentID here
                APICntrl.ComponentID = EasyLibrary.GetComponenetID($this);
                APICntrl.Type = "URL";
                EasyLibrary.SetAPI(APICntrl);
            });
        },
        library: {
            populateData: function (cmpName, $layer) {
                if (EditorMode) {
                    component[cmpName].binddata($layer, { JsonData: "{}" });
                    component["dynamic_cmp_detail"].library.fillDefaultValues($layer);
                }
            },
            displayVideo: function($target, vid) {
                switch (vid.provider) {
                    case 'youtube':
                        let ytRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
                        let yt = vid.url.trim().match(ytRegExp);

                        if (yt && yt[2].length == 11) {
                            let youTubeurl = 'https://www.youtube.com/embed/';
                            let ytUrl = youTubeurl + yt[2];
                            $target.find('.dyncmpfldval > iframe').attr('src', ytUrl);
                        }
                        break;
                }
            },
            displayMultipleValues: function($target, value) {
                let valuesObj = value.values.filter(function (v) {
                    return v.selected == true;
                });
                let values = valuesObj.map(function (v) {
                    return v.label;
                });
                if (values.length == 0) {
                    if ($target.find('.dyn-hide-no-val').length > 0) {
                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                        return;
                    }
                    try {
                        let defval = $target.attr('data-default-value');
                        values = JSON.parse(defval);
                    } catch (e) {
                        //
                    }
                }
                let setting = $target.attr('data-dynamic-setting');
                try {
                    setting = JSON.parse(setting);
                } catch (e) {
                    setting = {};
                }
                let display = 'comma_list';
                if (typeof setting['display'] !== 'undefined') {
                    display = setting['display'];
                }
                let cls = '';
                if (typeof setting['type'] !== 'undefined') {
                    cls = setting['type'];
                }
                if (typeof setting['Type'] !== 'undefined') {
                    cls = setting['Type'];
                }
                let $li = "";
                for (let v of values) {
                    $li += "<li>" + v + "</li>";
                }
                switch (display) {
                    case 'comma_list':
                        $target.find('.dyncmpfldval').text(values.join(', '));
                        break;
                    case 'unordered_list':
                        let $ul = "<ul class='" + cls + "'>" + $li + "</ul>";
                        $target.find('.dyncmpfldval').html($ul);
                        break;
                    case 'ordered_list':
                        let $ol = "<ol class='" + cls + "'>" + $li + "</ol>";
                        $target.find('.dyncmpfldval').html($ol);
                        break;
                    default:
                        $target.find('.dyncmpfldval').text(display + ' display not implemented');
                }
            },
            fillDefaultValues: function($layer) {
                let $targets = $layer.find('.dynamicComponentDetailWrap .dyncmpfld');
                if ($targets.length > 0) {
                    $.each($targets, function (i, target) {
                        let $target = $(target);
                        let type = $target.attr('data-dynfldtype');
                        let value = $target.attr('data-default-value');
                        let title = $target.attr('data-title');
                        if (typeof title === 'undefined') {
                            title = "value";
                        }
                        if (typeof value === 'undefined') {
                            value =  title;
                        }
                        switch (type) {
                            case 'sageIcon':
                                $target.find('.dyncmpfldval').removeClass(function (index, className) {
                                    return (className.match(/\bfa-([^\s]+)\b/g) || []).join(' ');
                                }).addClass(value);
                                break;
                            case 'text':
                            case 'textarea':
                                $target.find('.dyncmpfldval').text(value);
                                break;
                            case 'checkbox-group':
                            case 'select':
                            case 'radio-group':
                                let _values = JSON.parse(value);
                                let valueObjects = _values.map(function (i) {
                                    return { label: i, value: i, selected: 1 };
                                });
                                component["dynamic_cmp_detail"].library.displayMultipleValues($target, { values: valueObjects });
                                break;
                            case 'richtext':
                                //$target.find('.dyncmpfldval').html(value);
                                $target.find('.documenttext').removeAttr('contenteditable');
                                break;
                            case 'sageMedia':
                                $target.find('.dyncmpfldval').attr('src', value).attr('alt', 'No value');
                                break;
                            case 'sageVideo':
                                let $vidHld = $target.find('.dyncmpfldval');
                                let $oldIframe = $vidHld.find('iframe');
                                let attrs = $oldIframe.attrs();
                                $oldIframe.remove();
                                $newIframe = $('<iframe></iframe>');
                                for (let a in attrs) {
                                    $newIframe.attr(a, attrs[a]);
                                }
                                $newIframe.attr('src', value).appendTo($vidHld);
                                break;
                            case 'sageUrl':
                                $target.find('.dyncmpfldval').attr('href', value);
                                break;
                        }
                    });
                }
            },
            getPostDataId: function () {
                let parts = window.location.href.split("/");
                let id = parts.pop();
                if (isNaN(id) || id == null || id.length == 0) {
                    return 0;
                }
                return parseInt(id);
            },
            appendTemplate: function (cmpName, $appendedParent, $appendLayer, template) {
                if (template != "") {
                    $appendLayer.find('.dynamicComponentDetailWrap').empty();
                    $appendLayer.find('.dynamicComponentDetailItemTmp').remove();
                    $appendLayer.append(template);
                }
                component["dynamic_cmp_detail"].library.populateData(cmpName, $appendLayer);
            },
            showTemplateChooser: function (cmpName, $appendedParent, $appendLayer) {
                if ($('.site-body').find('.editor-component.dynamic-component-detail').length > 1) {
                    return;
                }
                FullPagePopup({
                    data: "Fetching templates. Please wait...",
                    heading: "Choose template",
                    showheading: true,
                    width: "50%",
                    onclose: function ($fullpage) {
                        //
                    }
                });
                let postTypeId = $appendLayer.attr('data-post-type-id');
                let self = this;
                let html = `<div class="field-row stElWrap dynamic-template-chooser col100">
                            <div class="field-row">
                                <div class="field-row stElWrap col100">
                                    <div id="dynamic-templates"></div>
                                    <div class="sfCol_100">
                                        <span class="stngSmallBtn" id="btnDynamicTmp">Done</span>
                                    </div>
                                </div>
                            </div>
                        </div>`;
                $.ajax({
                    url: `${SageFrameHostURL}/Dashboard/DynamicPost/GetAllPostTemplatesByKey`,
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    traditional: true,
                    type: 'POST',
                    data: JSON.stringify({ PostKey: postTypeId, Type: 'detail' }),
                    success: function (res) {
                        CloseFullPagePopup();
                        if (!res) {
                            SageAlertDialog("Error fetching templates", "Error");
                            return;
                        }
                        let lst = [];
                        let templateMapper = {
                            '0': ""
                        };
                        let postTemplateId = $appendLayer.attr('data-post-template-id');
                        if (typeof postTemplateId === 'undefined') {
                            postTemplateId = '0';
                        }
                        $.each(res, function (i, d) {
                            templateMapper[d.TemplateKey] = d.TemplateViewDom;
                            let checked = "";
                            if (postTemplateId == '0') {
                                postTemplateId = d.TemplateKey;
                            }
                            if (d.TemplateKey == postTemplateId) {
                                checked = " checked='checked'";
                            }
                            let parts = [];
                            parts.push('<label><span class="dyn-tmp-choice">');
                            if (d.Screenshot) {
                                parts.push(`<img src="${d.Screenshot}" alt="${d.TemplateName} screenshot" width="100" height="100" />`);
                            } else {
                                parts.push(`<img src="/Media/bnr1.jpg" alt="${d.TemplateName} screenshot" width="100" height="100" />`);
                            }
                            parts.push(`<input type="radio" name="deftmp" value="${d.TemplateKey}" ${checked}>${d.TemplateName}`);
                            parts.push('</span></label>');
                            lst.push(parts.join(''));
                        });
                        if (lst.length == 0) {
                            let emptymsg = "<p>You have not created any template for this component.</p>";
                            let emptymsg2 = "<p class='dyn_no_tmp'>No template selected.</p>";
                            lst.push(emptymsg);
                            html = $(html).find('#btnDynamicTmp').addClass('Dn').end().wrapAll('<div />').parent().html();
                            $appendLayer.find('.dynamicComponentDetailWrap').empty().html('<div class="dynamicComponentDetailItem">' + emptymsg2 + '</div>');
                        }
                        let chData = $(html).find('#dynamic-templates').html(lst.join('')).end().wrapAll('<div />').parent().html();
                        let clickedDone = false;
                        FullPagePopup({
                            data: chData,
                            heading: "Choose template",
                            showheading: true,
                            width: "50%",
                            onclose: function ($fullpage) {
                                if (!clickedDone) {
                                    //
                                }
                            }
                        });
                        $('#btnDynamicTmp').off('click').on('click', function () {
                            clickedDone = true;
                            let tmp = "";
                            let v = $("input:radio[name=deftmp]:checked").val();
                            if (v != '0' && typeof templateMapper[v] !== 'undefined') {
                                let deftemp = templateMapper[v];
                                tmp = $("<div />").html(deftemp).text();
                                tmp = $(tmp).find('.editor-component.dyncmpfld').removeAttr('data-type').end().wrapAll('<div />').parent().html();
                                tmp = '<div class="dynamicComponentDetailItemTmp Dn tDn mDn sfCol_100 tsfCol_100 msfCol_100">' + tmp + '</div>';
                            }
                            $appendLayer.attr('data-post-template-id', v);
                            self.appendTemplate(cmpName, $appendedParent, $appendLayer, tmp);
                            CloseFullPagePopup();
                        });
                    },
                    error: function (e) {
                        console.log(e);
                    }
                });
            }
        },
        view: {
            view: function (param) {
                let dataType = param['dataType'];
                $('.editor-component[data-type="' + dataType + '"]').each(function () {
                    let $this = $(this);
                    //component["dynamic_cmp_detail"].library.populateData(dataType, $(this));
                    $this.off('click', '.dyncmp-url-link')
                        .on('click', '.dyncmp-url-link', function (e) {
                            let href = $(this).attr('href');
                            if (EditorMode || href.length == 0 || href == '#' || href == 'javascript:void(0)') {
                                e.preventDefault();
                            }
                        });
                });
            }
        }
    }
,    dynamic_cmp_list: {
        componentname: 'dynamic_cmp_list',
        category: "advance",
        aaa: "aaa",
        icon: "fa fa-th-list",
        row: false,
        hidden: true,
        collection: false,
        bucket: false,
        type: "dynamic_post",
        defaultdata: "",
        beforedrop: function ($appendedParent, $appendLayer, dropped, cmpName) {
            //let cmpName = 'dynamic_cmp_list';
            let self = this;
            self.library.showTemplateChooser(cmpName, $appendedParent, $appendLayer);
        },
        afterdrop: function ($parent, $layer, dropped, cmpName) {
            if (typeof cmpName === 'undefined') {
                cmpName = $layer.attr('data-type');
            }
            if (dropped) {
                //
            } else {
                //this.library.populateData(cmpName, $layer);
            }
            //fix manage data link
            this.library.fixManageDataLink();
            this.view.view({ dataType: cmpName, dropped: dropped, layer: $layer });
        },
        settingDOMs: {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic'),
                    "onload": function ($item) {
                        let templateId = $activeDOM.attr('data-post-template-id');
                        if (typeof templateId === 'undefined' || templateId == '0') {
                            $('#dymcmpSetTmpMsg').removeClass('Dn');
                            $('#cmpListBasicSet').addClass('Dn');
                            return;
                        }
                        if ($activeDOM.find('.dyn_no_data').length > 0) {
                            $('#dymcmpSetDataMsg').removeClass('Dn');
                            $('#cmpListBasicSet').addClass('Dn');
                            return;
                        }
                        $('#dymcmpSetTmpMsg').addClass('Dn');
                        $('#dymcmpSetDataMsg').addClass('Dn');
                        $('#cmpListBasicSet').removeClass('Dn');
                        //set manage data url
                        //let postTypeId = $activeDOM.attr('data-post-type-id');
                        //let manageUrl = SageFrameHostURL + '/dashboard/Post-Data/' + postTypeId;
                        //$('#dyncmpManageData').attr('href', manageUrl);

                        //display options
                        let options = [];
                        $.each(Object.keys(component["dynamic_cmp_list"].library.display.options), function (i, o) {
                            if (component["dynamic_cmp_list"].library.display.options[o].enabled) {
                                options.push("<option value='" + o + "'>" + component["dynamic_cmp_list"].library.display.options[o].name + "</option>");
                            }
                        });
                        $('#dyncmpDisplay').html(options.join(''));
                        $('#dyncmpDisplay').off().on('change', function (e) {
                            let display = $(this).val();
                            component["dynamic_cmp_list"].library.display.displayChange(e, $activeDOM, display);
                        });
                        let display = component["dynamic_cmp_list"].library.display.getDisplay($activeDOM);
                        $('#dyncmpDisplay').val(display).trigger('change');

                        //general item setting
                        $('#itemSetting').DynamicCmpItemsSetting({
                            limit: true,
                            offset: true,
                            bindOnChange: true
                        });

                        //detail page
                        let hasDetail = $activeDOM.attr('data-post-has-detail');
                        if (typeof hasDetail !== 'undefined' && hasDetail == 1) {
                            $('#postDetailPageLink').removeClass('Dn');
                            let $pagelistSelect = $('#postDetailPageList');
                            let options = EasyLibrary.GetPageOption();
                            $pagelistSelect.append(options);
                            let detailPage = $activeDOM.attr('data-post-detail-page');
                            if (typeof detailPage !== 'undefined') {
                                $("#postDetailPageList option").filter(function () {
                                    return this.text == detailPage;
                                }).attr('selected', true);
                            }
                            $pagelistSelect.off().on('change', function () {
                                let $this = $(this);
                                let $selected = $pagelistSelect.find('option:selected');
                                let url = $selected.text();
                                $activeDOM.attr('data-post-detail-pageid', $selected.val());
                                $activeDOM.attr('data-post-detail-page', url);
                            });
                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='cmpSpacing'></div>",
                    "onload": function ($item) {
                        $('#cmpSpacing').AdvanceSpacing({
                            targetParent: $activeDOM,
                            targetElem: $activeDOM
                        });
                    }

                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },
                "Scroll Effect": {
                    "options": [],
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        styleDOMs: {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": "<div id='cmpBG'></div>",
                    "onload": function () {
                        $('#cmpBG').AdvanceBackground({
                            targetParent: $activeDOM,
                            targetElem: $activeDOM
                        });
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": "<div id='cmpBorder'></div>",
                    "onload": function () {
                        $('#cmpBorder').AdvanceBorder({
                            targetParent: $activeDOM,
                            targetElem: $activeDOM
                        });
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": "<div id='cmpBoxRad'></div>",
                    "onload": function () {
                        $('#cmpBoxRad').AdvanceBoxRadius({
                            targetParent: $activeDOM,
                            targetElem: $activeDOM
                        });
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": "<div id='cmpBoxShadow'></div>",
                    "onload": function () {
                        $('#cmpBoxShadow').AdvanceBoxShadow({
                            targetParent: $activeDOM,
                            targetElem: $activeDOM
                        });
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        responsiveDOMs: {
            "tabs": {
                "Basic": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic_res'),
                    "onload": function ($item) {
                        let display = component["dynamic_cmp_list"].library.display.getDisplay($activeDOM);
                        //component["dynamic_cmp_list"].library.display.options[display].init($activeDOM);
                        //setup settings after init, since settings read dom
                        component["dynamic_cmp_list"].library.display.options[display].setupResponsiveSettings();
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    },
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                    },
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        binddata: function ($layer, apiResponse) {
            //destroy used display plugin
            let display = component["dynamic_cmp_list"].library.display.getDisplay($layer);
            if (typeof display === 'undefined') {
                display = 'list';
            }
            try {
                component["dynamic_cmp_list"].library.display.options[display].destroy($layer);
                component["dynamic_cmp_list"].library.clearList($layer);
            } catch (e) {
                //
            }
            let $itemTemplate = $layer.find('.dynamicComponentListItemTmp');

            if ($itemTemplate.find('.dyn_no_tmp').length > 0) {
                $layer.find('.dynamicComponentListWrap').html($itemTemplate.eq(0).clone().removeClass('Dn tDn mDn dynamicComponentListItemTmp').addClass('dynamicComponentListItem Dib tDib mDib'));
                return;
            }

            if (apiResponse.length == 0) {
                let no_data = '<div class="dynamicComponentListItem"><p class="dyn_no_data">No data</p></div>';
                if (EditorMode) {
                    $layer.find('.dynamicComponentListWrap').html(no_data);
                    //let $template = $itemTemplate.eq(0).clone().removeClass('Dn dynamicComponentListItemTmp').addClass('dynamicComponentListItem');
                    //$layer.find('.dynamicComponentListWrap').html($template);
                } else {
                    $layer.find('.dynamicComponentListWrap').html(no_data);
                }
                return;
            }
            $layer.data('apiResponse', apiResponse);
            $.each(apiResponse, function (i, v) {
                let jsonData = JSON.parse(this.JsonData);
                let $template = $itemTemplate.eq(0).clone().removeClass('Dn tDn mDn dynamicComponentListItemTmp').addClass('dynamicComponentListItem Dib tDib mDib').attr('data-postdata-id', v.PostDataId);
                $.each(jsonData, function (index, value) {
                    let $targets = $template.find('div[data-value-key="' + value.name + '"]');
                    if ($targets.length > 0) {
                        $.each($targets, function (i, target) {
                            let $target = $(target);
                            $target.removeClass('Dn tDn mDn').addClass('Dib tDib mDib');
                            let fldval = '';
                            let defval = $target.attr('data-default-value');
                            if (typeof defval === 'undefined') {
                                defval = '';
                            }
                            switch (value.type) {
                                case 'sageIcon':
                                    fldval = value.value.trim();
                                    if (fldval.length == 0) {
                                        if ($target.find('.dyn-hide-no-val').length > 0) {
                                            $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                            break;
                                        }
                                        fldval = defval;
                                    }
                                    $target.find('.dyncmpfldval').removeClass(function (index, className) {
                                        return (className.match(/\bfa-([^\s]+)\b/g) || []).join(' ');
                                    }).addClass(fldval);
                                    break;
                                case 'text':
                                case 'textarea':
                                    fldval = value.value.trim();
                                    if (fldval.length == 0) {
                                        if ($target.find('.dyn-hide-no-val').length > 0) {
                                            $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                            break;
                                        }
                                        fldval = defval;
                                    }
                                    $target.find('.dyncmpfldval').text(fldval);
                                    break;
                                case 'richtext':
                                    if (value.value.trim().length == 0 && $target.find('.dyn-hide-no-val').length > 0) {
                                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                        break;
                                    }
                                    $target.find('.dyncmpfldval').html(value.value);
                                    $target.find('.documenttext').removeAttr('contenteditable');
                                    break;
                                case 'sageMedia':
                                    try {
                                        let val = JSON.parse(value.value);
                                        if (EditorMode) {
                                            $target.find('.dyncmpfldval').attr('src', val.filePath).attr('alt', val.alt);
                                        } else if (typeof FakeImageURL !== 'undefined' && typeof ImageLazyLoader === 'function') {
                                            $target.find('.dyncmpfldval').attr('data-cimage', val.filePath).attr('src', FakeImageURL).attr('alt', val.alt);
                                        } else {
                                            $target.find('.dyncmpfldval').attr('src', val.filePath).attr('alt', val.alt);
                                        }
                                    } catch (e) {
                                        if ($target.find('.dyn-hide-no-val').length > 0) {
                                            $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                            break;
                                        }
                                        if (defval) {
                                            if (EditorMode) {
                                                $target.find('.dyncmpfldval').attr('src', defval).attr('alt', value.label);
                                            } else if (typeof FakeImageURL !== 'undefined' && typeof ImageLazyLoader === 'function') {
                                                $target.find('.dyncmpfldval').attr('data-cimage', defval).attr('src', FakeImageURL).attr('alt', value.label);
                                            } else {
                                                $target.find('.dyncmpfldval').attr('src', defval).attr('alt', value.label);
                                            }
                                        }
                                    }
                                    break;
                                case 'checkbox-group':
                                case 'select':
                                case 'radio-group':
                                    displayMultipleValues($target, value);
                                    break;
                                case 'sageVideo':
                                    try {
                                        let vid = JSON.parse(value.value);
                                        if (typeof vid.url !== 'undefined' && vid.url && vid.url.trim().length > 0) {
                                            displayVideo($target, vid);
                                        } else {
                                            throw "no video url";
                                        }
                                    } catch (e) {
                                        if ($target.find('.dyn-hide-no-val').length > 0) {
                                            $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                            break;
                                        }
                                        if (defval) {
                                            displayVideo($target, { provider: 'youtube', url: defval });
                                        }
                                    }
                                    break;
                                case 'sageUrl':
                                    fldval = value.value.trim();
                                    if (fldval.length == 0) {
                                        if ($target.find('.dyn-hide-no-val').length > 0) {
                                            $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                                            break;
                                        }
                                        fldval = defval;
                                    }
                                    if (fldval.length > 0 && fldval != '#' && fldval.indexOf('://') == -1) {
                                        fldval = 'http://' + fldval;
                                    }
                                    $target.find('.dyncmpfldval').attr('href', fldval);
                                    break;
                            }
                        });
                    }
                });
                $layer.find('.dynamicComponentListWrap').append($template);
            });
            ViewMouseOverEffect();
            component["dynamic_cmp_list"].library.setDetailPageLink($layer);
            component["dynamic_cmp_list"].library.display.display($layer);

            //$itemTemplate.remove();

            function displayVideo($target, vid) {
                switch (vid.provider) {
                    case 'youtube':
                        let ytRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
                        let yt = vid.url.trim().match(ytRegExp);

                        if (yt && yt[2].length == 11) {
                            let youTubeurl = 'https://www.youtube.com/embed/';
                            let ytUrl = youTubeurl + yt[2];
                            $target.find('.dyncmpfldval > iframe').attr('src', ytUrl);
                        }
                        break;
                }
            }

            function displayMultipleValues($target, value) {
                let valuesObj = value.values.filter(function (v) {
                    return v.selected == true;
                });
                let values = valuesObj.map(function (v) {
                    return v.label;
                });
                if (values.length == 0) {
                    if ($target.find('.dyn-hide-no-val').length > 0) {
                        $target.addClass('Dn tDn mDn').removeClass('Dib tDib mDib');
                        return;
                    }
                    try {
                        let defval = $target.attr('data-default-value');
                        values = JSON.parse(defval);
                    } catch (e) {
                        //
                    }
                }
                let setting = $target.attr('data-dynamic-setting');
                try {
                    setting = JSON.parse(setting);
                } catch (e) {
                    setting = {};
                }
                let display = 'comma_list';
                let cls = '';
                if (typeof setting['display'] !== 'undefined') {
                    display = setting['display'];
                }
                if (typeof setting['type'] !== 'undefined') {
                    cls = setting['type'];
                }
                if (typeof setting['Type'] !== 'undefined') {
                    cls = setting['Type'];
                }
                let $li = "";
                for (let v of values) {
                    $li += "<li>" + v + "</li>";
                }
                switch (display) {
                    case 'comma_list':
                        $target.find('.dyncmpfldval').text(values.join(', '));
                        break;
                    case 'unordered_list':
                        let $ul = "<ul class='" + cls + "'>" + $li + "</ul>";
                        $target.find('.dyncmpfldval').html($ul);
                        break;
                    case 'ordered_list':
                        let $ol = "<ol class='" + cls + "'>" + $li + "</ol>";
                        $target.find('.dyncmpfldval').html($ol);
                        break;
                    default:
                        $target.find('.dyncmpfldval').text(display + ' display not implemented');
                }
            }
        },
        binddataerror: function ($parent, response) { },
        removeedit: function ($editDOM, cmpName) {
            $editDOM.find('.editor-component[data-type="' + cmpName + '"]').each(function () {
                var $this = $(this);

                let $listWrapper = $this.find('.dynamicComponentListWrap');
                //append one hidden list template
                let $listItems = $listWrapper.find('.dynamicComponentListItem');
                if ($listItems.length > 0 && $listItems.find('.dyn_no_data').length == 0) {
                    let hdnTmp = $listItems.eq(0).clone().removeAttr('data-postdata-id').addClass('Dn tDn mDn dynamicComponentListItemTmp').removeClass('dynamicComponentListItem Dib tDib mDib').wrapAll('<div>').parent().html();
                    hdnTmp = $(hdnTmp).find('.editor-component.dyncmpfld').removeAttr('data-type').end().wrapAll('<div />').parent().html();
                    $this.find('.dynamicComponentListItemTmp').remove();
                    $this.append(hdnTmp);
                    component["dynamic_cmp_list"].library.fillDefaultValues($this.find('.dynamicComponentListItemTmp'));
                }
                $listWrapper.empty();
                $listWrapper.removeClass(function (index, className) {
                    return (className.match(/slick-[\w]+/g) || []).join(' ');
                });
            });
        },
        remove: function ($cloneDOM, cmpName) {
            $cloneDOM.find('.editor-component[data-type="' + cmpName + '"]').each(function () {
                let $this = $(this);

                let $listWrapper = $this.find('.dynamicComponentListWrap');
                //append one hidden list template
                let $listItems = $listWrapper.find('.dynamicComponentListItem');
                if ($listItems.length > 0 && $listItems.find('.dyn_no_data').length == 0) {
                    let hdnTmp = $listItems.eq(0).clone().removeAttr('data-postdata-id').addClass('Dn tDn mDn dynamicComponentListItemTmp').removeClass('dynamicComponentListItem Dib tDib mDib').wrapAll('<div>').parent().html();
                    hdnTmp = $(hdnTmp).find('.editor-component.dyncmpfld').removeAttr('data-type').end().wrapAll('<div />').parent().html();
                    $this.find('.dynamicComponentListItemTmp').remove();
                    $this.append(hdnTmp);
                    component["dynamic_cmp_list"].library.fillDefaultValues($this.find('.dynamicComponentListItemTmp'));
                }
                $listWrapper.empty();
                $listWrapper.removeClass(function (index, className) {
                    return (className.match(/slick-[\w]+/g) || []).join(' ');
                });
                let APICntrl = new APIController();
                APICntrl.ComponentName = cmpName;
                APICntrl.NameSpace = "Cbuilder.Core.DynamicPost";
                APICntrl.ClassNames = "DynamicComponentController";
                APICntrl.MethodNames = "GetPostDataByKey";
                //you need to set params here according to the logic
                let offset = component["dynamic_cmp_list"].library.getOffset($this);
                let limit = component["dynamic_cmp_list"].library.getLimit($this);
                let params = [
                    $this.attr('data-post-type-id'),
                    offset,
                    limit,
                    '%SiteID%'
                ];
                APICntrl.Parameters = params.join(',');
                //your componentID here
                APICntrl.ComponentID = EasyLibrary.GetComponenetID($this);
                APICntrl.Type = "method";
                EasyLibrary.SetAPI(APICntrl);
            });
        },
        library: {
            populateData: function (cmpName, $layer) {
                let id = $layer.attr('data-post-type-id');
                let offset = component["dynamic_cmp_list"].library.getOffset($layer);
                let limit = component["dynamic_cmp_list"].library.getLimit($layer);
                $.ajax({
                    url: `${SageFrameHostURL}/Dashboard/DynamicPost/GetPostDataByKey`,
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    traditional: true,
                    type: 'POST',
                    data: JSON.stringify({
                        PostKey: id,
                        offset: parseInt(offset),
                        limit: parseInt(limit)
                    }),
                    async: false,
                    success: function (data) {
                        component[cmpName].binddata($layer, data);
                    },
                    error: function () {
                        console.log("Error fetching list data.");
                    }
                });
            },
            display: {
                displayChange: function (e, $layer, display) {
                    let templateId = $layer.attr('data-post-template-id');
                    if (typeof templateId === 'undefined' || templateId == '0' || $layer.find('.dyn_no_data').length > 0) {
                        return;
                    }
                    let prevDisplay = component["dynamic_cmp_list"].library.display.getDisplay($layer);
                    component["dynamic_cmp_list"].library.display.options[prevDisplay].destroy($layer);
                    $layer.attr('data-display', display);
                    $('.dyncmpDisplaySet').addClass('Dn');
                    $('#' + display + 'Setting').removeClass('Dn');
                    if (e.isTrigger === 'undefined' || !e.isTrigger) {
                        component["dynamic_cmp_list"].library.display.options[display].beforeInit($layer);
                    }
                    component["dynamic_cmp_list"].library.display.options[display].init($layer);
                    //setup settings after init, since settings read dom
                    component["dynamic_cmp_list"].library.display.options[display].setupSettings();
                },
                getDisplay: function ($layer) {
                    let display = $layer.attr('data-display');
                    if (typeof display === 'undefined' || component["dynamic_cmp_list"].library.display.options[display] === 'undefined') {
                        display = 'list';
                    }
                    return display;
                },
                display: function ($layer) {
                    let display = component["dynamic_cmp_list"].library.display.getDisplay($layer);
                    component["dynamic_cmp_list"].library.display.options[display].init($layer);
                },
                options: {
                    accordion: {
                        name: 'Accordion',
                        enabled: false,
                        DOM: EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic_accordion'),
                        responsiveDOM: EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic_accordion'),
                        init: function ($layer) {
                            let $wrapper = $layer.find('.dynamicComponentListWrap');
                            let d = ViewDeviceAlpha();
                            this.library.resize(d, $wrapper, $layer);
                        },
                        beforeInit: function ($layer) {
                            let $wrapper = $layer.find('.dynamicComponentListWrap');
                            let $items = $wrapper.find('.dynamicComponentListItem');
                            let listClasses = [];
                            let $item = $items.first();
                            if ($item) {
                                let sfPat = /\b([a-z]?)sfCol_([0-9]{1,3})\b/g;
                                let gPat = /\b([a-z]?)gP([a-z])-([0-9]{1,3})\b/g;
                                listClasses = $item.attr('class').match(sfPat) || [];
                                let gutterClasses = $item.attr('class').match(gPat) || [];
                                $.merge(listClasses, gutterClasses);
                            }

                            $layer.attr('data-list-classes', listClasses.join(' '));
                            $items.removeClass(listClasses.join(' '));
                            this.library.fixDOM($wrapper, $items);
                        },
                        resize: function (d, $listWrapper, $dataHolder) {
                            this.library.resize(d, $listWrapper, $dataHolder);
                        },
                        setupSettings: function () {
                            $('#displaySetting').off().empty().html(this.DOM);
                            let apiResponse = $activeDOM.data('apiResponse');
                            console.log('apiResponse ', apiResponse);
                            if (typeof apiResponse !== 'undefined' && apiResponse.length > 0) {
                                try {
                                    let data = JSON.parse(apiResponse[0].JsonData);
                                    let txtFlds = data.filter(function (i) {
                                        return i.type == 'text';
                                    });
                                    let titleOptions = ['<option value="">Choose Field</option>'];
                                    $.each(txtFlds, function (i, o) {
                                        titleOptions.push("<option value='" + o.name + "'>" + o.label + "</option>");
                                    });
                                    $('#accTitleField').html(titleOptions.join(''));
                                } catch (e) {
                                    //
                                }
                            }
                            let $listWrapper = $activeDOM.find('.accordianWrap');
                            let $items = $activeDOM.find('.acordianItem');
                            $('#accTitleField').off('change').on('change', function () {
                                let v = $(this).val();
                                $listWrapper.attr('data-acctitlefld', v);
                                component["dynamic_cmp_list"].library.display.options.accordion.library.setAccordionTitle($activeDOM, $items, v);
                            });
                        },
                        setupResponsiveSettings: function () {
                            //$('#cmpListBasicSetRes').off().empty().html(this.responsiveDOM);
                            //console.log('apiResponse ', $activeDOM.data('apiResponse'));
                        },
                        destroy: function ($layer) {
                            let $listWrapper = $layer.find('.dynamicComponentListWrap');
                            let $items = $listWrapper.find('.dynamicComponentListItem');
                            $.each($items, function (i, el) {
                                $listWrapper.append($(el));
                            });
                            $listWrapper.find('.acordianItem').remove();
                            $listWrapper.removeClass('accordianWrap');
                        },
                        library: {
                            fixDOM: function ($listWrapper, $items) {
                                if ($listWrapper.find('.accordianTitle').length > 0) {
                                    return;
                                }
                                let accTitleTmp = `<div class="accordianTitle sfCol_100 edit-border TxAl-l mTxAl-l Mb-0 Mt-0 tPr-5 tPl-5 tPb-10 tPt-10 tMb-0 tMt-0 mPr-5 mPl-5 mPb-10 mPt-10 mMb-0 mMt-0 ff-montserrat f-weight-400 Pt-0 Pb-0 Pl-20 Pr-20 tTxAl-l active" style="cursor: pointer; background-color: rgb(36, 175, 178); border-radius: 0px; border-style: solid; border-width: 0px 0px 2px; border-bottom-color: rgb(212, 212, 212); justify-content: center;">
			<div class="accordian-icon display-inline-block" style="width: 20px; height: 20px; display: inline-block; vertical-align:top;">
				<div class="dis-table" style="display:table;">
					<div class="dis-table-cell TxAl-c tTxAl-c mTxAl-c" style="display:table-cell;vertical-align:middle;">
						<i class="onhovercolor fa fa-heart" style="font-size: 15px; color: rgb(255, 255, 255);"></i>
					</div>
				</div>
			</div>
			<div class="accordian-head edit-border display-inline-block" style="min-width:15px; display:inline-block; vertical-align:top;">
				<h2 class="Mb-0 tMb-0 mMb-0 mFs-14 Fs-17 ff-montserrat f-weight-400 txU Lh-54 tFs-16 tLh-26 mLh-24" style="color: rgb(255, 255, 255); margin: 0px;">Title</h2>
			</div>
			<div class="accordian-icon static float-right" style="display: block; width: 20px; height: 20px; float:right;">
				<div class="dis-table" style="display:table;">
					<div class="dis-table-cell TxAl-c tTxAl-c mTxAl-c" style="display:table-cell;vertical-align:middle;">
						<i class="onhovercolor fa fa-chevron-up" style="font-size: 15px; color: rgb(255, 255, 255);"></i>
					</div>
				</div>
			</div>
		</div>`;
                                $listWrapper.addClass('accordianWrap');
                                $listWrapper.attr("data-activecolor", "rgba(36, 175, 178, 1)");
                                $listWrapper.attr("data-hovercolor", "rgba(0, 0, 0, 1)");
                                $listWrapper.attr("data-titlebgcolor", "rgba(109, 109, 109, 1)");
                                $listWrapper.attr("data-titlecolor", "rgba(247, 247, 247, 1)");
                                $listWrapper.attr("data-iconcolor", "rgba(255, 255, 255, 1)");
                                $listWrapper.attr("data-activetitle", "rgba(255, 255, 255, 1)");
                                $listWrapper.attr("data-activeicon", "rgba(255, 255, 255, 1)");
                                $.each($items, function (i, el) {
                                    let accTitle = $(accTitleTmp).find('.accordian-head > h2').text('Item ' + i).end().wrapAll('<div />').parent().html();
                                    $(el).wrapAll("<div class='acordianItem edit-border sfCol_100'>").before($(accTitle)).wrapAll("<div class='acordianContent sfCol_100'>");
                                });
                                //console.log('apiResponse ' , $listWrapper.closest('.dynamic-component-list').data('apiResponse'));
                            },
                            setAccordionTitle: function ($layer, $items, field) {
                                let apiResponse = $layer.data('apiResponse');
                                $.each($items, function (i, el) {
                                    let postDataID = $(el).find('.dynamicComponentListItem').attr('data-postdata-id');
                                    let data = apiResponse.find(function (x) {
                                        return x.PostDataId == postDataID;
                                    });
                                    if (typeof data !== 'undefined' && data) {
                                        let jsonData = JSON.parse(data.JsonData);
                                        let title = jsonData.find(function (y) {
                                            return y.name == field;
                                        });
                                        if (typeof title !== 'undefined') {
                                            $(el).find('.accordian-head > h2').text(title.value);
                                        } else {
                                            $(el).find('.accordian-head > h2').text('Item ' + i);
                                        }
                                    }
                                });
                            },
                            resize: function (d, $listWrapper, $layer) {
                                let $items = $layer.find('.dynamicComponentListItem');
                                let titleField = $listWrapper.attr('data-acctitlefld');
                                this.fixDOM($listWrapper, $items);
                                let accItems = $layer.find('.acordianItem');
                                this.setAccordionTitle($layer, accItems, titleField);
                                this.initAccordion();
                            },
                            initAccordion: function () {
                                let AccorSpeed = 500;
                                $('.accordianTitle').off('click').on('click', function () {
                                    let $this = $(this);

                                    let $thisParent = $this.closest('.accordianWrap').eq(0);
                                    let AccorItems = $thisParent.find('>.acordianItem');
                                    AccorItems.find('>.accordianTitle.active').css('background-color', $thisParent.attr('data-titlebgcolor'));
                                    AccorItems.find('>.accordianTitle.active h2').css('color', $thisParent.attr('data-titlecolor'));
                                    AccorItems.find('>.accordianTitle.active .accordian-icon .dis-table i').css('color', $thisParent.attr('data-iconcolor'));
                                    AccorItems.find('>.accordianTitle.active').next('.acordianContent').slideUp(AccorSpeed);
                                    AccorItems.find('>.accordianTitle .accordian-icon.static .dis-table i').removeClass('fa-chevron-up').addClass('fa-chevron-down');
                                    AccorItems.find('>.accordianTitle').removeClass('active');
                                    let activeAcor = $this.next('.acordianContent');
                                    if (activeAcor.is(":hidden")) {
                                        $this.addClass('active');
                                        $this.find('.accordian-icon.static .dis-table i').removeClass('fa-chevron-down').addClass('fa-chevron-up');
                                        $this.css('background-color', $thisParent.attr('data-activecolor'));
                                        $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                                        $this.find('.accordian-icon .dis-table i').css('color', $thisParent.attr('data-activeicon'));
                                        activeAcor.slideDown(AccorSpeed);
                                    } else {
                                        $this.removeClass('active');
                                        activeAcor.slideUp(AccorSpeed);
                                    }
                                });
                                $('.accordianTitle').off('mouseover mouseout').on('mouseover mouseout', function (evt) {
                                    let $this = $(this);
                                    let $thisParent = $this.parents('.accordianWrap').eq(0);
                                    if (evt.type == 'mouseover') {
                                        $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                                        $this.find('.accordian-icon i').css('color', $thisParent.attr('data-activeicon'));
                                        $this.css('background-color', $thisParent.attr('data-hovercolor'));
                                    } else if (evt.type == "mouseout") {
                                        if ($this.hasClass('active')) {
                                            $this.find('h2').css('color', $thisParent.attr('data-activetitle'));
                                            $this.find('.accordian-icon .dis-table i').css('color', $thisParent.attr('data-activeicon'));
                                            $this.css('background-color', $thisParent.attr('data-activecolor'));

                                        } else {
                                            $this.find('h2').css('color', $thisParent.attr('data-titlecolor'));
                                            $this.find('.accordian-icon  i').css('color', $thisParent.attr('data-iconcolor'));
                                            $this.css('background-color', $thisParent.attr('data-titlebgcolor'));
                                        }
                                    }
                                });
                            }
                        }
                    },
                    list: {
                        name: 'List',
                        enabled: true,
                        DOM: EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic_list'),
                        responsiveDOM: EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic_res_list'),
                        init: function ($layer) {
                            //
                        },
                        beforeInit: function ($layer) {
                            let $wrapper = $layer.find('.dynamicComponentListWrap');
                            let $items = $wrapper.find('.dynamicComponentListItem');
                            let classes = $layer.attr('data-list-classes');
                            if (typeof classes !== 'undefined') {
                                let sfPat = /\b([a-z]?)sfCol_([0-9]{1,3})\b/g;
                                let gPat = /\b([a-z]?)gP([a-z])-([0-9]{1,3})\b/g;
                                $items.removeClass(function (index, className) {
                                    return (className.match(sfPat) || []).join(' ');
                                }).removeClass(function (index, className) {
                                    return (className.match(gPat) || []).join(' ');
                                }).addClass(classes);
                            }
                        },
                        resize: function (d, $slider, $dataHolder) {
                            $dataHolder.removeAttr('data-list-classes');
                        },
                        setupSettings: function () {
                            $('#displaySetting').off().empty().html(this.DOM);
                            $("#itemPerRow").off().AdvanceItemsPerRow({
                                targetParent: $activeDOM,
                                targetElem: '.dynamicComponentListItem',
                                callback: function (itemperrow) {
                                    itemGutter(itemperrow);
                                }
                            });
                            let itemperrow = $('#itemPerRow').find('select option:selected').text();
                            itemGutter(itemperrow);
                            function itemGutter(itemperrow) {
                                $("#itemGutter").off().AdvanceGutterSpace({
                                    targetParent: $activeDOM,
                                    targetElem: '.dynamicComponentListItem',
                                    itemsperrow: itemperrow
                                });
                            }
                        },
                        setupResponsiveSettings: function () {
                            $('#cmpListBasicSetRes').off().empty().html(this.responsiveDOM);
                            $("#resItemPerRow").off().AdvanceItemsPerRow({
                                targetParent: $activeDOM,
                                targetElem: '.dynamicComponentListItem',
                                callback: function (itemperrow) {
                                    itemGutter(itemperrow);
                                }
                            });
                            let itemperrow = $('#resItemPerRow').find('select option:selected').text();
                            itemGutter(itemperrow);
                            function itemGutter(itemperrow) {
                                $("#itemGutter").off().AdvanceGutterSpace({
                                    targetParent: $activeDOM,
                                    targetElem: '.dynamicComponentListItem',
                                    itemsperrow: itemperrow
                                });
                            }
                        },
                        destroy: function ($layer) {
                            //
                        }
                    },
                    slider: {
                        name: 'Slider',
                        enabled: true,
                        DOM: EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic_slider'),
                        responsiveDOM: EasyLibrary.ReadDOM('dynamic_cmp/list_setting_basic_res_slider'),
                        arrows: {
                            1: {
                                id: 1,
                                prev: '<div class="slick-prev cs-arrow-s1" aria-label="Previous" type="button">Previous</div>',
                                next: '<div class="slick-next cs-arrow-s1" aria-label="Next" type="button">Next</div>'
                            },
                            2: {
                                id: 2,
                                prev: '<div class="slick-prev cs-arrow-s2" aria-label="Previous" type="button">Previous</div>',
                                next: '<div class="slick-next cs-arrow-s2" aria-label="Next" type="button">Next</div>'
                            },
                            3: {
                                id: 3,
                                prev: '<div class="slick-prev cs-arrow-s3" aria-label="Previous" type="button">Previous</div>',
                                next: '<div class="slick-next cs-arrow-s3" aria-label="Next" type="button">Next</div>'
                            },
                            4: {
                                id: 4,
                                prev: '<div class="slick-prev cs-arrow-s4" aria-label="Previous" type="button">Previous</div>',
                                next: '<div class="slick-next cs-arrow-s4" aria-label="Next" type="button">Next</div>'
                            },
                            5: {
                                id: 5,
                                prev: '<div class="slick-prev cs-arrow-s5" aria-label="Previous" type="button">Previous</div>',
                                next: '<div class="slick-next cs-arrow-s5" aria-label="Next" type="button">Next</div>'
                            },
                            6: {
                                id: 6,
                                prev: '<div class="slick-prev cs-arrow-s6" aria-label="Previous" type="button">Previous</div>',
                                next: '<div class="slick-next cs-arrow-s6" aria-label="Next" type="button">Next</div>'
                            }
                        },
                        init: function ($layer) {
                            let $wrapper = $layer.find('.dynamicComponentListWrap');
                            let d = ViewDeviceAlpha();
                            this.library.resize(d, $wrapper, $layer);
                        },
                        beforeInit: function ($layer) {
                            let $wrapper = $layer.find('.dynamicComponentListWrap');
                            let $items = $wrapper.find('.dynamicComponentListItem');
                            let listClasses = [];
                            let $item = $items.first();
                            if ($item) {
                                let sfPat = /\b([a-z]?)sfCol_([0-9]{1,3})\b/g;
                                let gPat = /\b([a-z]?)gP([a-z])-([0-9]{1,3})\b/g;
                                listClasses = $item.attr('class').match(sfPat) || [];
                                let gutterClasses = $item.attr('class').match(gPat) || [];
                                $.merge(listClasses, gutterClasses);
                            }

                            $layer.attr('data-list-classes', listClasses.join(' '));
                            $items.removeClass(listClasses.join(' '));
                        },
                        resize: function (d, $slider, $dataHolder) {
                            this.library.resize(d, $slider, $dataHolder);
                        },
                        library: {
                            toggleAdaptiveHeightCls: function ($slider, adaptive, d, height) {
                                let self = this;
                                if (adaptive) {
                                    self.removeHeightClass($slider);
                                } else {
                                    self.addHeightClass(d, $slider, height);
                                }
                            },
                            addHeightClass: function (d, $slider, height) {
                                let $slides = $slider.find('.dynamicComponentListItem');
                                //let $editorCols = $slider.find('.dynamicComponentListItem > .webEditorCol');
                                $slides.addClass(d + 'H-' + height);
                                //$editorCols.addClass(d + 'H-' + height);
                            },
                            removeHeightClass: function ($slider) {
                                let $slides = $slider.find('.dynamicComponentListItem');
                                //let $editorCols = $slider.find('.dynamicComponentListItem > .webEditorCol');
                                RemoveClassByPattern($slides, 'H-[0-9]{1,4}');
                                //RemoveClassByPattern($editorCols, 'H-[0-9]{1,4}');
                            },
                            getArrowStyleJSON: function ($dataHolder) {
                                let arrow_json = {
                                    id: 1,
                                    top: 50,
                                    side: 25,
                                    //bgcolor: 'rgba(236, 228, 76, 1)',
                                    bgcolor: '#1fb6ff',
                                    color: '#ffffff',
                                    posCls: 'cs-arrow-pos-1'
                                };
                                let arrow_data = $dataHolder.attr('data-arrowstyle');
                                if (typeof arrow_data != 'undefined') {
                                    try {
                                        let tmp = JSON.parse(arrow_data);
                                        arrow_json = tmp;
                                        if (typeof tmp.id === 'undefined') {
                                            arrow_json.id = 1;
                                        }
                                    } catch (e) {
                                        console.error("Slider: Error in arrow data");
                                    }
                                }
                                return arrow_json;
                            },
                            getArrowStyle: function ($dataHolder) {
                                let self = component["dynamic_cmp_list"].library.display.options.slider;
                                let arrow_json = self.library.getArrowStyleJSON($dataHolder);
                                if (typeof self.arrows[arrow_json.id] === 'undefined') {
                                    arrow_json.id = 1;
                                }
                                let arrow = self.arrows[arrow_json.id];
                                let cssTextPrev = [];
                                let cssTextNext = [];
                                if (typeof arrow_json.top !== 'undefined') {
                                    //cssTextPrev.push('top: ' + arrow_json.top + '% !important;');
                                    //cssTextNext.push('top: ' + arrow_json.top + '% !important;'); 
                                }
                                if (typeof arrow_json.side !== 'undefined') {
                                    //cssTextPrev.push('left: ' + arrow_json.side + 'px !important;');
                                    //cssTextNext.push('right: ' + arrow_json.side + 'px !important;');
                                }
                                if (typeof arrow_json.bgcolor !== 'undefined' && arrow_json.bgcolor) {
                                    arrow.bgcolor = arrow_json.bgcolor;
                                    cssTextPrev.push('background-color: ' + arrow_json.bgcolor + ' !important;');
                                    cssTextNext.push('background-color: ' + arrow_json.bgcolor + ' !important;');
                                }
                                if (typeof arrow_json.color !== 'undefined' && arrow_json.color) {
                                    arrow.color = arrow_json.color;
                                    cssTextPrev.push('color: ' + arrow_json.color + ' !important;');
                                    cssTextNext.push('color: ' + arrow_json.color + ' !important;');
                                }
                                if (cssTextPrev.length > 0) {
                                    arrow.prev = $(arrow.prev).css('cssText', cssTextPrev.join(' ')).wrapAll('<div />').parent().html();
                                }
                                if (cssTextNext.length > 0) {
                                    arrow.next = $(arrow.next).css('cssText', cssTextNext.join(' ')).wrapAll('<div />').parent().html();
                                }
                                //pos class
                                arrow.prev = $(arrow.prev)
                                    .removeClass(function (index, className) {
                                        return (className.match(/\bcs-arrow-pos-([0-9]+)\b/g) || []).join(' ');
                                    })
                                    .addClass(arrow_json.posCls).wrapAll('<div />').parent().html();
                                arrow.next = $(arrow.next)
                                    .removeClass(function (index, className) {
                                        return (className.match(/\bcs-arrow-pos-([0-9]+)\b/g) || []).join(' ');
                                    })
                                    .addClass(arrow_json.posCls).wrapAll('<div />').parent().html();
                                return arrow;
                            },
                            getDefaultOptions: function () {
                                return {
                                    infinite: false,//causes issue with videos
                                    dots: true,
                                    arrows: true,
                                    fade: false,
                                    slidesToShow: 1,
                                    slidesToScroll: 1,
                                    autoplay: true,
                                    autoplaySpeed: 5000,
                                    touchMove: true,
                                    adaptiveHeight: true,
                                    dotsClass: 'slick-dots cs-dots-pos-1'
                                };
                            },
                            getUserOptions: function ($dataHolder) {
                                let opt = {};
                                let infinite = $dataHolder.attr('data-infinite');
                                let arrows = $dataHolder.attr('data-arrows');
                                let dots = $dataHolder.attr('data-dots');
                                let fade = $dataHolder.attr('data-fade');
                                let autoplay = $dataHolder.attr('data-autoplay');
                                let autoplayspeed = $dataHolder.attr('data-autoplayspeed');
                                let perview = DeviceItemPerView($dataHolder.attr('data-perview'));
                                let slidescroll = DeviceItemPerView($dataHolder.attr('data-slidescroll'));
                                let adaptiveheight = $dataHolder.attr('data-adaptiveheight');
                                let dotsclass = $dataHolder.attr('data-dotsclass');
                                let dotsBGColor = $dataHolder.attr('data-dotsbgcolor');
                                let dotsPosCls = $dataHolder.attr('data-dotsposclass');
                                if (typeof infinite !== 'undefined') {
                                    opt.infinite = !!+infinite;
                                }
                                if (typeof arrows !== 'undefined') {
                                    opt.arrows = !!+arrows;
                                }
                                if (typeof dots !== 'undefined') {
                                    opt.dots = !!+dots;
                                }
                                if (typeof fade !== 'undefined') {
                                    opt.fade = !!+fade;
                                }
                                if (typeof autoplay !== 'undefined') {
                                    opt.autoplay = !!+autoplay;
                                }
                                if (typeof autoplayspeed !== 'undefined') {
                                    opt.autoplaySpeed = +autoplayspeed;
                                }
                                if (typeof perview !== 'undefined') {
                                    opt.slidesToShow = +perview;
                                }
                                if (typeof slidescroll !== 'undefined') {
                                    opt.slidesToScroll = +slidescroll;
                                }
                                if (typeof adaptiveheight !== 'undefined') {
                                    opt.adaptiveHeight = !!+adaptiveheight;
                                }
                                if (typeof dotsclass !== 'undefined') {
                                    opt.dotsClass = dotsclass;
                                }
                                let arrowStyle = this.getArrowStyle($dataHolder);
                                opt.prevArrow = arrowStyle.prev;
                                opt.nextArrow = arrowStyle.next;
                                //dots color
                                let customPaging = '<button type="button" class="cs-slick-dots-btn" />';
                                if (typeof dotsBGColor !== 'undefined') {
                                    customPaging = $(customPaging).css('background-color', dotsBGColor).wrapAll('<div />').parent().html();
                                }
                                if (typeof dotsPosCls !== 'undefined') {
                                    if (typeof opt.dotsClass === 'undefined') {
                                        opt.dotsClass = 'slick-dots ' + dotsPosCls;
                                    } else {
                                        opt.dotsClass += ' ' + dotsPosCls;
                                    }
                                }
                                opt.customPaging = function (slider, i) {
                                    return $(customPaging).text(i + 1);
                                };
                                return opt;
                            },
                            resetSlider: function ($slider, options) {
                                this.unSlick($slider);
                                this.initSlider($slider, options);
                            },
                            initSlider: function (elem, userOptions) {
                                let self = this;
                                let isEdit = $('.SetHdlr').length > 0;
                                let options = self.getDefaultOptions();
                                if (typeof userOptions !== 'undefined') {
                                    options = $.extend(options, userOptions);
                                }
                                if (isEdit) {
                                    //options.touchMove = false;
                                    //options.autoplay = false;
                                }
                                if (options.fade) {
                                    options.slidesToShow = 1;
                                    options.slidesToScroll = 1;
                                }
                                //fix boolean and integer type
                                options.arrows = !!+options.arrows;
                                options.dots = !!+options.dots;
                                options.infinite = !!+options.infinite;
                                options.fade = !!+options.fade;
                                options.touchMove = !!+options.touchMove;
                                options.autoplay = !!+options.autoplay;
                                options.autoplaySpeed = +options.autoplaySpeed;
                                options.slidesToShow = +options.slidesToShow;
                                options.slidesToScroll = +options.slidesToScroll;
                                options.adaptiveHeight = !!+options.adaptiveHeight;
                                //fix slidesToShow
                                if ($(elem).find('.dynamicComponentListItem').length == 1) {
                                    options.slidesToShow = 1;
                                }
                                $(elem).slick(options);
                            },
                            unSlick: function (elem) {
                                if ($(elem).hasClass('slick-initialized')) {
                                    try {
                                        $(elem).slick('unslick');
                                    } catch (e) {
                                        $(elem).find('.slick-arrow').remove();
                                        $(elem).find('.slick-dots').remove();
                                        $(elem).find('.cs-slick-dots-btn').closest('ul').remove();
                                        $(elem).append($(elem).find('.slick-slide:not(.slick-cloned)').find('.dynamicComponentListItem'));
                                        $(elem).find('.slick-list').remove();
                                        $(elem).removeClass(function (index, className) {
                                            return (className.match(/\bslick-([a-z0-9\.]+)\b/g) || []).join(' ');
                                        });
                                        $(elem).find('> ul').remove();
                                    }
                                }
                            },
                            getResponsiveSettings: function (d, $dataHolder) {
                                let self = this;
                                let fade = $dataHolder.attr('data-fade');
                                if (typeof fade === 'undefined') {
                                    fade = false;
                                } else {
                                    fade = !!+fade;
                                }
                                let k = self.deviceResolution[d];
                                let res_data = $dataHolder.attr('data-res');
                                let res_json = {};
                                if (typeof res_data !== 'undefined') {
                                    try {
                                        res_json = JSON.parse(res_data);
                                    } catch (e) {
                                        res_json = false;
                                        console.error("Slider: Error in responsive data");
                                    }
                                }
                                if (!res_json || typeof res_json[k] === 'undefined') {
                                    let userOptions = self.getUserOptions($dataHolder);
                                    let defOpts = self.getDefaultOptions();
                                    userOptions = $.extend(defOpts, userOptions);
                                    //res_json[k] = userOptions;
                                    res_json[k] = {};
                                    res_json[k].arrows = userOptions.arrows;
                                    res_json[k].dots = userOptions.dots;
                                    res_json[k].autoplay = userOptions.autoplay;
                                    res_json[k].autoplaySpeed = userOptions.autoplaySpeed;
                                    res_json[k].slidesToShow = userOptions.slidesToShow;
                                    res_json[k].slidesToScroll = userOptions.slidesToScroll;
                                    res_json[k].adaptiveHeight = userOptions.adaptiveHeight;
                                } else {
                                    //convert to boolean
                                    res_json[k].arrows = !!+res_json[k].arrows;
                                    res_json[k].dots = !!+res_json[k].dots;
                                    res_json[k].autoplay = !!+res_json[k].autoplay;
                                    res_json[k].adaptiveHeight = !!+res_json[k].adaptiveHeight;
                                }
                                res_json[k].fade = fade;
                                return res_json;
                            },
                            resize: function (d, $slider, $dataHolder) {
                                let self = this;
                                let userOptions = self.getUserOptions($dataHolder);
                                if (d.length > 0 && (d == 't' || d == 'm')) {
                                    let resSet = self.getResponsiveSettings(d, $dataHolder);
                                    let options = resSet[self.deviceResolution[d]];
                                    //extend with desktop options for common props
                                    options = $.extend(userOptions, options);
                                    self.resetSlider($slider, options);
                                } else {
                                    self.resetSlider($slider, userOptions);
                                }
                            },
                            deviceResolution: {
                                t: 1023,
                                m: 767,
                            },
                        },
                        setupSettings: function () {
                            $('#displaySetting').off().empty().html(this.DOM);
                            let compCS = component["dynamic_cmp_list"].library.display.options.slider;
                            let $slider = $activeDOM.find('.dynamicComponentListWrap');
                            let $dataHolder = $activeDOM;

                            let $heightElem = $slider.find('.dynamicComponentListItem');
                            let height = GetValueByClassName($heightElem.first(), 'H-[0-9]{1,4}', 'H-');
                            if (height == 0) {
                                height = 400;
                            }
                            AdvanceSageSlider($('#csSliderHeight'), $('#csSliderHeightHandle'), 400, 1000, height, CSHeightChange, $heightElem, 'px');
                            function CSHeightChange(space, $elem) {
                                ReplaceClassByPattern($elem, 'H-[0-9]{1,4}', 'H-' + space);
                                //ReplaceClassByPattern($elem.find('> .webEditorCol'), 'H-[0-9]{1,4}', 'H-' + space);
                                height = space;
                            }
                            let $heightSlider = $('#csSliderHeight').closest('.field-row');

                            loadSettings();
                            basicSettingEvents();

                            function loadSettings() {
                                let userOpts = compCS.library.getUserOptions($dataHolder);
                                let defOpts = compCS.library.getDefaultOptions();
                                let options = $.extend(defOpts, userOpts);
                                if (options.arrows) {
                                    $('#showArrowsCS').prop("checked", true);
                                    $('#arrowsStyleHld').removeClass('Dn');
                                    $('#arrowsPosHld').removeClass('Dn');
                                    $('#arrowsBGHld').removeClass('Dn');
                                    $('#arrowsColorHld').removeClass('Dn');
                                } else {
                                    $('#showArrowsCS').prop("checked", false);
                                    $('#arrowsStyleHld').addClass('Dn');
                                    $('#arrowsPosHld').addClass('Dn');
                                    $('#arrowsBGHld').addClass('Dn');
                                    $('#arrowsColorHld').addClass('Dn');
                                }
                                if (options.dots) {
                                    $('#showDotsCS').prop("checked", true);
                                    $('#dotsStyleHld').removeClass('Dn');
                                    $('#dotsColorHld').removeClass('Dn');
                                    $('#dotsPosHld').removeClass('Dn');
                                } else {
                                    $('#showDotsCS').prop("checked", false);
                                    $('#dotsStyleHld').addClass('Dn');
                                    $('#dotsColorHld').addClass('Dn');
                                    $('#dotsPosHld').addClass('Dn');
                                }
                                if (options.fade) {
                                    $('#transitionCS').val("fade");
                                    $('#fadeTranMsg').removeClass('Dn');
                                    $('#slidesPerViewCS').closest('.field-row').addClass('Dn');
                                    $('#slidesScrollCS').closest('.field-row').addClass('Dn');
                                } else {
                                    $('#transitionCS').val("slide");
                                    $('#fadeTranMsg').addClass('Dn');
                                    $('#slidesPerViewCS').closest('.field-row').removeClass('Dn');
                                    $('#slidesScrollCS').closest('.field-row').removeClass('Dn');
                                }
                                if (options.autoplay) {
                                    $('#autoPlayCS').prop("checked", true);
                                    $('#autoPlaySpeedCS').closest('.field-row').removeClass('Dn');
                                } else {
                                    $('#autoPlayCS').prop("checked", false);
                                    $('#autoPlaySpeedCS').closest('.field-row').addClass('Dn');
                                }
                                if (options.autoplaySpeed) {
                                    $('#autoPlaySpeedCS').val(options.autoplaySpeed);
                                }
                                if (options.slidesToShow) {
                                    $('#slidesPerViewCS').val(options.slidesToShow);
                                }
                                if (options.slidesToScroll) {
                                    $('#slidesScrollCS').val(options.slidesToScroll);
                                }
                                if (options.adaptiveHeight) {
                                    $('#adaptiveHeightCS').prop("checked", true);
                                    $heightSlider.addClass('Dn');
                                } else {
                                    $('#adaptiveHeightCS').prop("checked", false);
                                    $heightSlider.removeClass('Dn');
                                }
                                if (options.infinite) {
                                    $('#infiniteSliderCS').prop("checked", true);
                                    $('#infiniteSliderMsg').removeClass('Dn');
                                } else {
                                    $('#infiniteSliderCS').prop("checked", false);
                                    $('#infiniteSliderMsg').addClass('Dn');
                                }
                                //dots style
                                let regs = new RegExp('\\bslick-dots-([0-9]+)\\b', 'g');
                                let dStCls = options.dotsClass.match(regs);
                                if (dStCls !== null) {
                                    $('#dotsStyleCS').val(dStCls);
                                }
                                //dots position
                                let regp = new RegExp('\\bcs-dots-pos-([0-9]+)\\b', 'g');
                                let dPosCls = options.dotsClass.match(regp);
                                if (dPosCls !== null) {
                                    $('#dotsPosCS').val(dPosCls);
                                }
                                //dots color
                                let dotsBGColor = $dataHolder.attr('data-dotsbgcolor');
                                if (typeof dotsBGColor === 'undefined') {
                                    //let $slickDots = $activeDOM.find('.slick-dots > li:not(.slick-active) > button');
                                    let $slickDots = $activeDOM.find('.cs-slick-dots-btn');
                                    if ($slickDots.length > 0) {
                                        dotsBGColor = $slickDots.css('background-color');
                                    } else {
                                        dotsBGColor = 'rgb(135, 128, 128)';
                                    }
                                }
                                $('#dotsBGColor').css('background-color', dotsBGColor);
                                //arrows
                                let arrowJSON = compCS.library.getArrowStyleJSON($dataHolder);
                                $('#arrowsStyleCS').val(arrowJSON.id);
                                $('#arrowsBGColor').css('background-color', arrowJSON.bgcolor);
                                $('#arrowsFColor').css('background-color', arrowJSON.color);
                                $('#arrowsPosCS').val(arrowJSON.posCls);
                            }

                            function basicSettingEvents() {
                                $('#showArrowsCS').off('click').on('click', function () {
                                    if ($(this).is(':checked')) {
                                        $dataHolder.attr('data-arrows', 1);
                                        $('#arrowsStyleHld').removeClass('Dn');
                                        $('#arrowsBGHld').removeClass('Dn');
                                        $('#arrowsColorHld').removeClass('Dn');
                                        $('#arrowsPosHld').removeClass('Dn');
                                    } else {
                                        $dataHolder.attr('data-arrows', 0);
                                        $('#arrowsStyleHld').addClass('Dn');
                                        $('#arrowsBGHld').addClass('Dn');
                                        $('#arrowsColorHld').addClass('Dn');
                                        $('#arrowsPosHld').addClass('Dn');
                                    }
                                    resetSlider();
                                });
                                $('#showDotsCS').off('click').on('click', function () {
                                    if ($(this).is(':checked')) {
                                        $dataHolder.attr('data-dots', 1);
                                        $('#dotsStyleHld').removeClass('Dn');
                                        $('#dotsColorHld').removeClass('Dn');
                                        $('#dotsPosHld').removeClass('Dn');
                                    } else {
                                        $dataHolder.attr('data-dots', 0);
                                        $('#dotsStyleHld').addClass('Dn');
                                        $('#dotsColorHld').addClass('Dn');
                                        $('#dotsPosHld').addClass('Dn');
                                    }
                                    resetSlider();
                                });
                                $('#transitionCS').off('change').on('change', function () {
                                    let v = $(this).val();
                                    if (v === "fade") {
                                        $dataHolder.attr('data-fade', 1);
                                        $('#slidesPerViewCS').val(1);
                                        $dataHolder.attr('data-perview', SetDeviceItemPerView($dataHolder.attr('data-perview'), 1));
                                        $('#slidesPerViewCS').closest('.field-row').addClass('Dn');
                                        $('#slidesScrollCS').closest('.field-row').addClass('Dn');
                                        $('#fadeTranMsg').removeClass('Dn');
                                        // OR
                                        //$('#slidesPerViewCS').val(1).trigger("change");
                                    } else {
                                        $dataHolder.attr('data-fade', 0);
                                        $('#slidesPerViewCS').closest('.field-row').removeClass('Dn');
                                        $('#slidesScrollCS').closest('.field-row').removeClass('Dn');
                                        $('#fadeTranMsg').addClass('Dn');
                                    }
                                    resetSlider();
                                });
                                $('#autoPlayCS').off('click').on('click', function () {
                                    if ($(this).is(':checked')) {
                                        $dataHolder.attr('data-autoplay', 1);
                                        $('#autoPlaySpeedCS').closest('.field-row').removeClass('Dn');
                                    } else {
                                        $dataHolder.attr('data-autoplay', 0);
                                        $('#autoPlaySpeedCS').closest('.field-row').addClass('Dn');
                                    }
                                    resetSlider();
                                });
                                $('#autoPlaySpeedCS').off('change').on('change', function () {
                                    let v = $(this).val();
                                    $dataHolder.attr('data-autoplayspeed', v);
                                    resetSlider();
                                });
                                $('#slidesPerViewCS').on('change', function () {
                                    let $this = $(this);
                                    let v = $this.val();
                                    if ($('#transitionCS').val() == "fade" && v > 1) {
                                        SageAlertDialog("Fade transition works only with 1 slide per view.");
                                        $this.val(1);
                                        return;
                                    }
                                    $dataHolder.attr('data-perview', SetDeviceItemPerView($dataHolder.attr('data-perview'), v));
                                    resetSlider();
                                });
                                $('#slidesScrollCS').on('change', function () {
                                    let $this = $(this);
                                    let v = $this.val();
                                    if ($('#transitionCS').val() == "fade" && v > 1) {
                                        SageAlertDialog("Fade transition works only with 1 slide scroll.");
                                        $this.val(1);
                                        return;
                                    }
                                    $dataHolder.attr('data-slidescroll', SetDeviceItemPerView($dataHolder.attr('data-slidescroll'), v));
                                    resetSlider();
                                });
                                $('#adaptiveHeightCS').off('click').on('click', function () {
                                    let adaptive = $(this).is(':checked');
                                    if (adaptive) {
                                        $heightSlider.addClass('Dn');
                                        $dataHolder.attr('data-adaptiveheight', 1);
                                    } else {
                                        $heightSlider.removeClass('Dn');
                                        $dataHolder.attr('data-adaptiveheight', 0);
                                    }
                                    compCS.library.toggleAdaptiveHeightCls($slider, adaptive, '', height);
                                    resetSlider();
                                });
                                $('#infiniteSliderCS').off('click').on('click', function () {
                                    if ($(this).is(':checked')) {
                                        $dataHolder.attr('data-infinite', 1);
                                        $('#infiniteSliderMsg').removeClass('Dn');
                                    } else {
                                        $dataHolder.attr('data-infinite', 0);
                                        $('#infiniteSliderMsg').addClass('Dn');
                                    }
                                    resetSlider();
                                });

                                //dots
                                $('#dotsStyleCS').off('change').on('change', function () {
                                    let v = $(this).val();
                                    $dataHolder.attr('data-dotsclass', v);
                                    resetSlider();
                                });
                                //dots pos
                                $('#dotsPosCS').off('change').on('change', function () {
                                    let v = $(this).val();
                                    $dataHolder.attr('data-dotsposclass', v);
                                    resetSlider();
                                });
                                //arrows
                                $('#arrowsStyleCS').off('change').on('change', function () {
                                    let v = $(this).val();
                                    let arrow_json = compCS.library.getArrowStyleJSON($dataHolder);
                                    arrow_json.id = v;
                                    $dataHolder.attr('data-arrowstyle', JSON.stringify(arrow_json));
                                    resetSlider();
                                });
                                //arrows pos
                                $('#arrowsPosCS').off('change').on('change', function () {
                                    let v = $(this).val();
                                    let arrow_json = compCS.library.getArrowStyleJSON($dataHolder);
                                    arrow_json.posCls = v;
                                    $dataHolder.attr('data-arrowstyle', JSON.stringify(arrow_json));
                                    resetSlider();
                                });
                                //arrow bg color
                                let arrowsColorPickerOpt = ColorPickerOption({
                                    renderCallback: function ($elm, toggled) {
                                        let objColor = RenderCallBackColor(this);
                                        let colorPickerID = $elm.attr('id');
                                        let arrow_json = compCS.library.getArrowStyleJSON($dataHolder);
                                        switch (colorPickerID) {
                                            case 'arrowsBGColor':
                                                $activeDOM.find('.slick-arrow').css('background-color', objColor.bgColor);
                                                arrow_json.bgcolor = objColor.bgColor;
                                                $dataHolder.attr('data-arrowstyle', JSON.stringify(arrow_json));
                                                break;
                                            case 'arrowsFColor':
                                                $activeDOM.find('.slick-arrow').css('color', objColor.bgColor);
                                                arrow_json.color = objColor.bgColor;
                                                $dataHolder.attr('data-arrowstyle', JSON.stringify(arrow_json));
                                                break;
                                            case 'dotsBGColor':
                                                $dataHolder.attr('data-dotsbgcolor', objColor.bgColor);
                                                //$activeDOM.find('.slick-dots > li > button').css('background-color', objColor.bgColor);
                                                $activeDOM.find('.cs-slick-dots-btn').css('background-color', objColor.bgColor);
                                                break;
                                        }
                                    }
                                });
                                $('.arrowsColorPicker').colorPicker(arrowsColorPickerOpt);
                            }

                            function resetSlider() {
                                compCS.library.resetSlider($slider, compCS.library.getUserOptions($dataHolder));
                            }
                        },
                        setupResponsiveSettings: function () {
                            $('#cmpListBasicSetRes').off().empty().html(this.responsiveDOM);
                            let compCS = component["dynamic_cmp_list"].library.display.options.slider;
                            let $slider = $activeDOM.find('.dynamicComponentListWrap');
                            let $dataHolder = $activeDOM;

                            let d = ViewDeviceAlpha();
                            let k = compCS.library.deviceResolution[d];
                            let resSettings = compCS.library.getResponsiveSettings(d, $dataHolder);

                            let $heightElem = $slider.find('.dynamicComponentListItem');
                            let height = GetValueByClassName($heightElem.first(), 'H-[0-9]{1,4}', 'H-');

                            //re-check for adaptive height (it might have been set from desktop settings)
                            if (resSettings[k].adaptiveHeight) {
                                //there should not be height value
                                if (height > 0) {
                                    resSettings[k].adaptiveHeight = false;
                                }
                            }

                            if (height == 0) {
                                height = 400;
                            }
                            AdvanceSageSlider($('#csSliderHeightRes'), $('#csSliderHeightResHandle'), 400, 1000, height, CSHeightChange, $heightElem, 'px');
                            function CSHeightChange(space, $elem) {
                                $slider.find('.slick-list').css('height', '');
                                ReplaceClassByPattern($elem, 'H-[0-9]{1,4}', 'H-' + space);
                                //ReplaceClassByPattern($elem.find('> .webEditorCol'), 'H-[0-9]{1,4}', 'H-' + space);
                                height = space;
                            }

                            let $heightSlider = $('#csSliderHeightRes').closest('.field-row');

                            loadSettings();
                            addEvents();

                            function loadSettings() {
                                if (resSettings[k].arrows) {
                                    $('#showArrowsCSRes').prop("checked", true);
                                } else {
                                    $('#showArrowsCSRes').prop("checked", false);
                                }
                                if (resSettings[k].dots) {
                                    $('#showDotsCSRes').prop("checked", true);
                                } else {
                                    $('#showDotsCSRes').prop("checked", false);
                                }

                                if (resSettings[k].autoplay) {
                                    $('#autoPlayCSRes').prop("checked", true);
                                    $('#autoPlaySpeedCSRes').closest('.field-row').removeClass('Dn');
                                } else {
                                    $('#autoPlayCSRes').prop("checked", false);
                                    $('#autoPlaySpeedCSRes').closest('.field-row').addClass('Dn');
                                }
                                if (resSettings[k].autoplaySpeed) {
                                    $('#autoPlaySpeedCSRes').val(resSettings[k].autoplaySpeed);
                                }
                                if (resSettings[k].slidesToShow) {
                                    $('#slidesPerViewCSRes').val(resSettings[k].slidesToShow);
                                }
                                if (resSettings[k].slidesToScroll) {
                                    $('#slidesScrollCSRes').val(resSettings[k].slidesToScroll);
                                }
                                if (resSettings[k].fade) {
                                    $('#slidesPerViewCSRes').closest('.field-row').addClass('Dn');
                                    $('#slidesScrollCSRes').closest('.field-row').addClass('Dn');
                                }

                                if (resSettings[k].adaptiveHeight) {
                                    $('#adaptiveHeightCSRes').prop("checked", true);
                                    $heightSlider.addClass('Dn');
                                } else {
                                    $('#adaptiveHeightCSRes').prop("checked", false);
                                    $heightSlider.removeClass('Dn');
                                }
                            }

                            function addEvents() {
                                $('#showArrowsCSRes').off('click').on('click', function () {
                                    if ($(this).is(':checked')) {
                                        resSettings[k].arrows = 1;
                                    } else {
                                        resSettings[k].arrows = 0;
                                    }
                                    save();
                                    resetSlider();
                                });
                                $('#showDotsCSRes').off('click').on('click', function () {
                                    if ($(this).is(':checked')) {
                                        resSettings[k].dots = 1;
                                    } else {
                                        resSettings[k].dots = 0;
                                    }
                                    save();
                                    resetSlider();
                                });
                                $('#autoPlayCSRes').off('click').on('click', function () {
                                    if ($(this).is(':checked')) {
                                        resSettings[k].autoplay = 1;
                                        $('#autoPlaySpeedCSRes').closest('.field-row').removeClass('Dn');
                                    } else {
                                        resSettings[k].autoplay = 0;
                                        $('#autoPlaySpeedCSRes').closest('.field-row').addClass('Dn');
                                    }
                                    save();
                                    resetSlider();
                                });
                                $('#autoPlaySpeedCSRes').off('change').on('change', function () {
                                    let v = $(this).val();
                                    resSettings[k].autoplaySpeed = +v;
                                    save();
                                    resetSlider();
                                });
                                $('#slidesPerViewCSRes').on('change', function () {
                                    let $this = $(this);
                                    let v = $this.val();
                                    resSettings[k].slidesToShow = +v;
                                    save();
                                    resetSlider();
                                });
                                $('#slidesScrollCSRes').on('change', function () {
                                    let $this = $(this);
                                    let v = $this.val();
                                    resSettings[k].slidesToScroll = +v;
                                    save();
                                    resetSlider();
                                });

                                $('#adaptiveHeightCSRes').off('click').on('click', function () {
                                    let adaptive = $(this).is(':checked');
                                    if (adaptive) {
                                        $heightSlider.addClass('Dn');
                                        resSettings[k].adaptiveHeight = 1;
                                    } else {
                                        $heightSlider.removeClass('Dn');
                                        resSettings[k].adaptiveHeight = 0;
                                    }
                                    save();
                                    compCS.library.toggleAdaptiveHeightCls($slider, adaptive, d, height);
                                    resetSlider();
                                });
                            }

                            function save() {
                                $dataHolder.attr('data-res', JSON.stringify(resSettings));
                            }

                            function resetSlider() {
                                //extend with desktop options for common props
                                let userOptions = compCS.library.getUserOptions($dataHolder);
                                let options = $.extend(userOptions, resSettings[k]);
                                compCS.library.resetSlider($slider, options);
                            }
                        },
                        destroy: function ($layer) {
                            let $wrapper = $layer.find('.dynamicComponentListWrap');
                            this.library.unSlick($wrapper);
                            $wrapper.find('.dynamicComponentListItem').removeClass(function (i, className) {
                                return (className.match(/\bH-[0-9]{1,4}\b/g) || []).join(' ');
                            });
                        }
                    }
                }
            },
            setDetailPageLink: function ($layer) {
                let detail_anchors = $layer.find('.dyndetail_button > a.com-button, a.dyncmp-detail-link');
                $.each(detail_anchors, function (i, da) {
                    let $anchor = $(da);
                    let id = $anchor.closest('.dynamicComponentListItem').attr('data-postdata-id');
                    let url = $layer.attr('data-post-detail-page');
                    if (typeof url !== 'undefined' && url.length > 0 && typeof id !== 'undefined') {
                        url = url.split(" ").join("-");
                        let redirectTo = WbHostURL + '/' + url + '/' + id;
                        $anchor.attr('href', redirectTo);
                    } else {
                        $anchor.attr('href', 'javascript:void(0)');
                    }
                });
            },
            fillDefaultValues: function (layer) {
                let $targets = $(layer).find('.dyncmpfld');
                if ($targets.length > 0) {
                    $.each($targets, function (i, target) {
                        let $target = $(target);
                        let type = $target.attr('data-dynfldtype');
                        let value = $target.attr('data-default-value');
                        let title = $target.attr('data-title');
                        if (typeof title === 'undefined') {
                            title = "value";
                        }
                        if (typeof value === 'undefined') {
                            value = title;
                        }
                        switch (type) {
                            case 'sageIcon':
                                $target.find('.dyncmpfldval').removeClass(function (index, className) {
                                    return (className.match(/\bfa-([^\s]+)\b/g) || []).join(' ');
                                }).addClass(value);
                                break;
                            case 'text':
                            case 'textarea':
                                $target.find('.dyncmpfldval').text(value);
                                break;
                            case 'checkbox-group':
                            case 'select':
                            case 'radio-group':
                                let _values = JSON.parse(value);
                                let valueObjects = _values.map(function (i) {
                                    return { label: i, value: i, selected: 1 };
                                });
                                component["dynamic_cmp_detail"].library.displayMultipleValues($target, { values: valueObjects });
                                break;
                            case 'richtext':
                                $target.find('.dyncmpfldval').html(value);
                                $target.find('.documenttext').removeAttr('contenteditable');
                                break;
                            case 'sageMedia':
                                $target.find('.dyncmpfldval').attr('src', value).attr('alt', 'No value');
                                break;
                            case 'sageVideo':
                                let $vidHld = $target.find('.dyncmpfldval');
                                let $oldIframe = $vidHld.find('iframe');
                                let attrs = $oldIframe.attrs();
                                $oldIframe.remove();
                                $newIframe = $('<iframe></iframe>');
                                for (let a in attrs) {
                                    $newIframe.attr(a, attrs[a]);
                                }
                                $newIframe.attr('src', value).appendTo($vidHld);
                                break;
                            case 'sageUrl':
                                $target.find('.dyncmpfldval').attr('href', value);
                                break;
                        }
                    });
                }
            },
            fixManageDataLink: function () {
                let dynCmps = $('.dynamic-component-list');
                $.each(dynCmps, function (i, cmp) {
                    let postTypeId = $(cmp).attr('data-post-type-id');
                    let manageUrl = SageFrameHostURL + "/dashboard/Post-Data/" + GetSiteID + "/" + postTypeId;
                    $(cmp).find('.manage-data > a').attr('href', manageUrl);
                });
            },
            beforeItemSettingChange: function ($layer) {
                let $listWrapper = $layer.find('.dynamicComponentListWrap');
                let $listItems = $listWrapper.find('.dynamicComponentListItem');
                if ($listItems.length == 0 || $listItems.find('.dyn_no_data').length > 0) {
                    return;
                }
                let hdnTmp = $listItems.eq(0).clone().addClass('Dn tDn mDn dynamicComponentListItemTmp').removeClass('dynamicComponentListItem Dib tDib mDib').wrapAll('<div>').parent().html();
                $layer.find('.dynamicComponentListItemTmp').remove();
                $layer.append(hdnTmp);
            },
            clearList: function ($layer) {
                $layer.find('.dynamicComponentListWrap').off().empty();
            },
            getOffset: function ($dataHolder) {
                let offset = $dataHolder.attr('data-offset');
                if (typeof offset === 'undefined') {
                    return 0;
                }
                return offset;
            },
            getLimit: function ($dataHolder) {
                let unlimit = $dataHolder.attr('data-unlimit');
                if (typeof unlimit === 'undefined') {
                    unlimit = 0;
                }
                if (unlimit == 1) {
                    return 100;
                }
                let limit = $dataHolder.attr('data-limit');
                if (typeof limit === 'undefined') {
                    return 50;
                }
                return limit;
            },
            appendTemplate: function (cmpName, $appendedParent, $appendLayer, template) {
                if (template != "") {
                    $appendLayer.find('.dynamicComponentListWrap').off().empty();
                    let $listItemTmp = $appendLayer.find('.dynamicComponentListItemTmp');
                    let sfClasses = [];
                    let gutterClasses = [];
                    if ($listItemTmp.length > 0) {
                        let sfPat = /\b([a-z]?)sfCol_([0-9]{1,3})\b/g;
                        let gPat = /\b([a-z]?)gP([a-z])-([0-9]{1,3})\b/g;
                        sfClasses = $listItemTmp.attr('class').match(sfPat) || [];
                        gutterClasses = $listItemTmp.attr('class').match(gPat) || [];
                        template = $(template).removeClass(function (index, className) {
                            return (className.match(sfPat) || []).join(' ');
                        }).addClass(sfClasses.join(' ')).removeClass(function (index, className) {
                            return (className.match(gPat) || []).join(' ');
                        }).addClass(gutterClasses.join(' ')).wrapAll('<div />').parent().html();
                    }
                    $listItemTmp.remove();
                    $appendLayer.append(template);
                }
                component["dynamic_cmp_list"].library.populateData(cmpName, $appendLayer);
            },
            showTemplateChooser: function (cmpName, $appendedParent, $appendLayer) {
                FullPagePopup({
                    data: "Fetching templates. Please wait...",
                    heading: "Choose template",
                    showheading: true,
                    width: "50%",
                    onclose: function ($fullpage) {
                        //
                    }
                });
                let postTypeId = $appendLayer.attr('data-post-type-id');
                let self = this;
                let html = `<div class="field-row stElWrap dynamic-template-chooser col100">
                            <div class="field-row">
                                <div class="field-row stElWrap col100">
                                    <div id="dynamic-templates"></div>
                                    <div class="sfCol_100">
                                        <span class="stngSmallBtn" id="btnDynamicTmp">Done</span>
                                    </div>
                                </div>
                            </div>
                        </div>`;
                $.ajax({
                    url: `${SageFrameHostURL}/Dashboard/DynamicPost/GetAllPostTemplatesByKey`,
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    traditional: true,
                    type: 'POST',
                    data: JSON.stringify({ PostKey: postTypeId, Type: 'list' }),
                    success: function (res) {
                        CloseFullPagePopup();
                        if (!res) {
                            SageAlertDialog("Error fetching templates", "Error")
                            return;
                        }
                        let lst = [];
                        let templateMapper = {
                            '0': ""
                        };
                        //lst.push(`<label><span class="dyn-tmp-choice">
                        //            <img src="/Media/bnr1.jpg" width="100" height="100" />
                        //            <input type="radio" name="deftmp" value="0">Default
                        //        </span></label>`);
                        let postTemplateId = $appendLayer.attr('data-post-template-id');
                        if (typeof postTemplateId === 'undefined') {
                            postTemplateId = '0';
                        }
                        $.each(res, function (i, d) {
                            templateMapper[d.TemplateKey] = d.TemplateViewDom;
                            let checked = "";
                            if (postTemplateId == '0') {
                                postTemplateId = d.TemplateKey;
                            }
                            if (d.TemplateKey == postTemplateId) {
                                checked = " checked='checked'";
                            }
                            let parts = [];
                            parts.push('<label><span class="dyn-tmp-choice">');
                            if (d.Screenshot) {
                                parts.push(`<img src="${d.Screenshot}" alt="${d.TemplateName} screenshot" width="100" height="100" />`);
                            } else {
                                parts.push(`<img src="/Media/bnr1.jpg" alt="${d.TemplateName} screenshot" width="100" height="100" />`);
                            }
                            parts.push(`<input type="radio" name="deftmp" value="${d.TemplateKey}" ${checked}>${d.TemplateName}`);
                            parts.push('</span></label>');
                            lst.push(parts.join(''));
                        });
                        if (lst.length == 0) {
                            let emptymsg = "<p>You have not created any template for this component.</p>";
                            let emptymsg2 = "<p class='dyn_no_tmp'>No template selected.</p>";
                            lst.push(emptymsg);
                            html = $(html).find('#btnDynamicTmp').addClass('Dn').end().wrapAll('<div />').parent().html();
                            $appendLayer.find('.dynamicComponentListWrap').empty().html('<div class="dynamicComponentListItem">' + emptymsg2 + '</div>');
                        }
                        let chData = $(html).find('#dynamic-templates').html(lst.join('')).end().wrapAll('<div />').parent().html();
                        let clickedDone = false;
                        FullPagePopup({
                            data: chData,
                            heading: "Choose template",
                            showheading: true,
                            width: "50%",
                            onclose: function ($fullpage) {
                                if (!clickedDone) {
                                    //
                                }
                            }
                        });
                        $('#btnDynamicTmp').off('click').on('click', function () {
                            clickedDone = true;
                            let tmp = "";
                            let v = $("input:radio[name=deftmp]:checked").val();
                            if (v != '0' && typeof templateMapper[v] !== 'undefined') {
                                let deftemp = templateMapper[v];
                                tmp = $("<div />").html(deftemp).text();
                                tmp = $(tmp).find('.editor-component.dyncmpfld').removeAttr('data-type').end().wrapAll('<div />').parent().html();
                                tmp = '<div class="dynamicComponentListItemTmp Dn tDn mDn sfCol_100 tsfCol_100 msfCol_100">' + tmp + '</div>';
                            }
                            $appendLayer.attr('data-post-template-id', v);
                            self.appendTemplate(cmpName, $appendedParent, $appendLayer, tmp);
                            CloseFullPagePopup();
                        });
                    },
                    error: function (e) {
                        console.log(e);
                    }
                });
            }
        },
        view: {
            view: function (param) {
                let dataType = param['dataType'];
                $('.editor-component[data-type="' + dataType + '"]').each(function () {
                    let $this = $(this);
                    $this.off('click', '.dyndetail_button > .com-button, .dyncmp-detail-link')
                        .on('click', '.dyndetail_button > .com-button, .dyncmp-detail-link', function (e) {
                            if (EditorMode) {
                                return false;
                            }
                            if (e.currentTarget.tagName.toLowerCase() === 'a') {
                                return true;
                            }
                            e.preventDefault();
                            let $btn = $(this);
                            let id = $btn.closest('.dynamicComponentListItem').attr('data-postdata-id');
                            let url = $this.attr('data-post-detail-page');
                            if (typeof url !== 'undefined' && url.length > 0 && typeof id !== 'undefined') {
                                url = url.split(" ").join("-");
                                let redirectTo = WbHostURL + '/' + url + '/' + id;
                                window.location.href = redirectTo;
                            }
                        });
                    $this.off('click', '.dyncmp-url-link')
                        .on('click', '.dyncmp-url-link', function (e) {
                            let href = $(this).attr('href');
                            if (EditorMode || href.length == 0 || href == '#' || href == 'javascript:void(0)') {
                                return false;
                                //e.preventDefault();
                            }
                        });
                });
                let dropped = param['dropped'];
                if (typeof dropped === 'undefined' || !dropped) {
                    let $layer = param['layer'];
                    //if duplicated dynamicComponentListWrap will contain dynamicComponentListItem
                    if (typeof $layer !== 'undefined') {
                        let $listWrapper = $layer.find('.dynamicComponentListWrap');
                        let items = $listWrapper.find('.dynamicComponentListItem');
                        if (items.length > 0) {
                            let display = component["dynamic_cmp_list"].library.display.getDisplay($layer);
                            if (display != 'list') {
                                let d = ViewDeviceAlpha();
                                component["dynamic_cmp_list"].library.display.options[display].resize(d, $listWrapper, $layer);
                            }
                        }
                    }
                }
            }
        },
        resize: function () {
            let self = this;
            let d = ViewDeviceAlpha();
            let $slider = null;
            let $dataHolder = null;
            let $listWrappers = $('.dynamicComponentListWrap');
            $.each($listWrappers, function (i, s) {
                $dataHolder = $(s).closest('.dynamic-component-list');
                let display = component["dynamic_cmp_list"].library.display.getDisplay($dataHolder);
                component["dynamic_cmp_list"].library.display.options[display].resize(d, $(s), $dataHolder);
            });
        }
    }
,    "font icon": {
        "componentname": "font icon",
        "category": "basic",
        "icon": "fa fa-star",
        "row": false,
        "collection": true,
        "type": "element",
        "hidden": false,
        "defaultdata": EasyLibrary.ReadDOM("starter/fonticon/defaultdata"),
        "allFontIconStyles": EasyLibrary.ReadDOM('starter/fonticon/fontIconStyles'),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {
            //let allFontIconStyles = EasyLibrary.ReadDOM('starter/fonticon/fontIconStyles');
            let allFontIconStyles = component["font icon"].allFontIconStyles;
            FullPagePopup({
                data: allFontIconStyles,
                heading: "Font Icon Styles",
                showheading: true,
                width: '40%'
            });

            $('.selectData').off().on('click', function () {
                component['button'].common.copyAttributes($appendLayer, $(this));
                CloseFullPagePopup();
            });
            return 'no data to show';
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) { },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("starter/fonticon/fonticonbasictab"),
                    "onload": function ($item) {
                        var $parent = $activeDOM;
                        var $fontIcon = $parent.find('.font-icon');
                        InitEvents();
                        function InitEvents() {
                            $('.fontIconCollection').html(EasyLibrary.FontCollectionList());
                            FontWrapperSize();
                            FontSize();
                            FontIconColor();
                            SearchFontIcon();
                        }
                        function FontWrapperSize() {
                            component["font icon"].common.fontwrapper();
                        }

                        function FontSize() {
                            component["font icon"].common.fontsize();
                        }

                        function FontIconColor() {
                            $('#fontIconColor').css('background-color', $fontIcon.css('color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $fontIcon.css({ 'color': objColor.bgColor });
                                }
                            });
                            $('#fontIconColor').colorPicker(colorPickerOption);
                        }

                        function SearchFontIcon() {
                            $('#searchIcons').on('keyup', function () {
                                var searchVal = $(this).val();
                                $('.fontIconCollection').find('li').each(function () {
                                    var $this = $(this);
                                    var dataClass = $this.find('i').attr('data-class');
                                    var pos = dataClass.indexOf(searchVal);
                                    if (pos < 0) {
                                        $this.addClass('Dn');
                                    } else {
                                        $this.removeClass('Dn');
                                    }
                                });
                            });
                            var fontClasses = $fontIcon.attr('class').replace('fa ', '').replace('onhovercolor', '').replace('font-icon', '').trim();
                            $('.fontIconCollection').find('li i[data-class="' + fontClasses + '"]').parent().addClass('selected');
                            $('.fontIconCollection').find('li').on('click', function () {
                                let chooseClass = $(this).find('i').attr('data-class');
                                let parentClasses = $fontIcon.attr('class');
                                let regex = new RegExp('fa-[a-z]{1,20}((-)[a-z]{0,20}){0,10}', 'g');
                                let classes = parentClasses.match(regex);
                                if (classes !== null) {
                                    $fontIcon.removeClass(classes[0]);
                                }
                                $fontIcon.addClass(chooseClass);
                                $('.fontIconCollection').find('li').removeClass('selected');
                                $(this).addClass('selected');
                            });
                        }
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }

                },
                "Hover Effect": {
                    "options": {
                        "color": ["background", "text"],
                        "shadow": "on",
                        "border": {
                            "max": 20,
                            "min": 0,
                            "times": 1,
                            "position": ["all", "top", "right", "bottom", "left"],
                            "selectLayer": function ($elem) {

                            },
                        },
                        "zoom": "on"
                    },
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $elem.parent().parent();
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 200,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"],
                    }
                },
                "Box Shadow": {
                    "options": ["all", "color", "zoom", "Inherit"]
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Font Size": {
                            "DOM": CreateSliderDOM('fontIconHeightSlider', 'fontIconHeightHandle', 'Font Size'),
                            "prepend": "true",
                            "onload": function () {
                                component["font icon"].common.fontsize();
                            }
                        },
                        "Icon Wrapper Size": {
                            "DOM": CreateSliderDOM('fontIconbackHeightSlider', 'fontIconbackHeightHandle', 'Icon Wrapper Size'),
                            "prepend": "true",
                            "onload": function () {
                                component["font icon"].common.fontwrapper();
                            }
                        },
                        "Visibility": {}
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "common":
            {
                "fontsize": function () {
                    let $parent = $activeDOM;
                    let $icon = $parent.find('.font-icon');
                    function LineHeightChange(space) {
                        ReplaceClassByPattern($icon, 'Fs-[0-9]{1,4}', 'Fs-' + space);
                    }
                    AdvanceSageSlider($('#fontIconHeightSlider'), $('#fontIconHeightHandle'), 5, 1080, GetValueByClassName($icon, 'Fs-[0-9]{1,4}', 'Fs-'), LineHeightChange, $parent, 'px');
                },
                "fontwrapper": function () {
                    let $parent = $activeDOM;
                    function LineHeightChange(space) {
                        ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + space);
                        ReplaceClassByPattern($parent, 'W-[0-9]{1,4}', 'W-' + space);
                    }
                    AdvanceSageSlider($('#fontIconbackHeightSlider'), $('#fontIconbackHeightHandle'), 5, 1080, GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-'), LineHeightChange, $parent, 'px');
                }
            }
    }
,    "google map": {
        "componentname": "google map",
        "category": "advance",
        "icon": "fa fa-map-marker",
        "row": false,
        "hidden": false,
        "bucket": true,
        "collection": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("googlemapcom"),
        "beforeDrop": function ($this) { },
        "afterdrop": function ($appendedParent, $appendLayer) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("googlemapbasic"),
                    "onload": function ($item) {
                        var $parent = $item.parents('.googlemapContainer');
                        var googleMapUrl = 'https://www.google.com/maps/embed/v1/';
                        var url = '';
                        InitEvent();

                        function InitEvent() {
                            LoadSettings();
                            Events();
                        }

                        function LoadSettings() {
                            var $iframeSrc = $parent.find('iframe');
                            $("#txtMapApiKey").val($iframeSrc.attr("data-key"));
                            var mapType = $iframeSrc.attr("data-type");
                            ChangeType(mapType);
                            $("#slcMapType").val(mapType);
                            $("#txtMapStreet").val($iframeSrc.attr("data-street"));
                            $("#txtMapCity").val($iframeSrc.attr("data-city"));
                            $("#txtMapState").val($iframeSrc.attr("data-state"));
                            $("#txtMapCountry").val($iframeSrc.attr("data-country"));
                            $("#txtMapLongitude").val($iframeSrc.attr("data-longitude"));
                            $("#txtMapLatitude").val($iframeSrc.attr("data-latitude"));
                            $("#slcMapType").trigger("change");
                        }

                        function showViewForm() {
                            $("#divPlace").hide();
                            $("#divLocation").show();
                        }

                        function showPlaceForm() {
                            $("#divLocation").hide();
                            $("#divPlace").show();
                        }

                        function ChangeType(value) {
                            if (value == "place") {
                                showPlaceForm();
                            } else {
                                showViewForm();
                            }
                        }

                        function Events() {
                            $("#slcMapType").on("change", function () {
                                var value = $(this).val();
                                ChangeType(value);
                            });
                            $("#btnGenerateMap").on("click", function () {
                                var apiKey = $("#txtMapApiKey").val();
                                var mapType = $("#slcMapType").val();
                                var type = "";
                                var queryString = '';
                                var mapStreet = '';
                                var mapCity = '';
                                var mapState = '';
                                var mapCountry = '';
                                var longitude = '';
                                var latitude = '';
                                var zoom = 16;
                                var $iframeSrc = $parent.find('iframe');
                                $iframeSrc.attr("data-key", apiKey);
                                $iframeSrc.attr("data-type", mapType);
                                if (mapType == "place") {
                                    type = "place";
                                    mapStreet = $("#txtMapStreet").val().trim();
                                    mapCity = $("#txtMapCity").val().trim();
                                    mapState = $("#txtMapState").val().trim();
                                    mapCountry = $("#txtMapCountry").val().trim();

                                    $iframeSrc.attr("data-street", mapStreet);
                                    $iframeSrc.attr("data-city", mapCity);
                                    $iframeSrc.attr("data-state", mapState);
                                    $iframeSrc.attr("data-country", mapCountry);
                                    $iframeSrc.attr("data-longitude", "");
                                    $iframeSrc.attr("data-latitude", "");
                                    queryString = "q=";
                                    var locationArr = [];
                                    if (mapStreet != "") {
                                        mapStreet = mapStreet.replace(' ', '+');
                                        locationArr.push(mapStreet);
                                    }
                                    if (mapCity != "") {
                                        mapCity = mapCity.replace(' ', '+');
                                        locationArr.push(mapCity);
                                    }
                                    if (mapState != "") {
                                        mapState = mapState.replace(' ', '+');
                                        locationArr.push(mapState);
                                    }
                                    if (mapCountry != "") {
                                        mapCountry = mapCountry.replace(' ', '+');
                                        locationArr.push(mapCountry);
                                    }
                                    queryString = queryString + locationArr.join(',');

                                } else {
                                    type = "view";
                                    longitude = $("#txtMapLongitude").val().trim();
                                    latitude = $("#txtMapLatitude").val().trim();
                                    $iframeSrc.attr("data-street", '');
                                    $iframeSrc.attr("data-city", '');
                                    $iframeSrc.attr("data-state", '');
                                    $iframeSrc.attr("data-country", '');
                                    $iframeSrc.attr("data-longitude", longitude);
                                    $iframeSrc.attr("data-latitude", latitude);
                                    queryString = "center=" + latitude + "," + longitude;
                                    zoom = 10;
                                }
                                url = googleMapUrl + type + "?zoom=" + zoom + "&key=" + apiKey + "&" + queryString;
                                $iframeSrc.attr("src", url);
                            });
                        }
                    }
                },
                "Map Size": {
                    "DOM": EasyLibrary.ReadDOM("youtubeheight"),
                    "onload": function ($item) {
                        component['youtube video'].HeightSlider($activeDOM);
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                    }
                },
                "Help": {
                    "DOM": EasyLibrary.ReadDOM("googlemaphelp"),
                    "onload": function ($item) { }
                }

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "visibility": {},
                        "Heighty": {
                            "custom": true,
                            "DOM": EasyLibrary.ReadDOM("youtubeheight"),
                            "onload": function () {
                                component['youtube video'].HeightSlider($activeDOM);
                            }
                        }
                    },
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },

                    }
                },
            }
        }
    }
,    "heading": {
        "componentname": "heading",
        "category": "basic",
        "icon": "icon icon-heading",
        "row": false,
        "type": "element",
        "hidden": false,
        "collection": true,
        "defaultdata": EasyLibrary.ReadDOM("starter/headingdefaultdata"),
        "afterdrop": function ($appendedParent, $appendLayer) {
            if (typeof ($appendLayer) !== "undefined") {
                var $textChange = $appendLayer.children().not('div').eq(0);
                $textChange.addClass('ff-' + $('#basicFonts').val());
                $textChange.addClass('f-weight-400');
            }
            $appendLayer.find('.editor-para').focus();
        },
        "inherits": "text"
    }
,    "form": {
        "componentname": "form",
        "category": "basic",
        "icon": "fa fa-form",
        "row": false,
        "hidden": true,
        "collection": false,
        "type": "store",
        "defaultdata": '',
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
           
        },
        "onsort": function (ui) { },
        
        "optionsDom": {
            'getDom': '',
            'createOptions': function ($slcID) {
                let html = `<option class="size" data-wrap="editor-component" value="editor-component">Entire Component</option>
                        <option class="size"  data-wrap=".formWrap" value=".formWrap">Form</option>'
                        <option class="size text"  data-wrap=".fmHead" value=".fmHead .hdng">Form Heading</option>'
                        <option class="size"  data-wrap=".fmFld" value = ".fmFld"> Field</option >
                        <option class="size"  data-wrap=".btn-wrap" value=".btn-wrap">Button Field</option>
                        <option class="size text"  data-wrap=".fmLbl" value=".fmLbl label">Label</option>                         
                        <option class="text"  data-wrap="" value=".chkLabel">Checkbox</option>                         
                        <option class="text"  data-wrap="" value=".rdoLabel">Radio Button</option>                         
                        <option class="text" data-wrap=".fmInp" value=".cbvInpTxt">Input Box</option>
                        <option class="text" data-wrap=".fmInp" value=".fmInp .slc">Dropdown</option>                      
                        <option data-wrap=".fmInp" value=".fmInp .chk">Checkbox</option>
                        <option class="size" data-wrap=".fmInp" value=".fmInp">Input Section</option>
                        <option class="text size" data-wrap=".btnFmSave" value=".btnFmSave">${$activeDOM.find('.btnFmSave').text()} button</option>
                        <option class="text size" data-wrap=".btnFmCancel" value=".btnFmCancel">${$activeDOM.find('.btnFmCancel').text()} button</option>`
                $slcID.html(html);
                $.each($slcID.find('option'), function () {
                    let val = $(this).val();
                    if (val !== 'editor-component') {
                        let $targetEle = $activeDOM.find(val);
                        if ($targetEle.length <= 0)
                            $(this).remove();
                    }
                });
                this.getDom = $slcID.html();
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": '<div class="field-row" id="divEnDnField"></div>',
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        let html = '';
                        $parent.find('.fmFld').each(function (i, v) {
                            let $thisEle = $(this);
                            if (typeof $thisEle.attr('data-required') == 'undefined')
                                $thisEle.attr('data-required', 'non');
                            if (typeof $thisEle.attr('data-name') == 'undefined')
                                $thisEle.attr('data-name', $thisEle.find('.fmLbl label').text());
                            html += `<div class="field-row stElWrap col50-50">
                            <label class="fCol">${$thisEle.attr('data-name')}</label>
                            <div class="fCol TxAl-r Dfx">
                                <div class="sfCol_80">
                                <span class="toggle_btn">
                                    <input type="checkbox" data-targetele=".fmFld[data-name='${$thisEle.attr('data-name')}']" class="chkEnDnEle" id="toggleBtn${i}">
                                    <label for="toggleButtonLabel" class="tgl_slider"></label>
                                 </span>
                                 </div>
                                <span class="sfCol_20 TxAl-r"><span  data-targetele=".fmFld[data-name='${$thisEle.attr('data-name')}']" class="cPointer fmFldRequired asterisk ${$thisEle.attr('data-required')}" style="color:rgb(175, 172, 172)"  title="Turn On Required/ Off Required"><i class="fa fa-asterisk"></i></span></span>
                            </div>
                            </div>`
                        });
                        $('#divEnDnField').html(html);
                        $('input.chkEnDnEle').off('change').on('change', function () {
                            let $this = $(this);
                            if ($this.prop('checked'))
                                $parent.find($this.attr('data-targetele')).removeClass('Dn');
                            else
                                $parent.find($this.attr('data-targetele')).addClass('Dn');
                        });
                        $('input.chkEnDnEle').each(function () {
                            let $this = $(this);
                            $this.prop('checked', $($this.attr('data-targetele')).is(":visible"))
                        });
                        $('.fmFldRequired.required').css('color', 'rgb(255, 0, 0)');
                        $('.fmFldRequired').off('click').on('click', function () {
                            let $this = $(this);
                            let target = $parent.find($this.attr('data-targetele'));
                            let input = target.find('input,select');
                            if ($this.hasClass('required')) {
                                target.attr('data-required', 'non');
                                input.attr('data-name', input.attr('name'));
                                input.removeAttr('name');
                                target.find('.fmLbl span').remove();
                                $this.css('color', 'rgb(175, 172, 172)');
                                $this.removeClass('required');
                            } else {
                                target.attr('data-required', 'required');
                                $this.addClass('required');
                                target.find('.fmLbl label').append('<span>*<span>');
                                input.attr('name', input.attr('data-name'));
                                $this.css('color', 'rgb(255, 0, 0)');

                            }
                        });
                    },
                    "active": function () {
                        if (typeof ($activeDOM.attr('data-basic')) === 'undefined' || $activeDOM.attr('data-basic') == 'true') {
                            $('#tabs>ul>li').eq(0).removeClass('Dn');
                        }
                        else {
                            $('#tabs>ul>li').eq(0).addClass('Dn');
                            $('#tabs>ul>li').eq(1).trigger('click');
                        }
                        $('.actEle').removeClass('actEle');
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Spacing on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSpcSettingAplyOn">                                                                                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divSpcSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['form'].optionsDom.createOptions($('#slcSpcSettingAplyOn'));
                        let $parent = $activeDOM;
                        $('#slcSpcSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                InitSpacing($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                InitSpacing(target);
                            }
                        });
                        function InitSpacing(target) {
                            $("#divSpcSetting").AdvanceSpacing({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSpcSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSpcSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Text Setting on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcTxtSettingAplyOn">                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divTxtSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcTxtSettingAplyOn').html(component['form'].optionsDom.getDom);
                        $('#slcTxtSettingAplyOn option').not('.text').remove();
                        let $parent = $activeDOM;
                        $('#slcTxtSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $parent.find(target).addClass('actEle');
                            InitTextSetting(target);
                        });
                        function InitTextSetting(target) {

                            $("#divTxtSetting").AdvanceTextSetting({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    size: true,
                                    lineheight: true,
                                    width: false,
                                    spacing: true,
                                    transform: true,
                                    family: true,
                                    weight: true,
                                    color: true
                                },
                            });
                        }
                    },
                    "active": function () {
                        $('#slcTxtSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcTxtSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Alignment on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcAignmentAplyOn">                                                                                                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divAlignSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcAignmentAplyOn').html(component['form'].optionsDom.getDom);
                        $('#slcAignmentAplyOn option').not('.size').remove();

                        let $parent = $activeDOM;
                        $('#slcAignmentAplyOn').off('change').on('change', function () {
                            let target = $('#slcAignmentAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                initAlignment($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                initAlignment(target);
                            }
                          
                        });
                        function initAlignment(target) {
                            $('#divAlignSetting').AdvanceAlignment({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"],

                                }
                            });

                        }

                    },
                    "active": function () {
                        $('#slcAignmentAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAignmentAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply width on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSizeSettingAplyOn">        
                                     </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divWidthSetting"></div>
                            </div>                                       
                                `,
                    "onload": function ($item) {
                        $('#slcSizeSettingAplyOn').html(component['form'].optionsDom.getDom);
                        $('#slcSizeSettingAplyOn option').not('.size').remove();
                        let $parent = $activeDOM;
                        $('#slcSizeSettingAplyOn').off('change').on('change', function () {
                            let target = $('#slcSizeSettingAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                init($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                init(target);
                            }
                        });
                        function init(target) {
                            $("#divWidthSetting").AdvanceWidthSlider({
                                targetParent: $parent,
                                targetElem: target,
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSizeSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSizeSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Background on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBgAplyOn">                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBgSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['form'].optionsDom.createOptions($('#slcBgAplyOn'));

                        let $parent = $activeDOM;
                        $('#slcBgAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                InitBackground($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                InitBackground(target);
                            }
                        });
                        function InitBackground(target) {

                            $("#divBgSetting").AdvanceBackground({
                                targetParent: $parent,
                                targetElem: target,
                                options: ["color"]
                            });
                        }
                    },
                    "active": function () {

                        $('#slcBgAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBgAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBdrAplyOn">                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBdrSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBdrAplyOn').html(component['form'].optionsDom.getDom);
                        let $parent = $activeDOM;
                        $('#slcBdrAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                Init($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                Init(target);
                            }
                        });
                        function Init(target) {
                            $("#divBdrSetting").AdvanceBorder({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBdrAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBdrAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxRdsAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxRdsSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxRdsAplyOn').html(component['form'].optionsDom.getDom);
                        let $parent = $activeDOM;
                        $('#slcBxRdsAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                Init($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                Init(target);
                            }
                        });
                        function Init(target) {

                            $("#divBxRdsSetting").AdvanceBoxRadius({
                                targetParent: $parent,
                                targetElem: target,
                                "options": {
                                    "max": 200,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBxRdsAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxRdsAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Box Shadow on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxSdoAplyOn">
                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxSdoSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxSdoAplyOn').html(component['form'].optionsDom.getDom);
                        let $parent = $activeDOM;
                        $('#slcBxSdoAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                Init($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                Init(target);
                            }
                        });
                        function Init(target) {
                            $("#divBxSdoSetting").AdvanceBoxShadow({
                                targetParent: $parent,
                                targetElem: target,

                            });
                        }

                    },
                    "active": function () {

                        $('#slcBxSdoAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxSdoAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Hover Effect on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcHoverEftAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divHoverEftAplyOn"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcHoverEftAplyOn').html(component['form'].optionsDom.getDom);
                        $('#slcHoverEftAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                Init($activeDOM);
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                                Init(target);
                            }
                        });
                        function Init(target) {
                            $("#divHoverEftAplyOn").AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "color": ["all", "background", "text"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        }
                    },
                    "active": function () {

                        $('#slcHoverEftAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcHoverEftAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Spacing on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSpcSettingAplyOn">                                                                                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divSpcSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['form'].optionsDom.createOptions($('#slcSpcSettingAplyOn'));
                        let $parent = $activeDOM;
                        $('#slcSpcSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                InitSpacing($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                InitSpacing(target);
                            }
                        });
                        function InitSpacing(target) {
                            $("#divSpcSetting").AdvanceSpacing({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSpcSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSpcSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Text Setting on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcTxtSettingAplyOn">                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divTxtSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcTxtSettingAplyOn').html(component['form'].optionsDom.getDom);
                        $('#slcTxtSettingAplyOn option').not('.text').remove();
                        let $parent = $activeDOM;
                        $('#slcTxtSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $parent.find(target).addClass('actEle');
                            InitTextSetting(target);
                        });
                        function InitTextSetting(target) {

                            $("#divTxtSetting").AdvanceTextSetting({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    size: true,
                                    lineheight: true,
                                    width: false,
                                    spacing: true,
                                    transform: true,
                                    family: true,
                                    weight: true,
                                    color: true
                                },
                            });
                        }
                    },
                    "active": function () {
                        $('#slcTxtSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcTxtSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Alignment on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcAignmentAplyOn">                                                                                                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divAlignSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcAignmentAplyOn').html(component['form'].optionsDom.getDom);
                        $('#slcAignmentAplyOn option').not('.size').remove();

                        let $parent = $activeDOM;
                        $('#slcAignmentAplyOn').off('change').on('change', function () {
                            let target = $('#slcAignmentAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                initAlignment($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                initAlignment(target);
                            }

                        });
                        function initAlignment(target) {
                            $('#divAlignSetting').AdvanceAlignment({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"],

                                }
                            });

                        }

                    },
                    "active": function () {
                        $('#slcAignmentAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAignmentAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply width on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSizeSettingAplyOn">        
                                     </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divWidthSetting"></div>
                            </div>                                       
                                `,
                    "onload": function ($item) {
                        $('#slcSizeSettingAplyOn').html(component['form'].optionsDom.getDom);
                        $('#slcSizeSettingAplyOn option').not('.size').remove();
                        let $parent = $activeDOM;
                        $('#slcSizeSettingAplyOn').off('change').on('change', function () {
                            let target = $('#slcSizeSettingAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target == 'editor-component') {
                                $activeDOM.addClass('actEle');
                                init($activeDOM);
                            } else {
                                $parent.find(target).addClass('actEle');
                                init(target);
                            }
                        });
                        function init(target) {
                            $("#divWidthSetting").AdvanceWidthSlider({
                                targetParent: $parent,
                                targetElem: target,
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSizeSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSizeSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },

        },

    }
,    "holder": {
        "componentname": "holder",
        "category": "basic",
        "icon": "fa fa-briefcase",
        "row": false,
        "hidden": false,
        "type": "element",
        "collection": true,
        'defaultdata': '<div class="editor-component sfFixed holder sfCol_100 tsfCol_100 tDib msfCol_100 mDib">' + EasyLibrary.ReadDOM("holderoption") + '<div class="editor-col ui-state-default sfFixed sfCol_100" style="min-height:100px;"><div class="column-data-empty"><h5 class="Ml-0 Mr-0 Mt-0 Mb-0">This is Holder</h5><p>You can drag and drop components here.</p></div></div></div>',
        "beforedrop": function ($appendedParent, $holder, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {

        },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("holderbasic"),
                    "onload": function ($item) {
                        component["holder"].common.onload();
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                        "vertical": ["top", "middle", "bottom"]
                    },
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $elem.closest(".editor-component");
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["image", "color"],
                    "selectLayer": function ($elem) {
                        return $elem.closest(".editor-component");
                    }
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 50,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow": {
                    "options": {

                    }
                }                
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Basic": {
                            "DOM": EasyLibrary.ReadDOM("holderbasic"),
                            "onload": function ($item) {
                                component["holder"].common.onload();
                            },
                            "prepend": "true"
                        },
                        "Visibility": {}
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                        "vertical": ["top", "middle", "bottom"]
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "common": {
            "$parent": function () {
                return $activeDOM;
            },
            "height": function () {
                let imageHeight = GetValueByClassName(this.$parent(), 'H-(([0-9]{1,4})|a)', 'H-');
                imageHeight = (imageHeight == 0 || imageHeight == "a") ? this.$parent().height() : imageHeight;
                AdvanceSageSlider($('#holderHeightSlider'), $('#holderHeightHandle'), 1, 1080, imageHeight, this.HeightChange, this.$parent(), 'px', this);
            },
            "HeightChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$parent(), 'H-(([0-9]{1,4})|a)', 'H-' + space);
            },
            "SFWidthChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$parent(), 'sfCol_[0-9]{1,3}', 'sfCol_' + space);
            },
            "imagewidth": function () {
                AdvanceSageSlider($('#holderWidthSlider'), $('#holderWidthHandle'), 1, 100, GetValueByClassName(this.$parent(), 'sfCol_[0-9]{1,3}', 'sfCol_'), this.SFWidthChange, this.$parent(), '%', this);
            },
            "onload": function ($item) {
                let _this = this;
                var $parent = $activeDOM;
                Init();
                function Init() {
                    _this.imagewidth();
                    _this.height();
                    $('#refreshHolderHeight').on('click', function () {
                        ReplaceClassByPattern($activeDOM, 'H-(([0-9]{1,4})|a)', 'H-a');
                        var holderheights = $parent.css('height').replace('px', '');
                        holderheights = holderheights == 0 ? 50 : holderheights;
                        ChangeSliderValue($('#holderHeightSlider'), holderheights);
                        //$activeDOM.addClass('H-' + holderheights);
                    });
                }
            }
        }
    }
,    "icon text": {
        "componentname": "icon text",
        "category": "basic",
        "icon": "icon-text-icon-list",
        "row": false,
        "hidden": false,
        "collection": true,
        "bucket": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("iconText/icontext"),
        "beforeDrop": function ($this) { },
        "afterdrop": function ($appendedParent, $appendLayer) { },

        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("orderlistbasic"),
                    "onload": function ($this) {
                        let _thisComp = component["icon text"];
                        let $parent = $this.closest('.editor-component');
                        let dataClass = $parent.find('.ListData').attr('data-class');
                        let showIcon = $parent.find('.ListData').attr('data-showicon');
                        $('#itemsperow').val(dataClass);
                        if (showIcon == "true") {
                            $('#iconshown').show();
                            $('#showListIcon').prop('checked', true);
                        }
                        else {
                            $('#iconshown').hide();
                            $('#showListIcon').prop('checked', false);
                        }
                        InitEvent();
                        Icon();
                        //textSetting();
                        //gutterSpace();
                        _thisComp.common.textSetting();
                        //_thisComp.common.gutterSpace();
                        function InitEvent() {
                            $('#itemsperow').on('change', function () {
                                let $this = $(this);
                                let colClass = $this.val();
                                let $listData = $parent.find('.ListData');
                                let $listDataItem = $listData.find('li');
                                let dataClass = $listData.attr('data-class');
                                $listDataItem.removeClass(dataClass);
                                $listDataItem.addClass(colClass);
                                $parent.find('.ListData').attr('data-class', colClass);
                                //gutterSpace();
                                //_thisComp.common.gutterSpace();

                            });
                            $('#showListIcon').off('change').on('change', function () {
                                if ($(this).is(":checked")) {
                                    $parent.find('.labelIcon').show();
                                    $('#iconshown').show();
                                    $parent.find('.ListData').attr('data-showicon', true);
                                }
                                else {
                                    $parent.find('.labelIcon').hide();
                                    $('#iconshown').hide();
                                    $parent.find('.ListData').attr('data-showicon', false);
                                }

                            });
                            $("#icontextWidth").AdvanceDimension({
                                type: 'sfwidth',
                                targetParent: $activeDOM,
                                targetElem: $activeDOM,
                                label: 'Width',
                                defaultValue: 100,
                            });
                        }
                        function Icon() {
                            let $parent = $this.closest('.editor-component');
                            let backgroundColor = $parent.find('.labelIcon').eq(0).css('color');
                            let fontWidth = $parent.find('.labelIcon').eq(0).css('font-size').replace('px', '');

                            let prevhovereffect = $parent.attr('data-prevhovereffect');
                            if (typeof prevhovereffect !== 'undefined') {
                                let tmpEff = JSON.parse(prevhovereffect);
                                if (tmpEff.font) {
                                    backgroundColor = tmpEff.font;
                                }
                            }

                            $('#chooseFontColorForListIcon').css('background-color', backgroundColor);
                            let colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    let objColor = RenderCallBackColor(this);
                                    $parent.find('.labelIcon').css('color', objColor.bgColor);
                                }
                            });
                            $('#chooseFontColorForListIcon').colorPicker(colorPickerOption);
                            component["icon text"].common.iconsize();
                        }
                    }
                },

                "Data": {
                    "DOM": EasyLibrary.ReadDOM("iconText/icontextdatawrap"),
                    "staticDOM": {
                        linklabelionresetlist: EasyLibrary.ReadDOM("linklabelionresetlist"),
                        linklabelionlist: EasyLibrary.ReadDOM("linklabelionlist")
                    },
                    "onload": function ($this) {
                        let _this = this;
                        let $parent = $this.closest('.editor-component');
                        let eleClasses = '';
                        let eleIndex = -1;
                        InitEvent();
                        function InitEvent() {
                            LoadSettings();
                            FormEvent();
                        }
                        function LoadSettings() {
                            let html = '';
                            $(".iconTextDataWrapper").html('');
                            let defaultIcon = "fa-check";
                            let $iconTextWrap = $parent.find(".iconTextWrap");
                            if ($iconTextWrap.length > 0) {
                                defaultIcon = $iconTextWrap.eq(0).find('i').attr('data-class');
                            }
                            //for changing all font
                            html += '<div class="field-row">';
                            html += '<div class="field-row stElWrap col50-50">';
                            html += '<label class="fCol">Bulk icon change</label>';
                            html += '<span class="fCol TxAl-r">';
                            html += '<i class="in-form-icon fa ' + defaultIcon + '" id="resetlabelicon" data-class="' + defaultIcon + '"></i>';
                            html += '</span>';
                            html += '</div>';
                            html += '</div>';
                            html += '<div id="iconChHolder"></div>';

                            html += '<div class="iconTextContentWrapper field-row Mb-30">';
                            $iconTextWrap.each(function (index, item) {
                                let $labelText = $(this).find('.labelText').text();
                                let className = $(this).find('i').attr('data-class');
                                //let iconClass = $(this).find('i').attr('class');
                                //iconClass = iconClass.replaceAll(/([a-z]?)Fs-([0-9]+)/g, "");
                                //iconClass += " Fs-16 ";
                                html += '<div class="field-row data-row stElWrap col100">';
                                html += '<span class="sfCol_10 TxAl-c"><i class="fa fa-arrows-v iconTextSort"></i></span>';
                                html += '<span class="sfCol_10 TxAl-c"><i class="in-form-icon fa ' + className + ' labelIconEdit iconChooser" data-class="' + className + '"></i></span>';
                                html += '<span class="sfCol_70 cb_input"><input type="text" class="listLabelText required" value="' + $labelText + '" /></span>';
                                html += '<span class="sfCol_10 TxAl-r"><i title="delete" class="in-form-icon fa fa-trash-o delete-icon deleteLabel' + ($iconTextWrap.length > 1 ? '' : ' Dn') + '"></i></span>';
                                html += '</div>';
                            });
                            html += '</div>';
                            $(".iconTextDataWrapper").html(html);
                        }

                        function FormEvent() {
                            LabelSettings();
                            FontIcon();
                            SearchFontIcon();
                            $('#resetlabelicon').on('click', function () {
                                let $iconChHolder = $('#iconChHolder');
                                $('.data-row').find('.hideLabelIcon').trigger('click');
                                let fontHtml = '';
                                fontHtml += '<div class="LinkLabelResetIconList" style="display: none;">';
                                fontHtml += _this.staticDOM.linklabelionresetlist;
                                fontHtml += '</div>';
                                if ($iconChHolder.find('.LinkLabelResetIconList').length == 0)
                                    $iconChHolder.append(fontHtml);

                                FontResetIcon();
                                ResetFontIcon();

                                $iconChHolder.find(".LinkLabelResetIconList").show();
                                $('#fontResetIconCollection').find('li').removeClass('selected');
                                $('#fontResetIconCollection').find('li i[data-class="' + eleClasses + '"]').parent().addClass('selected');


                            });

                            $("#btnAddMoreLabel").off().on("click", function () {
                                $(".hideLabelIcon").trigger("click");
                                let html = '';
                                let $editHtml = '';
                                let $editParent = $(this).parent().parent().find('.iconTextDataWrapper');

                                if ($editParent.find('.data-row').length > 0) {
                                    let $editHtml = '';
                                    let $editParentObj = $editParent.find('.data-row').eq(0).clone();
                                    $editParentObj.find().removeClass('Dn');
                                    let attrClass = $editParentObj.attr('class');
                                    $editHtml += '<div class="' + attrClass + '">';
                                    $editHtml += $editParentObj.html();
                                    $editHtml += '</div>';
                                    $editParent.find('.iconTextContentWrapper').prepend($editHtml);
                                    //let $editRows = $editParent.find('.iconTextContentWrapper > .data-row');
                                    //$editRows.eq($editRows.length - 1).find("input").val($editParentObj.find("input").val());

                                    let $viewHtml = '';
                                    let $viewObj = $parent.find('.iconTextWrap').eq(0);
                                    $viewHtml += '<li class="' + $viewObj.attr("class") + '">';
                                    $viewHtml += $viewObj.html();
                                    $viewHtml += '</li>';
                                    $parent.find('.ListData').prepend($viewHtml);
                                    $("#iconTextEditWrapper .listLabelText:first").val($(".iconTextWrap:first").text().trim());
                                } else {
                                    let dataClass = $('#resetlabelicon').attr('data-class');
                                    let iconClass = 'fa ' + dataClass;
                                    let defaultText = 'your text here';
                                    html += '<div class="field-row data-row stElWrap col100">';
                                    html += '<span class="sfCol_10 TxAl-c"><i class="fa fa-arrows iconTextSort"></i></span>';
                                    html += '<span class="sfCol_10 TxAl-c"><i class="in-form-icon ' + iconClass + ' labelIcon labelIconEdit iconChooser" data-class="' + dataClass + '"></i></span>';
                                    html += '<span class="sfCol_70 cb_input"><input type="text" class="listLabelText required" value="' + defaultText + '" /></span>';
                                    html += '<span class="sfCol_10 TxAl-r"><i title="delete" class="in-form-icon fa fa-trash-o delete-icon deleteLabel Dn"></i></span>';
                                    html += '</div>';
                                    $editParent.find('.iconTextContentWrapper').prepend(html);

                                    let comHtml = '';
                                    comHtml += '<li class="iconTextWrap Mb-10 sfCol_100 sfFixed">';
                                    comHtml += ' <i class="fa onhovercolor labelIcon ' + iconClass + '" style="font-size: 18px; color: rgb(95, 96, 106); margin-right: 5px;" data-class="' + dataClass + '"></i>';
                                    comHtml += ' <label class="labelText" contenteditable="true">' + defaultText + '</label>';
                                    comHtml += '</li>';
                                    $parent.find('.ListData').prepend(comHtml);
                                }
                                $editParent.find('.deleteLabel').removeClass('Dn');
                                LabelSettings();
                                SettingEvents();
                            });
                        }

                        function FontIcon() {
                            $('#labelfontIconCollection').html(EasyLibrary.FontCollectionList());
                        }

                        function LabelSettings() {
                            //sortable
                            $('.iconTextSort').on('mousedown', function () {
                                $('.field-row').find('.hideLabelIcon').trigger('click');
                            });
                            $(".iconTextContentWrapper").AdvanceSorting({
                                targetParent: $parent,
                                targetElem: '.iconTextWrap',
                                sortableOptions: {
                                    items: "div.data-row",
                                    handle: ".iconTextSort",
                                    containment: 'div.iconTextContentWrapper'
                                }
                            });
                            //$(".iconTextContentWrapper").sortable({
                            //    placeholder: "ui-state-highlight",
                            //    items: "div.data-row",
                            //    handle: "i.iconTextSort",
                            //    containment: 'div.iconTextContentWrapper',
                            //    forcePlaceholderSize: true,
                            //    forceHelperSize: true,
                            //    tolerance: "pointer",
                            //    start: function (event, ui) {
                            //        //ui.placeholder.height(ui.item.height());
                            //        $('.field-row').find('.hideLabelIcon').trigger('click');
                            //        ui.item.startPos = ui.item.index();
                            //    },
                            //    stop: function (event, ui) {
                            //        let oldPos = ui.item.startPos;
                            //        let newPos = ui.item.index();
                            //        //console.log("Start position: " + oldPos);
                            //        //console.log("New position: " + newPos);
                            //        if (oldPos != newPos) {
                            //            let $newPosEl = $parent.find('.iconTextWrap').eq(newPos);
                            //            let $oldPosEl = $parent.find('.iconTextWrap').eq(oldPos);
                            //            if (oldPos > newPos) {
                            //                $oldPosEl.insertBefore($newPosEl);
                            //            } else {
                            //                $oldPosEl.insertAfter($newPosEl);
                            //            }
                            //        }
                            //    }
                            //});
                            $(".deleteLabel").off().on("click", function () {
                                let dataClass = $(this).parent().parent().find('.labelIcon').attr('data-class');
                                let index = $('.iconTextContentWrapper').find('.data-row').index($(this).parent().parent());
                                $parent.find('.iconTextWrap').eq(index).remove();
                                $(this).parent().parent().remove();
                                if ($('.iconTextContentWrapper').find('.data-row').length == 1) {
                                    $('.iconTextContentWrapper').find('.deleteLabel').addClass('Dn');
                                }
                            });

                            $(".listLabelText").off().on("blur keyup", function () {
                                let value = $(this).val().trim();
                                let $iconParent = $(this).parent().parent().parent().parent();
                                let index = $iconParent.find('.listLabelText').index($(this));
                                let $comEle = $parent.find('.labelText').eq(index);
                                $comEle.text(value);
                            });

                            $(".labelIconEdit").off().on("click", function () {
                                $('.field-row').find('.hideLabelIcon').trigger('click');

                                let $iconParent = $(this).parent().parent().parent().parent();
                                eleIndex = $iconParent.find('.labelIconEdit').index($(this));
                                eleClasses = $(this).attr('data-class');
                                let $iconListHolder = $(this).closest('.data-row');

                                if ($iconListHolder.find(".LinkLabelIconList").length == 0) {
                                    let fontHtml = '';
                                    fontHtml += '<div class="LinkLabelIconList col100">';
                                    fontHtml += _this.staticDOM.linklabelionlist;
                                    fontHtml += '</div>';
                                    $iconListHolder.after(fontHtml);
                                }
                                FontIcon();
                                $('#labelfontIconCollection').find('li').removeClass('selected');
                                $('#labelfontIconCollection').find('li i[data-class="' + eleClasses + '"]').parent().addClass('selected');
                                SearchFontIcon();
                            });
                        }

                        function FontResetIcon() {
                            $('#fontResetIconCollection').html(EasyLibrary.FontCollectionList());
                            ResetFontIcon();
                        }

                        function ResetFontIcon() {
                            $('#iconLabelResetSearch').on('keyup', function () {
                                let searchVal = $(this).val();
                                $('#fontResetIconCollection').find('li').each(function () {
                                    let $this = $(this);
                                    let dataClass = $this.find('i').attr('data-class');
                                    let pos = dataClass.indexOf(searchVal);
                                    if (pos < 0) {
                                        $this.addClass('Dn');
                                    } else {
                                        $this.removeClass('Dn');
                                    }
                                });
                            });
                            $('#fontResetIconCollection').find('li').on('click', function () {
                                let chooseClass = $(this).find('i').attr('data-class');
                                let $bulkIcon = $('.iconTextDataWrapper').find('#resetlabelicon');
                                let dataClass = $bulkIcon.attr('data-class');
                                $bulkIcon.attr('data-class', chooseClass);
                                $bulkIcon.removeClass(dataClass);
                                $bulkIcon.addClass(chooseClass);
                                //let viewIcon = $parent.find('.labelIcon');
                                $parent.find('.ListData').find(".labelIcon").each(function (index, item) {
                                    let dataClass = $(this).attr('data-class');
                                    $(this).attr('data-class', chooseClass);
                                    $(this).removeClass(dataClass);
                                    $(this).addClass(chooseClass);
                                });
                                $('.iconTextDataWrapper .field-row').find('.labelIconEdit').each(function (index, item) {
                                    let dataClass = $(this).attr('data-class');
                                    $(this).attr('data-class', chooseClass);
                                    $(this).removeClass(dataClass);
                                    $(this).addClass(chooseClass);
                                });
                                $('#fontResetIconCollection').find('li').removeClass('selected');
                                $(this).addClass('selected');
                                eleClasses = chooseClass;
                                $(".hideLabelIcon").trigger("click");
                            });

                            $(".hideLabelIcon").on("click", function () {
                                $(this).closest(".LinkLabelResetIconList").hide();
                            });
                        }

                        function SearchFontIcon() {
                            $('#iconLabelSearchIcon').on('keyup', function () {
                                let searchVal = $(this).val();
                                $('#labelfontIconCollection').find('li').each(function () {
                                    let $this = $(this);
                                    let dataClass = $this.find('i').attr('data-class');
                                    let pos = dataClass.indexOf(searchVal);
                                    if (pos < 0) {
                                        $this.addClass('Dn');
                                    } else {
                                        $this.removeClass('Dn');
                                    }
                                });
                            });
                            $('#labelfontIconCollection').find('li').on('click', function () {
                                let chooseClass = $(this).find('i').attr('data-class');
                                let $achorIcon = $parent.find('.labelIcon').eq(eleIndex);
                                let dataClass = $achorIcon.attr('data-class');
                                let $editIcon = $('.iconTextDataWrapper .data-row').eq(eleIndex).find('.labelIconEdit');
                                $editIcon.attr('data-class', chooseClass);
                                $editIcon.removeClass(dataClass);
                                $editIcon.addClass(chooseClass);
                                $achorIcon.attr('data-class', chooseClass);
                                $achorIcon.removeClass(dataClass);
                                $achorIcon.addClass(chooseClass);
                                $('#labelfontIconCollection').find('li').removeClass('selected');
                                $(this).addClass('selected');
                                eleClasses = chooseClass;
                                $(".hideLabelIcon").trigger("click");
                            });

                            $(".hideLabelIcon").on("click", function () {
                                $(this).closest(".LinkLabelIconList").remove();
                            });
                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div class="field-row stElWrap col50-50"><label class="fCol">Apply Spacing on</label><span class="fCol TxAl-r select__box"><select id="iconTextSpacing"><option value=".ListData">Entire Component</option><option value=".iconTextWrap">Item</option><option value=".labelIcon">Icon</option><option value=".labelText">Text</option></select></span></div></div><div id="icontextMSpacing"></div><div id="icontextPSpacing"></div>',
                    "onload": function ($item) {
                        component["icon text"].common.spacing();
                    },
                },
                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('iconText/alignment'),
                    "onload": function ($item) {
                        component["icon text"].common.alignment();
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div class="field-row stElWrap col50-50"><label class="fCol">Apply Hover Effect on</label><span class="fCol TxAl-r select__box"><select id="iconTextHoverSetting"><option value=".ListData">Entire Component</option><option value=".iconTextWrap ">Item</option></select></span></div></div><div id="iconTextHover"></div>',
                    "onload": function ($item) {
                        let val = $("#iconTextHoverSetting").val();
                        hoverEffect();
                        $("#iconTextHoverSetting").off().on("change", function () {
                            val = $(this).val();
                            hoverEffect();
                        })
                        function hoverEffect() {
                            $("#iconTextHover").html("");
                            $("#iconTextHover").AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: val,
                                options: {
                                    "color": ["background"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        }
                    },
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('iconText/background'),
                    "onload": function () {
                        let targetEle = $('#iconTextBgColor').val();
                        background();
                        $('#iconTextBgColor').off().on('change', function () {
                            targetEle = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle')
                                .end()
                                .find(targetEle).addClass('actEle');
                            background();
                        });
                        function background() {
                            $('#iconTextBackground').html('');
                            $("#iconTextBackground").AdvanceBackground({
                                targetParent: $activeDOM.parent(),
                                targetElem: targetEle,
                                options: ["color"]
                            });
                        }
                    },
                    "active": function () {
                        $('#iconTextBackground').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#iconTextBackground').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('iconText/border'),
                    "onload": function () {
                        let targetEle = $('#iconTextBdr').val();
                        border();
                        $('#iconTextBdr').off().on('change', function () {
                            targetEle = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle')
                                .end()
                                .find(targetEle).addClass('actEle');
                            border();
                        });
                        function border() {
                            $('#iconTextBorder').html('');
                            $("#iconTextBorder").AdvanceBorder({
                                targetParent: $activeDOM.parent(),
                                targetElem: targetEle,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#iconTextBorder').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#iconTextBorder').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius":
                {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('iconText/borderRadius'),
                    "onload": function () {
                        let targetEle = $('#iconTextBdrRadius').val();
                        boxRadius();
                        $('#iconTextBdrRadius').off().on('change', function () {
                            targetEle = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle')
                                .end()
                                .find(targetEle).addClass('actEle');
                            boxRadius();
                        });
                        function boxRadius() {
                            $('#iconTextRadius').html('');
                            $("#iconTextRadius").AdvanceBoxRadius({
                                targetParent: $activeDOM.parent(),
                                targetElem: targetEle,
                                options: {
                                    "max": 50,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"],
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#iconTextRadius').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#iconTextRadius').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow":
                {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('iconText/shadow'),
                    "onload": function () {
                        let targetEle = $('#iconTextShadow').val();
                        shadow();
                        $('#iconTextShadow').off().on('change', function () {
                            targetEle = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle')
                                .end()
                                .find(targetEle).addClass('actEle');
                            shadow();
                        });
                        function shadow() {
                            $('#iconTextSha').html('');
                            $("#iconTextSha").AdvanceBoxShadow({
                                targetParent: $activeDOM.parent(),
                                targetElem: targetEle,
                            });
                        }
                    },
                    "active": function () {
                        $('#iconTextSha').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#iconTextSha').trigger('change').addClass('slcActiveEleSetting');
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('iconText/iconTextResponsive'),
                    "onload": function () {
                        let _thisComp = component["icon text"];
                        let device = ViewDeviceAlpha();
                        let iconVisibility = $activeDOM.find(".ListData").attr("data-showicon");
                        if (iconVisibility === "true") {
                            $('#iconTextSetting option[value=".labelIcon"]').show();
                            $('#iconTextSpacing option[value=".labelIcon"]').show();
                        }
                        else {
                            $('#iconTextSetting option[value=".labelIcon"]').hide();
                            $('#iconTextSpacing option[value=".labelIcon"]').hide();
                        }
                        $("#iconTxtWidth").AdvanceDimension({
                            type: 'sfwidth',
                            targetParent: $activeDOM,
                            targetElem: $activeDOM,
                            label: 'Width',
                            defaultValue: 100,
                        });
                        $("#itemsperow").AdvanceItemsPerRow({
                            targetParent: $activeDOM,
                            targetElem: $activeDOM.find('.iconTextWrap'),
                            label: 'Items per row',
                        });
                        _thisComp.common.textSetting();
                        //_thisComp.common.gutterSpace();
                        $('#itemsperow').on('change', function () {
                            let $this = $(this);
                            let colClass = $this.val();
                            let $listData = $activeDOM.find('.ListData');
                            let $listDataItem = $listData.find('li');
                            let dataClass = $listData.attr('data-class');
                            $listDataItem.removeClass(dataClass);
                            $listDataItem.addClass(colClass);
                            $activeDOM.find('.ListData').attr('data-class', colClass);
                            //_thisComp.common.gutterSpace();

                        });
                        $("#iconTextVisibility").html('');
                        $('#iconTextVisibility').AdvanceVisibility({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM
                        });
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div class="field-row stElWrap col50-50"><label class="fCol">Apply Spacing on</label><span class="fCol TxAl-r select__box"><select id="iconTextSpacing"><option value=".iconTextWrap">Item</option><option value=".labelIcon">Icon</option><option value=".labelText">Text</option></select></span></div></div><div id="icontextMSpacing"></div><div id="icontextPSpacing"></div>',
                    "onload": function ($item) {
                        component["icon text"].common.spacing();
                    },
                },
                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('iconText/alignment'),
                    "onload": function ($item) {
                        component["icon text"].common.alignment();
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "common": {
            "iconsize": function () {
                function WidthChange(space) {
                    ReplaceClassByPattern($activeDOM.find('.labelIcon'), 'Fs-[0-9]{1,4}', 'Fs-' + space);
                }
                AdvanceSageSlider($('#listfontsizeSlider'), $('#listfontsizeHandle'), 5, 1080,
                    GetValueByClassName($activeDOM.find('.labelIcon'), 'Fs-[0-9]{1,4}', 'Fs-'), WidthChange, $activeDOM, 'px');
            },
            "spacing": function () {
                let val = $("#iconTextSpacing").val();
                AdvanceSpacing();
                $("#iconTextSpacing").off().on("change", function () {
                    val = $(this).val();
                    $activeDOM.find('.actEle').removeClass('actEle')
                        .end()
                        .find(val).addClass('actEle');
                    AdvanceSpacing();
                });
                function AdvanceSpacing() {
                    $("#icontextPSpacing,#icontextMSpacing").html('');
                    $("#icontextMSpacing").AdvanceSpacing({
                        targetParent: $activeDOM,
                        targetElem: val,
                        options: {
                            "margin": {
                                "max": 40,
                                "min": -40,
                                "times": 5,
                                "position": ["all", "top", "bottom", "left", "right"]
                            },
                        },
                    });
                    $("#icontextPSpacing").AdvanceSpacing({
                        targetParent: $activeDOM,
                        targetElem: val,
                        options: {
                            "padding": {
                                "max": 40,
                                "min": 0,
                                "times": 5,
                                "position": ["all", "top", "bottom", "left", "right"]
                            }
                        },
                    });
                }
            },
            "alignment": function () {
                let val = $('#iconTextAlignment').val();
                alignment();
                $('#iconTextAlignment').off().on('change', function () {
                    val = $(this).val();
                    $activeDOM.find('.actEle').removeClass('actEle')
                        .end()
                        .find(val).addClass('actEle');
                    alignment();
                });
                function alignment() {
                    $("#iconTextAlign").html("");
                    $("#iconTextAlign").AdvanceAlignment({
                        targetParent: $activeDOM.parent(),
                        targetElem: val
                    });
                }
            },
            "textSetting": function () {
                let _this = this;
                let advanceTextVal = $("#iconTextSetting").val();
                textSetting();
                $("#iconTextSetting").off('change').on('change', function () {
                    advanceTextVal = $(this).val();
                    textSetting();
                    //_this.gutterSpace();
                });
                function textSetting() {
                    $("#iconTextSet").html("");
                    let options = {
                        width: false,
                    }
                    if (advanceTextVal === '.labelIcon') {
                        options = {
                            width: false,
                            style: false,
                            family: false,
                            weight: false,
                            transform: false,
                            spacing: false,
                            lineheight: false
                        };
                    }
                    if (advanceTextVal !== ".iconTextWrap ")
                        $("#iconTextSet").AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: advanceTextVal,
                            options: options
                        });
                    if (advanceTextVal === '.labelIcon') {
                        $("#textSet_size .ui-slider-handle").attr("title", "Icon Size");
                        $("#textSet_color label:first").text("Icon Color");
                    };
                }

            },
            //"gutterSpace": function () {
            //    let advanceTextVal = $("#iconTextSetting").val();
            //    let itemsPerRow = parseInt($("#itemsperow option:selected").text())
            //    $("#iconTextGutter").html("");
            //    if (typeof (itemsPerRow) !== "undefined" && itemsPerRow > 1) {
            //        $("#gutterSpacing").show();
            //        $('#iconTextGutter').AdvanceGutterSpace({
            //            targetParent: $activeDOM,
            //            targetElem: advanceTextVal,
            //            itemsperrow: itemsPerRow,
            //            label: ["Horizontal", "Vertical"]
            //        });
            //    }
            //    else $("#gutterSpacing").hide();
            //}

        }
    }
,    "iFrame": {
        "componentname": "iFrame",
        "category": "advance",
        "icon": "fa fa-window-maximize",
        "row": false,
        "hidden": false,
        "type": "element",
        "bucket": true,
        "defaultdata": EasyLibrary.ReadDOM("iFrame/iFrame"),
        "beforeDrop": function ($this) {
        },
        "afterdrop": function () {
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("iFrame/iFrameBasic") + EasyLibrary.ReadDOM("youtubeheight"),
                    "onload": function ($item) {
                        var $parent = $item.parents('.iFrame');
                        var $iframeSrc = $parent.find('iframe');
                        var url = $iframeSrc.attr('src');
                        let $txtiFrameLink = $("#txtiFrameLink");
                        $txtiFrameLink.val(url);
                        InitEvent();
                        function InitEvent() {
                            Events();
                            component['youtube video'].HeightSlider($activeDOM);
                        }
                        function Events() {
                            $txtiFrameLink.on("change", function () {
                                var link = $(this).val().trim();
                                if (link == "") {
                                    SageAlertDialog("Please enter the Link", 'Alert');
                                }
                                else {
                                    url = link;
                                    var iframe = '';
                                    iframe += '<iframe style="width:100%;height:100%;border:none;"';
                                    iframe += ' src="' + url + '"';
                                    iframe += ' >';
                                    iframe += '</iframe>';
                                    $parent.find(".iFrameWrap").html(iframe);
                                }
                            });
                        }
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Visibility": {},
                        "Height_": {
                            "DOM": EasyLibrary.ReadDOM("youtubeheight"),
                            "onload": function () {
                                component['youtube video'].HeightSlider($activeDOM);
                            }
                        }
                    },
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                }
            }
        },
    }

,    "Image Link": {
        "componentname": "Image Link",
        "hidden": false,
        "row": false,
        "collection": false,
        "type": 'element',
        "bucket": true,
        "category": 'basic',
        "icon": "fa fa-external-link",
        "defaultdata": EasyLibrary.ReadDOM("imageLink/imageLinkDef"),
        "beforedrop": function () { },
        "afterdrop": function ($appendedParent, $appendedLayer, dropped) {
            if (dropped)
                $appendedLayer.find('.image-settings').trigger('click');
            anylinkstop();
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('imageLink/imageLinkBasic') + "<div id='imagesettings'></div>",
                    "onload": function ($this) {
                        let noLink='javascript:void(0)';
                        let anchor = $activeDOM.children('a');
                        let link = anchor.attr('href');
                        let $openInnewTab=$('#openInnewTab');
                        $('#imagesettings').html(component['image'].settingDOMs.tabs.Basic.DOM);
                        component["image"].common.ImageInit($activeDOM);
                        $('#fitimagesettings').show();

                        let $linkTextURL = $('#linkTextURL');
                        let $selectLink = $('#selectLink');
                        let $anchorPageList = $("#anchorPageList");
                        let $messageContainer = $('#messageContainer');

                        loadLinkTabSetting();
                        LinkSettings();

                        function loadLinkTabSetting() {
                            let newOrSame = anchor.attr('target');
                            //if (!newOrSame) newOrSame = '_blank'
                            $openInnewTab.val(newOrSame);

                        }
                        
                        function LinkSettings() {
                            if (link === noLink) link = '';
                            var linkType = anchor.attr('data-link');
                            if (!linkType) linkType = 'external';
                            if (typeof linkType !== 'undefined') {
                                anchor.removeClass("redirectLink");
                                switch (linkType) {
                                    case 'external':
                                        $selectLink.val('ext');
                                        $linkTextURL.removeClass('Dn');
                                        $linkTextURL.val(link);
                                        anchor.removeClass('anchorpage');
                                        break;
                                    case 'internal':
                                        $selectLink.val('int');
                                        GetPageList();
                                        anchor.addClass('anchorpage').addClass("redirectLink");
                                        $messageContainer.html("");
                                        $anchorPageList.find('option').filter(function () {
                                            return this.text == link.replace(SageFrameHostURL + '/', '').replaceAll("-", " ");
                                        }).attr('selected', true);
                                        $anchorPageList.parent().removeClass('Dn');
                                        anchor.attr("data-pageName", $("#anchorPageList option:selected").text());
                                        break;
                                }
                            }


                            $openInnewTab.off().on('change', function () {
                                anchor.attr("target", $(this).val());
                            });

                            
                            $selectLink.off().on('change', function () {
                                var selected = $(this).val();
                                anchor.removeClass("redirectLink");
                                if (selected == 'ext') {
                                    anchor.attr('data-link', 'external').removeAttr('href');
                                    $linkTextURL.removeClass('Dn');
                                    $anchorPageList.parent().addClass('Dn');
                                    $linkTextURL.val('').focus();
                                    anchor.removeClass('anchorpage');
                                } else {
                                    $messageContainer.html('');
                                    ChnageMenulinkType();
                                    GetPageList();
                                    $linkTextURL.addClass('Dn');
                                    $anchorPageList.parent().removeClass('Dn');
                                    anchor.addClass("redirectLink");
                                    $anchorPageList.trigger('change');
                                    anchor.attr('data-onepage', $anchorPageList.find('option:selected').val());
                                    anchor.attr("data-pageName", $("#anchorPageList option:selected").text());
                                }
                            });

                            $linkTextURL.on('input', function () {
                                var $this = $(this);
                                var val = $this.val().trim();
                                if (val.length > 0) {
                                    link = val;
                                    var protocol = /^(https?):\/\/[^\s\/$.?#]*.[^\s]*$/i;
                                    if (!protocol.test(val)) {
                                        $this.css('border-color', 'red');
                                        $messageContainer.html('Invalid url. <br />Example of valid url: <br />http://www.contentder.com/ <br />https://www.contentder.com/');
                                        link = noLink;
                                    }
                                    else {

                                        $messageContainer.html('');
                                        $this.css('border-color', '');
                                    }
                                }
                                else
                                    $messageContainer.html('Enter a valid URL');
                                anchor.attr('href', link);
                            });

                            function ChnageMenulinkType() {
                                if ($('#chkOnePageMenu').is(':checked')) {
                                    anchor.attr('data-link', 'onepage');
                                    anchor.removeClass('anchorpage');
                                }
                                else {
                                    anchor.attr('data-link', 'internal');
                                    anchor.addClass('anchorpage');
                                }
                            }
                            function GetPageList() {
                             
                                $anchorPageList.html( EasyLibrary.GetPageOption());

                                $anchorPageList.off().on('change', function () {
                                    let $selectedOption = $anchorPageList.find('option:selected');
                                    anchor.attr("data-pageName", $selectedOption.text().replaceAll(" ", "-"));
                                    anchor.attr('href', SageFrameHostURL + '/' + $selectedOption.text().replaceAll(" ", "-"));
                                });
                            }
                        }
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"],
                            "selectLayer": function ($elem) {
                                return $activeDOM;
                            }
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"],
                            "selectLayer": function ($elem) {
                                return $activeDOM;
                            }
                        }
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                },
                "Hover Effect": {
                    "options": {
                        "shadow": "on",
                        "border": {
                            "max": 20,
                            "min": 0,
                            "times": 1,
                            "position": ["all", "top", "right", "bottom", "left"]
                        },
                        "zoom": "on"
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM.find("img");
                    },
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                }

            }
        },
        "styleDOMs": {
            "tabs": {
                "Box Radius": {
                    "options": {
                        "max": 500,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM.find('img');
                    },
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM.find('img');
                    },
                },
                "Box Shadow": {
                    "options": {

                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM.find('img');
                    },
                },
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "imagerespo": {
                            "DOM": EasyLibrary.ReadDOM("imagebasictab"),
                            "prepend": "true",
                            "onload": function () {
                                component["image"].common.ImageInit($activeDOM);
                            }
                        },
                        "Visibility": {}
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
    }
,    "image slider": {
        "componentname": "image slider",
        "category": "advance",
        "icon": "fa fa-image",
        "row": false,
        "hidden": false,
        "collection": false,
        "bucket": true,
        "type": "carousel",
        "defaultdata": EasyLibrary.ReadDOM("carouseldata"),
        "afterdrop": function ($appendedParent, $appendLayer, dropped, duplicated) {
            if ($appendedParent.hasClass('site-body')) {
                var $imageSlider = $('.ImageSliderWrapper');
                $imageSlider.removeClass('binded');
                $imageSlider.each(function (index, value) {
                    var carousel = new CarouselInit($(this));
                });
            } else {
                let $slider = $appendLayer.find('.ImageSliderWrapper');
                $slider.removeClass('binded');
                var carousel = new CarouselInit($slider);
            }
        },
        "loadSetting": function ($item) { },
        "inherits": "carousel"
    }
,    "image": {
        "componentname": "image",
        "category": "basic",
        "componentBlockDOM": "",
        "icon": "icon icon-img-1",
        "row": false,
        "hidden": false,
        "type": "element",
        "bucket": true,
        "collection": true,
        "defaultdata": EasyLibrary.ReadDOM('image/basic'),
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped)
                $appendLayer.find('.image-settings').trigger('click');
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("imagebasictab"),
                    "onload": function ($this) {
                        $('#fitimagesettings').show();
                        component["image"].common.ImageInit($activeDOM);

                        let $image = $activeDOM.find('img');
                        $('.manageImgPos').off().on('click', function () {
                            let val = $(this).attr('data-name');
                          
                        });
                    },
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"],
                            "selectLayer": function ($elem) {
                                return $elem.parent().parent();
                            }
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"],
                            "selectLayer": function ($elem) {
                                return $elem.parent().parent().not('div').eq(0);
                            }
                        }
                    },
                    "selectLayer": function ($elem) {
                        return $elem.closest('.editor-component'); //.children().not('div').eq(0);
                        //return $elem.parent().parent().find('.image');//.not('div').eq(0);
                        //return $elem.parent().parent();//.children().not('div').eq(0);
                    },
                },
                "Hover Effect": {
                    "options": {
                        "shadow": "on",
                        "border": {
                            "max": 20,
                            "min": 0,
                            "times": 1,
                            "position": ["all", "top", "right", "bottom", "left"],
                        },
                        "zoom": "on",
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM.find("img");
                    },
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $elem.closest('.editor-component');
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "DOM":'<div id="imgBgColor"></div>',
                    "custom": true,
                    "onload": function () {
                        $('#imgBgColor').html('');
                        $('#imgBgColor').AdvanceBackground({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM,
                            options: ["color"]
                        });
                    }
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM.find('img');
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 500,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    },
                    "selectLayer": function ($elem) {
                        return $elem.closest('.editor-component').find("img");
                    },
                },
                "Box Shadow": {
                    "options": {

                    },
                    "selectLayer": function ($elem) {
                        return $elem.closest('.editor-component').find("img");
                    },
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "view": {
            "view": function () {
                this.library.one();
            },
            "library": {
                "one": function () {

                }
            }
        },
        "common": {
            "$parent": function () {
                return $activeDOM;
            },
            "$image": function () {
                return this.$parent().find('img');
            },
            "ImageWidthChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$image(), 'W-[0-9]{1,4}', 'W-' + space);
                ReplaceClassByPattern(ref.$parent(), 'W-[0-9]{1,4}', 'W-' + space);
            },
            "ImageHeightChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$image(), 'H-[0-9]{1,4}', 'H-' + space);
                ReplaceClassByPattern(ref.$parent(), 'H-[0-9]{1,4}', 'H-' + space);
            },
            "ImageHeightWidthChange": function (space, $par, ref) {
                ref.ImageHeightChange(space, $par, ref);
                ref.ImageWidthChange(space, $par, ref);
            },
            "imageheight": function () {
                let imageHeight = GetValueByClassName(this.$image(), 'H-[0-9]{1,4}', 'H-');
                imageHeight = imageHeight == 0 ? this.$image().height() : imageHeight;
                AdvanceSageSlider($('#imageHeightSlider'), $('#imageHeightHandle'), 1, 1080, imageHeight, this.ImageHeightChange, this.$parent(), 'px', this);
            },
            "imageheightWidth": function () {
                let imageWidth = GetValueByClassName(this.$image(), 'H-[0-9]{1,4}', 'H-');
                imageWidth = imageWidth == 0 ? this.$image().height() : imageWidth;
                AdvanceSageSlider($('#imageRoundSlider'), $('#imageRoundHandle'), 1, 1080, imageWidth, this.ImageHeightWidthChange, this.$parent(), 'px', this);
            },
            "RemoveImageHeightWidth": function () {
                this.RemoveImageHeight();
                this.RemoveImageWidth();
            },
            "RemoveImageHeight": function () {
                ReplaceClassByPattern(this.$image(), 'H-[0-9]{1,4}', '');
                ReplaceClassByPattern(this.$parent(), 'H-[0-9]{1,4}', '');
            },
            "RemoveImageWidth": function () {
                ReplaceClassByPattern(this.$image(), 'W-[0-9]{1,4}', '');
                ReplaceClassByPattern(this.$parent(), 'W-[0-9]{1,4}', '');
            },
            "SFImageWidthChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$parent(), 'sfCol_[0-9]{1,3}', 'sfCol_' + space);
            },
            "imagewidth": function () {
                AdvanceSageSlider($('#imagesizeSlider'), $('#imagesizeHandle'), 1, 100, GetValueByClassName(this.$parent(), 'sfCol_[0-9]{1,3}', 'sfCol_'), this.SFImageWidthChange, this.$parent(), '%', this);
            },
            "ImageInit": function ($parent) {
                var $image = $parent.find('img');
                LoadSettings();
                function LoadSettings() {
                    ImageDisplay();
                    ImageWidthEvent();
                    //ImageBorder();
                    ImageFitCover();
                }
                function ImageDisplay() {
                    var imageHeight = $parent.height();
                    var imageWidth = $parent.width();
                    var imageRadius = parseInt($parent.css('border-top-left-radius').replace('%', ''));
                    if (imageRadius > 0) {
                        $('.rectangleOption').hide();
                        $('.roundOption').show();
                        $('#imageDisplay').val('round');
                    } else {
                        $('.rectangleOption').show();
                        $('.roundOption').hide();
                        $('#imageDisplay').val('rectangle');
                    }
                    $('#imageDisplay').on('change', function () {
                        var $this = $(this);
                        var val = $this.val();
                        switch (val) {
                            case 'round':
                                $('.rectangleOption').hide();
                                $('.roundOption').show();
                                ChangeRoundImageWidth();
                                $parent.addClass('round-image');
                                let sfRegex = new RegExp('\\b[a-z]{0,1}sfCol_[0-9]{1,4}\\b', 'g');
                                let sfClasses = $parent.attr('class').match(sfRegex);
                                if (sfClasses !== undefined && sfClasses.length > 0)
                                    $parent.attr('data-width', sfClasses.join(' '));
                                $.each(sfClasses, function (i, o) {
                                    $parent.removeClass(o);
                                });
                                break;
                            case 'rectangle':
                                let height = $image.height();
                                $('.rectangleOption').show();
                                $('.roundOption').hide();
                                $image.css({ 'border-radius': '' });
                                $parent.css({ 'border-radius': '' });
                                $('#imageRadiusSlider').slider('value', 0);
                                $('#imageRadiusHandle').text(0);
                                $parent.removeClass('round-image');
                                ChangeSliderValue($('#imageHeightSlider'), height);
                                let regex = new RegExp('\\b[a-z]{0,1}W-[0-9]{1,4}\\b', 'g');
                                let classes = $parent.attr('class').match(regex);
                                $.each(classes, function (i, o) {
                                    $image.removeClass(o);
                                    $parent.removeClass(o);
                                });
                                let imgWidth = $parent.attr('data-width');
                                if (imgWidth !== undefined)
                                    $parent.addClass(imgWidth);
                                ReplaceClassByPattern($image, 'H-[0-9]{1,4}', 'H-' + height);
                                ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + height);
                                break;
                        }
                    });

                    ManualHeightEntryEvents();
                    ImageBoxRadius();
                    RoundImageWidth();
                }
                function ManualHeightEntryEvents() {
                    $('#refresImageWidth').on('click', function () {
                        component["image"].common.RemoveImageHeightWidth();
                        setTimeout(function () {
                            var holderheights = $image.height();
                            ChangeSliderValue($('#imageHeightSlider'), holderheights);
                        }, 100);
                    });
                    component["image"].common.imageheight();
                }
                function ImageBoxRadius() {
                    //'border-radius'
                    var boxRadius = 0;
                    boxRadius = $parent.attr('border-radius');

                    function ImageBoxRadius(space) {
                        $parent.css({ 'border-radius': space + 'px' });
                        $image.css({ 'border-radius': space + 'px' });
                    }
                    AdvanceSageSlider($('#imageRadiusSlider'), $('#imageRadiusHandle'), 0, 100, boxRadius, ImageBoxRadius, $parent, 'px');
                }

                function RoundImageWidth() {
                    component["image"].common.imageheightWidth();
                }

                function ChangeRoundImageWidth() {
                    var roundImageWidth = 0;
                    var imgHeight = parseInt($parent.width());
                    var imgWidth = parseInt($parent.height());
                    roundImageWidth = imgWidth;
                    if (imgHeight < imgWidth) {
                        roundImageWidth = imgHeight;
                    }
                    let _common = component["image"].common;
                    _common.ImageHeightWidthChange(roundImageWidth, $parent, _common);
                    $image.css({
                        'border-radius': '50%'
                    });
                    $parent.css({
                        'border-radius': '50%'
                    });
                    $('#imageRoundSlider').slider('value', roundImageWidth);
                    $('#imageRoundHandle').text(roundImageWidth);
                }
                function ImageWidthEvent() {
                    component["image"].common.imagewidth();
                }
                function ImageBorder() {
                    var imageBorderStyle = $parent[0].style.borderStyle; //.css('border-style');
                    $('#imgBorderStyle').val(imageBorderStyle);
                    if (imageBorderStyle.length === 0 || imageBorderStyle === 'none') {
                        $('.imgborder').hide();
                    } else {
                        $('.imgborder').show();
                    }

                    $('#imgBorderStyle').on('change', function () {
                        var style = $(this).val();
                        $parent.css('border-style', style);
                        if (style === 'none') {
                            $('.imgborder').hide();
                            $parent.css("border-width", '0px');
                            $('#imgBorderSlider').slider('value', 0);
                            $('#imgBorderHandle').text(0);
                        } else {
                            $('.imgborder').show();
                            var imgBordeVal = parseInt($('#imgBorderHandle').text());
                            if (imgBordeVal == 0)
                                imgBordeVal = 1;
                            $parent.css("border-width", imgBordeVal + 'px');
                            $('#imgBorderSlider').slider('value', imgBordeVal);
                            $('#imgBorderHandle').text(imgBordeVal);
                        }
                    });

                    var imgBorderWidth = $parent[0].style.borderWidth; // $parent.css("border-width");
                    if (imgBorderWidth.length > 0) {
                        imgBorderWidth = parseInt(imgBorderWidth.replace('px', ''));
                    } else {
                        imgBorderWidth = 1;
                    }

                    function RowSepHeight(space) {
                        $parent.css("border-width", space + 'px');
                    }
                    AdvanceSageSlider($('#imgBorderSlider'), $('#imgBorderHandle'), 1, 10, imgBorderWidth, RowSepHeight, $parent, 'px');
                    ImgBorderColor();
                }
                function ImgBorderColor() {
                    $('#imgBorderColor').css('background-color', $parent[0].style.borderColor);
                    var colorPickerOption = ColorPickerOption({
                        renderCallback: function ($elm, toggled) {
                            var objColor = RenderCallBackColor(this);
                            $parent.css({ 'border-color': objColor.bgColor });
                        }
                    });
                    $('#imgBorderColor').colorPicker(colorPickerOption);
                }
                function ImageFitCover() {
                    if ($parent.hasClass('fit-image')) {
                        $('#imageFittoCover').prop('checked', true);
                    } else {
                        $('#imageFittoCover').prop('checked', false);
                    }

                    $('#imageFittoCover').off().on('click', function () {
                        if ($(this).is(':checked')) {
                            $parent.addClass('fit-image');
                        } else {
                            $parent.removeClass('fit-image');
                        }
                    });
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "imagerespo": {
                            "DOM": EasyLibrary.ReadDOM("imagebasictab"),
                            "prepend": "true",
                            "onload": function () {
                                component["image"].common.ImageInit($activeDOM);
                            }
                        },
                        "Visibility": {}
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
    }
,    imagebanner: {
        "componentname": "imagebanner",
        "category": "pro",
        "icon": "fa fa-image",
        "row": true,
        "hidden": false,
        "type": "banner",
        "typeicon": "fa fa-th",
        "description": "Banner with slider images that can contain header, description or button.",
        "typeicon": "fa fa-th",
        "inherits": "carousel",
        "Screenshot": "https://easybuilder.contentder.com/ComponentScreenshot/videobanner.jpg",
        "defaultdata": EasyLibrary.ReadDOM("imagebanner"),
        "beforeDrop": function ($this) {
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            let $slider = $appendLayer.find('.ImageSliderWrapper');
            $slider.removeClass('binded');
            let $pId = $slider.parent().attr('data-id');
            if (typeof autoSlideInterval[$pId] !== 'undefined') {
                $.each(autoSlideInterval[$pId], function (i, v) {
                    clearInterval(v);
                });
                autoSlideInterval[$pId] = [];
            }
            $slider.parent().attr('data-id', 'sl_' + Math.floor((Math.random() * 1000) + 100));
            var carousel = new CarouselInit($slider);
        }
    }
,    "line chart": {
        "componentname": "line chart",
        "category": "advance",
        "icon": "fa fa-line-chart",
        "row": false,
        "hidden": false,
        "collection": true,
        "type": "graph",
        "bucket": true,
        "defaultdata": EasyLibrary.ReadDOM('linechart/linechartdom'),
        "beforeDrop": function ($this) {

        },
        "afterdrop": function ($appendedParent, $appendLayer) {
            this.view.view();
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('linechart/linechartbasicsettings'),
                    "onload": function ($this) {
                        var $parent = $this.parent().parent().parent().parent();
                        var lineTitle = $parent.find('.lineTitle').text();
                        var chartScale = $parent.find('.lineChartWrapper').attr('data-scale');


                        $('#ddlLineChartScaling').val(chartScale);
                        $("#txtLineChartTitle").val(lineTitle);
                        $("#txtLineChartTitle").off().on("keyup", function () {
                            var value = $(this).val().trim();
                            var $elm = $parent.find('.lineTitle');
                            $elm.text(value);
                        });

                        $('#ddlLineChartScaling').on('change', function () {
                            var val = $(this).val();
                            $parent.find('.lineChartWrapper').attr('data-scale', val);
                            component['line chart'].afterdrop($parent.parent(), $parent);
                        });


                    }
                },
                "Title": {
                    "DOM": "<div id='textLinkSet'></div>",
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $("#textLinkSet").AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: '.lineTitle',
                            options: {
                                size: true,
                                width: true,
                                spacing: true,
                                transform: true,
                                family: true,
                                weight: true,
                                color: false
                            }
                        });
                    }

                },
                "Data": {
                    "DOM": EasyLibrary.ReadDOM('linechart/linechartdatawrapper'),
                    "onload": function ($this) {
                        var $parent = $this.parent().parent().parent().parent();
                        var eleIndex = -1;

                        var $lineChartWrapper = $parent.find('.lineChartWrapper');
                        var lineData = $lineChartWrapper.attr('data-value');
                        var lineDataArray = JSON.parse(lineData);

                        LoadData();
                        InitLineEvents();
                        InitAddMoreLineEvent();

                        function LoadData() {
                            var html = '';
                            $("#lineChartEditWrapper").html('');

                            $.each(lineDataArray, function (index, item) {
                                html += '<div class="field-row data-row">';
                                html += '<div class="field-row stElWrap sfCol_100">';

                                html += '<span class="fcol sfCol_6 cPointer TxAl-l"><i class="fa fa-arrows-v barSort"></i></span>';
                                html += '<span class="sfCol_2"></span>';
                                html += '<span class="sfCol_50  cb_input ">';
                                html += '<input type="text" maxlength="15" class=" indLineName" value="' + item.name + '"/>';
                                html += '</span>';
                                html += '<span class="sfCol_2"></span>';
                                html += '<span class="sfCol_30  cb_input">';
                                html += '<input type="text" class=" indLineValue" value="' + item.value + '"/>';
                                html += '</span>';

                                html += '<span class="sfCol_10 deleteLineContainer TxAl-r">';
                                html += '<i title="delete" class=" in-form-icon fa fa-trash-o delete-icon deleteLine"></i>';
                                html += '</span>';

                                html += '</div>';
                                html += '</div>';
                            });
                            $("#lineChartEditWrapper").html(html);

                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    var dataIndex = $('#lineChartEditWrapper').find('.data-row').index($elm.parent().parent().parent());

                                    lineDataArray[dataIndex].color = objColor.bgColor;

                                    var jsonData = JSON.stringify(lineDataArray);
                                    $lineChartWrapper.attr('data-value', jsonData);
                                    component['line chart'].afterdrop($parent.parent(), $parent);
                                }
                            });
                            $('.chooseLineFontColor').colorPicker(colorPickerOption);

                        }


                        function InitLineEvents() {
                            $("#lineChartEditWrapper .indLineName").off('keyup').on('keyup', function () {
                                var value = $(this).val().trim();
                                var dataIndex = $('#lineChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());

                                lineDataArray[dataIndex].name = value;
                                var jsonData = JSON.stringify(lineDataArray);
                                $lineChartWrapper.attr('data-value', jsonData);
                                component['line chart'].afterdrop($parent.parent(), $parent);
                            });

                            $("#lineChartEditWrapper .indLineValue").off('keyup').on('keyup', function () {
                                var value = $(this).val().trim();
                                var dataIndex = $('#lineChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());

                                if (value.length == 0) {
                                    value = 0;
                                    lineDataArray[dataIndex].value = value;

                                    var jsonData = JSON.stringify(lineDataArray);
                                    $lineChartWrapper.attr('data-value', jsonData);
                                    component['line chart'].afterdrop($parent.parent(), $parent);
                                    $(this).attr('value', value);
                                    $(this).val(value);
                                } else if (isNaN(value)) {
                                    $(this).attr('value', lineDataArray[dataIndex].value);
                                    $(this).val(lineDataArray[dataIndex].value);
                                } else if (parseFloat(value) < 0) {
                                    $(this).attr('value', lineDataArray[dataIndex].value);
                                    $(this).val(lineDataArray[dataIndex].value);
                                } else {
                                    lineDataArray[dataIndex].value = value;

                                    var jsonData = JSON.stringify(lineDataArray);
                                    $lineChartWrapper.attr('data-value', jsonData);
                                    component['line chart'].afterdrop($parent.parent(), $parent);
                                }
                            });

                            $("#lineChartEditWrapper").off('click').on('click', '.deleteLine', function () {
                                let childrenCount = $('#lineChartEditWrapper').children().length;
                                if (--childrenCount < 2)
                                    $('.deleteLine').hide();

                                var dataIndex = $('#lineChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());

                                lineDataArray.splice(dataIndex, 1);

                                var jsonData = JSON.stringify(lineDataArray);
                                $lineChartWrapper.attr('data-value', jsonData);
                                $(this).parent().parent().parent().remove();
                                component['line chart'].afterdrop($parent.parent(), $parent);
                            });

                            $("#lineChartEditWrapper").AdvanceSorting({
                                targetParent: $parent,
                                targetElem: '.lineChartWrapper',
                                sortableOptions: {
                                    items: "div.data-row",
                                    handle: ".barSort",
                                    containment: '#lineChartEditWrapper',
                                    stop: function (event, ui) {
                                        lineDataArray = [];
                                        $("#lineChartEditWrapper").find(".data-row").each(function (i, o) {
                                            let obj = {
                                                id: i + 1,
                                                name: $(o).find('.indLineName').val(),
                                                value: $(o).find('.indLineValue').val(),
                                                color: $(o).find('.chooseLineFontColor').css('background-color')
                                            };
                                            lineDataArray.unshift(obj);

                                            var jsonData = JSON.stringify(lineDataArray);
                                            $lineChartWrapper.attr('data-value', jsonData);
                                            component['line chart'].afterdrop($parent.parent(), $parent);
                                        });

                                    }
                                }
                            });
                        }

                        function InitAddMoreLineEvent() {

                            $("#btnAddMoreLineData").off('click').on("click", function () {
                                var html = '';
                                var $editParent = $('#lineChartEditWrapper');
                                if ($editParent.find('.data-row').length > 0) {
                                    var $editHtml = '';
                                    var duplicateData = lineDataArray[0];
                                    var itemCount = lineDataArray.length;
                                    var $firstDom = $editParent.find('.data-row').eq(0);
                                    var attrClass = $firstDom.attr('class');
                                    $editHtml += '<div class="' + attrClass + '">';
                                    $editHtml += '<div class="field-row stElWrap col100">';
                                    $editHtml += '<span class="fcol sfCol_6 cPointer TxAl-l"><i class="fa fa-arrows-v barSort"></i></span>';
                                    $editHtml += '<span class="sfCol_2"></span>';
                                    $editHtml += '<span class="sfCol_50  cb_input ">';
                                    $editHtml += '<input type="text" maxlength="15" class="indLineName" value="' + duplicateData.name + '"/>';
                                    $editHtml += '</span>';
                                    $editHtml += '<span class="sfCol_2"></span>';
                                    $editHtml += '<span class="sfCol_30 cb_input">';
                                    $editHtml += '<input type="text"  class="indLineValue" value="' + duplicateData.value + '"/>';
                                    $editHtml += '</span>';
                                    $editHtml += '<span class="TxAl-r deleteLineContainer sfCol_10">';
                                    $editHtml += '<i title="delete" class="in-form-icon fa fa-trash-o delete-icon deleteLine"></i>';
                                    $editHtml += '</span>';
                                    $editHtml += '</div>';
                                    $editHtml += '</div>';
                                    $editParent.prepend($editHtml);
                                    var $deleteContainer = $('.deleteLineContainer');
                                    $.each($deleteContainer, function (i, val) {
                                        $(val).children().show();
                                    });

                                    var newData = {
                                        "id": itemCount + 1,
                                        "name": duplicateData.name,
                                        "value": duplicateData.value,
                                        "color": duplicateData.color
                                    };

                                    lineDataArray.unshift(newData);
                                } else {
                                    html += '<div class="field-row data-row">';
                                    html += '<div class="field-row stElWrap col100">';
                                    html += '<span class="fcol sfCol_6 cPointer TxAl-l"><i class="fa fa-arrows-v barSort"></i></span>';
                                    html += '<span class="sfCol_2"></span>';
                                    html += '<span class="sfCol_50  cb_input ">';
                                    html += '<input type="text" maxlength="15" class="indLineName" value="data 1"/>';
                                    html += '</span>';
                                    html += '<span class="sfCol_2"></span>';
                                    html += '<span class="sfCol_30 cb_input">';
                                    html += '<input type="text"  class="indLineValue" value="10" />';
                                    html += '</span>';
                                    html += '<span class="TxAl-r deleteLineContainer sfCol_10">';
                                    html += '<i title="delete" class="in-form-icon fa fa-trash-o delete-icon deleteLine"></i>';
                                    html += '</span>';
                                    html += '</div>';
                                    html += '</div>';
                                    $editParent.prepend(html);

                                    var defaultData = {
                                        "id": 1,
                                        "name": "data 1",
                                        "value": 10,
                                        "color": "#A55CA5"
                                    };
                                    lineDataArray.unshift(defaultData);
                                }

                                var jsonData = JSON.stringify(lineDataArray);
                                $lineChartWrapper.attr('data-value', jsonData);
                                component['line chart'].afterdrop($parent.parent(), $parent);

                                var colorPickerOption = ColorPickerOption({
                                    renderCallback: function ($elm, toggled) {
                                        var objColor = RenderCallBackColor(this);
                                        var dataIndex = $('#lineChartEditWrapper').find('.data-row').index($elm.parent().parent().parent());

                                        lineDataArray[dataIndex].color = objColor.bgColor;

                                        var jsonData = JSON.stringify(lineDataArray);
                                        $lineChartWrapper.attr('data-value', jsonData);
                                        component['line chart'].afterdrop($parent.parent(), $parent);
                                    }
                                });
                                $('.chooseLineFontColor').colorPicker(colorPickerOption);
                                InitLineEvents();
                            });
                        }
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div>
                            <div id="titleAlignDOM"></div>
                            <div id="canvasAlignDOM"></div>
                            </div>`,
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();


                        $('#titleAlignDOM').AdvanceAlignment({
                            targetParent: $parent,
                            targetElem: $('.lineTitle').parent(),
                            labels: {
                                'horizontal': 'Title'
                            }
                        });

                        $('#canvasAlignDOM').AdvanceAlignment({
                            targetParent: $parent,
                            targetElem: '.lineChartWrapper ',
                            labels: {
                                'horizontal': 'Chart'
                            }
                        });

                    }
                }
            }
        },
        "styleDOMs": {
            "tabs": {
                "Style": {
                    "DOM": EasyLibrary.ReadDOM('linechart/lineChartColor'),
                    "onload": function ($item) {
                        var $parent = $item.parent().parent().parent().parent();
                        var fontWidth = $parent.find('.lineChartWrapper').attr('data-linefontsize').replace('px', '');
                        var titleFontColor = $parent.find('.lineTitle').css('color');
                        var gridColor = $parent.find('.lineChartWrapper').attr('data-lineaxescolor');
                        var lineColor = $parent.find('.lineChartWrapper').attr('data-linecolor');
                        var labelFontColor = $parent.find('.lineChartWrapper').attr('data-linefontcolor');


                        function ListIconSizeSlider(space) {
                            $parent.find('.lineChartWrapper').attr('data-linefontsize', space);
                            component['line chart'].afterdrop($parent.parent(), $parent);
                            $parent.find('.labelIcon').css('font-size', space);
                        }
                        AdvanceSageSlider($('#linefontsizeSlider'), $('#linefontsizeHandle'), 10, 40, fontWidth, ListIconSizeSlider, $parent, 'px');

                        $('#chooseLinetitleColor').css('background-color', titleFontColor);
                        var colorPickerOptionTitleFont = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $parent.find('.lineTitle').css('color', objColor.bgColor);
                            }
                        });
                        $('#chooseLinetitleColor').colorPicker(colorPickerOptionTitleFont);


                        $('#chooseAxesLineColor').css('background-color', gridColor);
                        var colorPickerOptionGrid = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $parent.find('.lineChartWrapper').attr('data-lineaxescolor', objColor.bgColor);
                                component['line chart'].afterdrop($parent.parent(), $parent);
                            }
                        });
                        $('#chooseAxesLineColor').colorPicker(colorPickerOptionGrid);

                        $('#chooseLineColor').css('background-color', lineColor);
                        var colorPickerOptionLine = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $parent.find('.lineChartWrapper').attr('data-linecolor', objColor.bgColor);
                                component['line chart'].afterdrop($parent.parent(), $parent);
                            }
                        });
                        $('#chooseLineColor').colorPicker(colorPickerOptionLine);

                        $('#chooseLineFontColor').css('background-color', labelFontColor);
                        var colorPickerOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $parent.find('.lineChartWrapper').attr('data-linefontcolor', objColor.bgColor);
                                component['line chart'].afterdrop($parent.parent(), $parent);
                            }
                        });
                        $('#chooseLineFontColor').colorPicker(colorPickerOption);

                    }

                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Visibility": {}
                    }
                }
            }
        },
        "onsort": function (ui) {
            this.view.view();
        },
        "view": {
            "view": function () {
                var myCanvasList = document.querySelectorAll(".lineCanvas");
                var _this = this;
                if (myCanvasList.length == 0) {

                } else {
                    $.each(myCanvasList, function (index, item) {
                        var myCanvas = item;
                        var parentWidth = item.parentNode.offsetWidth;

                        parentWidth = Math.max(parentWidth, 250);
                        myCanvas.height = 350 / parentWidth * parentWidth;
                        myCanvas.width = parentWidth * 0.75;

                        var lineColor = item.parentNode.getAttribute('data-linecolor');
                        var lineaxesColor = item.parentNode.getAttribute('data-lineaxescolor');
                        var lineFontColor = item.parentNode.getAttribute('data-linefontcolor');
                        var lineFontSize = item.parentNode.getAttribute('data-linefontsize');
                        //console.log(barFontSize);
                        var lineChartData = item.parentNode.getAttribute('data-value');
                        var lineData = JSON.parse(lineChartData);
                        var lineScaleFactor = item.parentNode.getAttribute('data-scale');
                        //alert(JSON.stringify(barData));


                        var ctx = myCanvas.getContext("2d");

                        _this.library.LineChart({
                            canvas: myCanvas,
                            seriesName: "Line Chart",
                            padding: 20,
                            gridScale: lineScaleFactor,
                            lineColor: lineColor,
                            lineaxesColor: lineaxesColor,
                            lineFontColor: lineFontColor,
                            data: lineData,
                            lineFontSize: lineFontSize
                        });
                    });
                }
            },
            "library": {
                "DrawLine": function (ctx, startX, startY, endX, endY, color) {
                    ctx.save();
                    ctx.strokeStyle = color;
                    ctx.beginPath();
                    ctx.moveTo(startX, startY);
                    ctx.lineTo(endX, endY);
                    ctx.stroke();
                    ctx.restore();
                },

                "LineChart": function (options) {
                    this.options = options;
                    this.canvas = options.canvas;
                    this.ctx = this.canvas.getContext("2d");
                    var _this = this;
                    this.draw = function () {
                        var maxValue = 0;
                        var maxWidth = 0;
                        $.each(this.options.data, function (index, categ) {
                            maxValue = Math.max(maxValue, categ.value);
                            maxWidth = Math.max(maxWidth, _this.ctx.measureText(categ.name).width);
                        });
                        var canvasActualHeight = this.canvas.height - this.options.padding * 2;
                        var canvasActualWidth = this.canvas.width - this.options.padding * 2;

                        //drawing the grid lines
                        var gridValue = 0;
                        var entered = 0;
                        while (gridValue <= maxValue) {
                            entered++;
                            var gridY = canvasActualHeight * (1 - gridValue / maxValue) + this.options.padding;

                            //x-axis
                            _this.DrawLine(
                                this.ctx,
                                0,
                                gridY,
                                this.canvas.width,
                                gridY,
                                this.options.lineaxesColor
                            );

                            //y-axis
                            _this.DrawLine(
                                this.ctx,
                                0,
                                0,
                                0,
                                gridY,
                                this.options.lineaxesColor
                            );

                            //writing grid markers
                            this.ctx.save();

                            gridValue += parseInt(this.options.gridScale);
                        }

                        //drawing the lines
                        var lineIndex = 0;
                        var numberOfLines = this.options.data.length;
                        var lineSize = (canvasActualWidth) / numberOfLines;

                        var textWidth = 0;


                        _this.ctx.beginPath();
                        _this.ctx.strokeStyle = _this.options.lineColor;


                        $.each(this.options.data, function (index, categ) {
                            var val = categ.value;
                            var lineHeight = Math.round(canvasActualHeight * val / maxValue);

                            var xaxis = _this.options.padding + lineIndex * lineSize;
                            var yaxis = _this.canvas.height - lineHeight - _this.options.padding;

                            _this.ctx.lineTo(xaxis, yaxis);
                            _this.ctx.stroke();

                            textWidth = _this.ctx.measureText(categ.name).width;
                            var valueWidth = _this.ctx.measureText(categ.value).width;
                            _this.ctx.fillStyle = _this.options.lineFontColor;
                            var fontSize = _this.options.lineFontSize;
                            _this.ctx.font = "bold " + parseInt(fontSize) + "px Arial";
                            _this.ctx.fillText(categ.name, (xaxis + 15) - textWidth / 2, _this.canvas.height);
                            _this.ctx.fillText(val, xaxis - 5, _this.canvas.height - lineHeight - 30);

                            lineIndex++;
                        });
                    };

                    this.draw();
                }
            }
        },
        "resize": function () {
            this.view.view();
        }
    }
,    "login status": {
        "componentname": "login status",
        "category": "basic",
        "icon": "fa fa-sign-in",
        "row": false,
        "hidden": false,
        "collection": false,
        "type": 'element',
        "defaultdata": EasyLibrary.ReadDOM('loginStatus/loginStatus'),
        "beforeDrop": function ($this) {
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped) {
                $appendLayer.attr('data-pagename', EasyLibrary.GetCurrentPageName);
            }
            this.view.library.viewEvents();
        },

        "onsort": function (ui) { },
        "settingDOMs": {
            "tabs": {

                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('loginStatus/loginStatusBasic'),
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        let $logStatBasic = $('.logStatBasic');
                        let $logStatEditList = $logStatBasic.find('.logStatEditList');
                        let IconClassReg = /fa-\w+(\-*\w*)*/g;
                        let $position = 0;
                        let $globVar = 'false';
                        let $globDataId = 0;
                        let $logStatMenu = $parent.find('.logStatMenu');
                        loadBasicFunc();
                        outrSrtDiv();
                        UIEvents();
                        linkFunctions();
                        if ($parent.find(".registerSet").hasClass("Dn")) {
                            $('#chkIsAnUsrBasic').prop("checked", false);
                            $('#divLogoutStateEle').addClass('Dn');
                            $('#divLogInStateEle').removeClass('Dn');
                        }
                        else {
                            $('#chkIsAnUsrBasic').prop("checked", true);
                            $('#divLogoutStateEle').removeClass('Dn');
                            $('#divLogInStateEle').addClass('Dn');
                        }
                        if ($parent.find(".logStatUImg").hasClass("Dn"))
                            $("#show-image").prop("checked", false);
                        else $("#show-image").prop("checked", true);
                        function loadBasicFunc() {
                            try {
                                let $ItemList = $logStatMenu.find('.logStat');
                                let html = CreateCheckboxDOM('Show Icons', 'show-icons', 'showMenu') + CreateCheckboxDOM('Show Text', 'show-text', 'showMenu'), htmlAuth = '', i = 0, logStatLen = $ItemList.length;
                                $('#divLogInStateEle').prepend(CreateCheckboxDOM('Show Image', 'show-image', '') + CreateCheckboxDOM('Show Welcome and username', 'show-welcome-username', '') + CreateCheckboxDOM('Show Menu Icons', 'show-menu-icons', '') + CreateCheckboxDOM('Show Menu Text', 'show-menu-text', ''))
                                $ItemList.each(function (k, v) {
                                    let $this = $(this);
                                    let $logstatitemid = $this.attr('data-logstatitemid');
                                    let $Title = $this.find('.logStatRef a').not('.drop-item, .logStatLnksAuth').text();
                                    let $dropTitleLen = $this.find('.logStatRef').find('.dropdown-content a').length;
                                    let $Icon = $this.find('.logStatIcon i').attr('class').match(IconClassReg);
                                    if ($logstatitemid === '0' || $logstatitemid === '1') {
                                        html += `<div class="field-row logStatItem Mt-10 Ml-10 Mb-10 sfCol_100" data-logstatitemid="${$logstatitemid}" >
                                                    <div class="field-row stElWrap col100">
                                                        <span class="sfCol_10 cPointer TxAl-c">
                                                            <i class=" fa fa-arrows-v logStatSort"></i>
                                                        </span>
                                                        <span class="sfCol_10 TxAl-c">
                                                            <i class="iconChooser in-form-icon fa ${$Icon}" title="Click to change icon"></i>
                                                        </span>
                                                        <span class="sfCol_80 cb_input">
                                                            <input type="text" class="title logStatInput" placeholder="Title" value="${$Title}"></span>
                                                     </div>
                                                </div>`;
                                    } else {
                                        htmlAuth += `<div class="field-row logStatItem" data-logstatitemid="${$logstatitemid}" >
                                                        <div class ="field-row stElWrap col100">
                                                            <label class ="sfCol_100 Pb-10 hidable">Welcome Message</label>

                                                            <span class ="sfCol_100 cb_input hidable">
                                                                <input type="text" class="title logStatInput" placeholder="Title" value="${$Title}">
                                                            </span>
                                                     <span class ="Pt-10 sfCol_100">
<label class ="sfCol_80">Drop Down options</label>
<i title="Add" class ="sfCol_60 TxAl-r Fs-20 addsLogStat  fa fa-plus-circle in-form-icon add-icon" style="cursor:pointer;"></i>
</span>
                                                         </div>
                                                   </div>`;
                                        if ($dropTitleLen > 0) {
                                            for (var i = 0; i < $dropTitleLen; i++) {
                                                let $dropId = $this.find('.logStatRef').find('.dropdown-content .drop-cont').eq(i).attr('data-dropitemid');
                                                let $dropTitle = $this.find('.logStatRef').find('.dropdown-content a').eq(i).text();
                                                let $dropIcn = $this.find('.logStatRef').find('.dropdown-content .logStatIcon i').eq(i).attr('class').match(IconClassReg);
                                                let prevSelected = $this.find()
                                                let ddl = '', clas = '';
                                                if ($dropId > 2) {

                                                    if (EasyLibrary.IsDefined($this.attr("data-required")) && $this.attr("data-required") === "true") {

                                                    }
                                                    else {
                                                        clas = 'Mt-30';
                                                        ddl = `
                                                             <span class ="sfCol_20 cPointer TxAl-c"></span>
                                                                    <span class ="sfCol_10 TxAl-c fa fa-link"></span>
                                                                    <span class ="select__box sfCol_60 logStatPgLstHldr">
                                                                            <select class ="logStatPgLst sfCol_100"></select>
                                                                    </span>
                                                                    <span class ="sfCol_5 TxAl-r Ml-10">
                                                                            <i title="Delete" class ="deleteLogStatInr  fa fa-trash in-form-icon delete-icon cpointer"></i>
                                                                    </span>
                                                            `;
                                                    }

                                                    htmlAuth += `<div class="field-row logStatItemInr stElWrap sfCol_100"  data-dropitemdvid="${$dropId}">
                                                                    <span class ="sfCol_20 cPointer TxAl-c">
                                                                        <i class=" fa fa-arrows-v logStatSort ${clas}"></i>
                                                                    </span>
                                                                    <span class="sfCol_10 TxAl-c">
                                                                        <i class ="iconChooserInr cPointer in-form-icon fa ${$dropIcn}" title="Click to change icon"></i>
                                                                    </span>
                                                                    <span class ="sfCol_70 cb_input">
                                                                        <input type="text" class ="title logStatInputInr" placeholder="Title" value="${$dropTitle}">
                                                                     </span>
                                                                     ${ddl}
                                                                </span>
                                                        </div>`;
                                                } else {
                                                    htmlAuth += `<div class="field-row logStatItemInr stElWrap sfCol_100"  data-dropitemdvid="${$dropId}">
                                                                    <span class ="sfCol_20 cPointer TxAl-c">
                                                                         <i class =" fa fa-arrows-v logStatSort ${clas}"></i>
                                                                    </span>
                                                                    <span class="sfCol_10 TxAl-c">
                                                                        <i class ="iconChooserInr cPointer in-form-icon fa ${$dropIcn}" title="Click to change icon"></i>
                                                                    </span>
                                                                    <span class ="sfCol_70 cb_input">
                                                                        <input type="text" class ="title logStatInputInr" placeholder="Title" value="${$dropTitle}">
                                                                    </span>
                                                                  ${ddl}
                                                                 </div>`;
                                                }
                                            }
                                        }
                                        htmlAuth += '</div>';
                                    }
                                });


                                $('#logoutStateEle').html(html);
                                $('#logInStateEle').html(htmlAuth);

                                let $anIcons = $('#show-icons');
                                let $anTexts = $('#show-text');

                                let $menuIcons = $('#show-menu-icons');
                                let $menuTexts = $('#show-menu-text');

                                if ($activeDOM.attr('data-fontIcons') == 'show')
                                    $anIcons.prop('checked', true);
                                else {
                                    $anIcons.prop('checked', false);
                                }
                                if ($activeDOM.attr('data-anTextOnly') == 'show')
                                    $anTexts.prop('checked', true);
                                else {
                                    $anTexts.prop('checked', false);
                                }
                                $anIcons.off().on('change', function () {
                                    let $target = $activeDOM.find('.logStatUIcns');
                                    if ($(this).prop('checked')) {
                                        $target.removeClass('Dn');
                                        $activeDOM.attr('data-fontIcons', 'show');
                                    }
                                    else {
                                        $target.addClass('Dn');
                                        $activeDOM.attr('data-fontIcons', 'hide');
                                        $anTexts.prop('checked', true);
                                        $anTexts.trigger('change');

                                    }
                                    component['login status'].common.reloadAllSettingTabs('settingDOMs', ['Basic'])
                                });
                                $anTexts.off().on('change', function () {
                                    let $target = $activeDOM.find('.logStatAn .logStatRef')
                                    if ($(this).prop('checked')) {
                                        $target.removeClass('Dn');
                                        $activeDOM.attr('data-anTextOnly', 'show');
                                    }
                                    else {
                                        $target.addClass('Dn');
                                        $activeDOM.attr('data-anTextOnly', 'hide');
                                        $anIcons.prop('checked', true);
                                        $anIcons.trigger('change');
                                    }
                                    component['login status'].common.reloadAllSettingTabs('settingDOMs', ['Basic'])
                                });

                                $menuIcons.parents('.field-row').add($menuTexts.parents('.field-row')).hover(function () {
                                    $activeDOM.find('.logStatMIcn').trigger('mouseover');
                                }, function () {
                                    $activeDOM.find('.logStatMIcn').trigger('mouseout')
                                });


                                if ($activeDOM.attr('data-menuIcons') == 'show')
                                    $menuIcons.prop('checked', true);
                                else {
                                    $menuIcons.prop('checked', false);
                                }
                                if ($activeDOM.attr('data-menuText') == 'show')
                                    $menuTexts.prop('checked', true);
                                else {
                                    $menuTexts.prop('checked', false);
                                }
                                $menuIcons.off().on('change', function () {
                                    let $target = $activeDOM.find('.logStatSMIcns');
                                    if ($(this).prop('checked')) {
                                        $target.removeClass('Dn');
                                        $activeDOM.attr('data-menuIcons', 'show');
                                    }
                                    else {
                                        $target.addClass('Dn');
                                        $activeDOM.attr('data-menuIcons', 'hide');
                                        $menuTexts.prop('checked', true);
                                        $menuTexts.trigger('change');

                                    }
                                    component['login status'].common.reloadAllSettingTabs('settingDOMs', ['Basic'])
                                });
                                $menuTexts.off().on('change', function () {
                                    let $target = $activeDOM.find('.drop-cont .drop-itemDv')
                                    if ($(this).prop('checked')) {
                                        $target.removeClass('Dn');
                                        $activeDOM.attr('data-menuText', 'show');
                                    }
                                    else {
                                        $target.addClass('Dn');
                                        $activeDOM.attr('data-menuText', 'hide');
                                        $menuIcons.prop('checked', true);
                                        $menuIcons.trigger('change');
                                    }
                                    component['login status'].common.reloadAllSettingTabs('settingDOMs', ['Basic'])
                                });

                                //show hide welcome and username
                                component['login status'].common.showHideUernameWelcome()

                            } catch (e) {
                                console.log(e.message);
                            }
                        }
                        function UIEvents() {
                            if ($parent.find('.logStatAn').hasClass('Dn')) {
                                $('.chkIsAnUsr').prop('checked', false);
                            }
                            $('#chkIsAnUsrBasic').off('change').on('change', function () {
                                let $this = $(this);
                                if ($this.prop('checked')) {
                                    $('#divLogoutStateEle').removeClass('Dn');
                                    $('#divLogInStateEle').addClass('Dn');
                                    $parent.find('.logStatAn').removeClass('Dn');
                                    $parent.find('.logStatAuth').addClass('Dn');
                                } else {
                                    $('#divLogoutStateEle').addClass('Dn');
                                    $('#divLogInStateEle').removeClass('Dn');
                                    $parent.find('.logStatAn').addClass('Dn');
                                    $parent.find('.logStatAuth').removeClass('Dn');
                                }
                                $('.chkIsAnUsr').prop('checked', $this.prop('checked'));
                            });
                            $("#show-image").off().on("change", function () {
                                let $this = $(this);
                                if ($this.is(':checked')) {
                                    $parent.find(".logStatUImg").removeClass("Dn");
                                }
                                else
                                    $parent.find(".logStatUImg").addClass("Dn");
                            })
                            $logStatBasic.on('click', '.addsLogStat', function () {
                                let firstDropCont = $activeDOM.find('.drop-cont').eq(0);
                                try {
                                    let count = 1;
                                    let $thisPar = $(this).parent().parent().parent();
                                    let $dropId = getHighId();
                                    if (typeof ($dropId) !== 'undefined') {
                                        count = parseInt($dropId) + 1;
                                    }
                                    $thisPar.find('.authSrtOutr').append(`<div class="field-row stElWrap logStatItemInr sfCol_100"  data-dropitemdvid="${count}">
                                                                            <span class="sfCol_20 cPointer TxAl-c">
                                                                                <i class =" fa fa-arrows-v logStatSort Mt-30"></i>
                                                                            </span>
                                                                            <span class="sfCol_10 TxAl-c">
                                                                                <i class ="iconChooserInr cPointer  in-form-icon fa fa-users" title="Click to change icon"></i>
                                                                            </span>
                                                                            <span class ="sfCol_70 cb_input">
                                                                                <input type="text" class="title logStatInputInr" placeholder="Title" value="New Link">
                                                                            </span>
                                                                            <span class ="sfCol_20 cPointer TxAl-c"></span>
                                                                            <span class ="sfCol_10 TxAl-c fa fa-link"></span>
                                                                             <span class ="select__box sfCol_60" class ="logStatPgLstHldr">
                                                                                   <select class="logStatPgLst sfCol_100"></select>
                                                                              </span>
                                                                              <span class ="sfCol_5 TxAl-r Ml-10">
                                                                                    <i title="Delete" class="deleteLogStatInr  cpointer fa fa-trash in-form-icon delete-icon"></i>
                                                                              </span>
                                                                        </div>`);
                                    let $pos = $('.logStatEditList .logStatItem').index($(this).closest('.logStatItem'));
                                    let ActiveItem = $parent.find('.logStatMenu').eq(0).find('>.logStat').eq($pos);
                                    let $dropCont = ActiveItem.find('.logStatRef').find('.dropdown-content');
                                    let $dropContFirst = $dropCont.find('.drop-cont').first();
                                    let $textClass = $dropContFirst.find('.drop-itemDv a').attr('class');
                                    if ((/\bprofileurl/).test($textClass))
                                        $textClass = $textClass.replace(/\bprofileurl/, '')
                                    let $textStyle = $dropContFirst.find('.drop-itemDv a').attr('style');
                                    let $iconClass = $dropContFirst.find('.logStatSMIcn i').attr('class');
                                    let $iconStyle = $dropContFirst.find('.logStatSMIcn i').attr('style');
                                    //$dropCont.append(`<div class="${clas}" data-dropitemid="${count}" data-hovereffect='${hoverEffect}' hovered-mousein="out" style="${styl}">
                                    //                    <div class="logStatIcon logStatSMIcn">
                                    //                         <i class="${$iconClass}" style="${$iconStyle}"></i>
                                    //                    </div>
                                    //                    <div class="drop-itemDv Dib">
                                    //                        <a href="http://172.18.12.13:8010/Home" data-link="internal" class="${$textClass}" style="${$textStyle}">Link 1</a>
                                    //                    </div>
                                    //                  </div>`);
                                    let $cloned = $dropContFirst.clone(true);
                                    $cloned.find('a').removeClass('profileurl').text("New Link");
                                    $cloned.attr('data-dropitemid', count);
                                    $cloned.removeAttr('data-required');
                                    $cloned.find('a').attr('href', 'javascript:void(0)');
                                    $dropCont.append($cloned)
                                    linkFunctions();
                                } catch (e) {
                                    console.log(e.message);
                                }
                                component['login status'].settingDOMs.tabs['Hover Effect'].onload(true);
                            });
                            $logStatBasic.on('click', '.deleteLogStatInr', function (e) {
                                try {
                                    let $thisPar = $(this).parent().parent();
                                    let $countId = $thisPar.attr('data-dropitemdvid');
                                    let $pos = $('.logStatEditList .logStatItem').index($(this).closest('.logStatItem'));
                                    let ActiveItem = $parent.find('.logStatMenu').eq(0).find('>.logStat').eq($pos);
                                    ActiveItem.find('.dropdown-content').find("[data-dropitemid='" + $countId + "']").remove();
                                    $thisPar.remove();
                                } catch (e) {
                                    console.log(e.message);
                                }
                            });
                            $logStatEditList.on('input', '.logStatInput', function () {
                                try {
                                    let $this = $(this);
                                    let $Val = $this.val().trim();
                                    let $pos = $('.logStatEditList .logStatItem').index($this.closest('.logStatItem'));
                                    let ActiveItem = $parent.find('.logStatMenu').eq(0).find('>.logStat').eq($pos);
                                    ActiveItem.find('.logStatRef a').eq(0).text($Val);
                                } catch (e) {
                                    console.log(e.message);
                                }
                            });
                            $logStatEditList.on('input', '.logStatInputInr', function () {
                                try {
                                    let $this = $(this);
                                    let $Val = $this.val();
                                    let $dropID = $this.parent().parent().attr('data-dropitemdvid');
                                    let $pos = $('.logStatEditList .logStatItem').index($this.closest('.logStatItem'));
                                    let ActiveItem = $parent.find('.logStatMenu').eq(0).find('>.logStat').eq($pos);
                                    ActiveItem.find('.dropdown-content').find('[data-dropitemid="' + $dropID + '"] a').text($Val);
                                } catch (e) {
                                    console.log(e.message);
                                }
                            });
                            $('#logStatfontIconCollection').html($('ul#fontIconCollection').html());
                            $logStatEditList.on('click', '.iconChooser', function () {
                                let $this = $(this);
                                let $par = $this.parent().parent().parent();
                                let $dataID = $par.attr('data-logstatitemid');
                                if ($dataID > 1) {
                                    $this.parent().parent().after($('.tabcontent .logStatIconList'));
                                } else {
                                    $par.after($('.tabcontent .logStatIconList'));
                                }
                                $position = $('.logStatEditList .logStatItem').index($this.closest('.logStatItem'));
                                $('.logStatIconList').removeClass('Dn');
                                $('#logStatfontIconCollection').find('li').removeClass('selected');
                                let CurrentClass = $this.attr('class').match(IconClassReg)[0];
                                $('#logStatfontIconCollection').find('li i[data-class="' + CurrentClass + '"]').parent().addClass('selected');
                            });
                            $logStatEditList.on('click', '.iconChooserInr', function () {
                                let $this = $(this);
                                let $par = $this.parent().parent();
                                $globDataId = $par.attr('data-dropitemdvid');
                                $par.after($('.tabcontent .logStatIconList'));
                                $position = $('.logStatEditList .logStatItem').index($this.closest('.logStatItem'));
                                $globVar = 'true';
                                $('.logStatIconList').removeClass('Dn');
                                $('#logStatfontIconCollection').find('li').removeClass('selected');
                                let CurrentClass = $this.attr('class').match(IconClassReg)[0];
                                $('#logStatfontIconCollection').find('li i[data-class="' + CurrentClass + '"]').parent().addClass('selected');
                            });
                            $('.logStatIconList .closeIconChooser').off().on('click', function () {
                                $('.logStatIconList').addClass('Dn').insertAfter($('.logStatEditList'));
                            });
                            $('#logStatSearchIcon').on('input', function () {
                                let searchVal = $(this).val();
                                $('#logStatfontIconCollection').find('li').each(function () {
                                    let $this = $(this);
                                    let dataClass = $this.find('i').attr('data-class');
                                    let pos = dataClass.indexOf(searchVal);
                                    if (pos < 0) {
                                        $this.addClass('Dn');
                                    } else {
                                        $this.removeClass('Dn');
                                    }
                                });
                            });
                            $('#logStatfontIconCollection').find('li').on('click', function () {
                                let $iconChooser = '', $FormIcon = '', $ViewIcon = '';
                                if ($globVar === 'true') {
                                    $iconChooser = 'i.iconChooserInr';
                                    $FormIcon = $('.logStatEditList .logStatItem').eq($position).find('[data-dropitemdvid="' + $globDataId + '"]').find($iconChooser);
                                    $ViewIcon = $parent.find('.logStatMenu').eq(0).find('>.logStat').eq($position).find('[data-dropitemid="' + $globDataId + '"]').find('.logStatIcon i').eq(0);
                                } else {
                                    $iconChooser = 'i.iconChooser';
                                    $FormIcon = $('.logStatEditList .logStatItem').eq($position).find($iconChooser);
                                    $ViewIcon = $parent.find('.logStatMenu').eq(0).find('>.logStat').eq($position).find('.logStatIcon i').eq(0);
                                }
                                let chooseClass = $(this).find('i').attr('data-class');
                                $('#logStatfontIconCollection').find('li').removeClass('selected');
                                $('#logStatfontIconCollection').find('li i[data-class="' + chooseClass + '"]').parent().addClass('selected');
                                let PrevClass = $FormIcon.attr('class').match(IconClassReg)[0];
                                $FormIcon.removeClass(PrevClass);
                                $FormIcon.addClass(chooseClass);
                                $ViewIcon.removeClass(PrevClass);
                                $ViewIcon.addClass(chooseClass);
                                $(".logStatIconList .closeIconChooser").trigger("click");
                            });
                            $('.logStatSort').on('mousedown', function () {
                                try {
                                    $('.logStatIconList').find('.closeIconChooser').trigger('click');
                                } catch (e) {
                                    console.log(e.message);
                                }
                            });
                            $logStatEditList.find('.ananSrt').AdvanceSorting({
                                targetParent: $item.closest('.SetHdlr').parent().find(".logStatMenu"),
                                targetElem: '.logStatAn',
                                sortableOptions: {
                                    items: "> div.logStatItem",
                                    handle: ".logStatSort",
                                    containment: 'div.ananSrt'
                                }
                            });
                            function getHighId() {
                                var num = $(".logStatItemInr").map(function () {
                                    return $(this).attr('data-dropitemdvid');
                                }).get();
                                var highest = Math.max.apply(Math, num);
                                return highest;
                            }
                        }
                        function linkFunctions() {
                            loadLinks();
                            var linklist = {
                                'internal': 'internal',
                                'external': 'external',
                                'onepage': 'onepage'
                            };
                            function loadLinks() {
                                try {
                                    var options = '';
                                    if ($('#chkOnePageMenu').is(':checked'))
                                        $('.menuHeader .onepagemenu  li').each(function (index, item) {
                                            var $item = $(this);
                                            options += '<option  value="' + $item.attr('data-opscroll') + '">' + $item.find(' > a > .pageName').text() + '</option>';
                                        });
                                    else {
                                        options += '<option value="select" disabled>Select a link</option>';
                                        options += '<option data-dashboard="true" value="2127">User profile</option>';
                                        options += EasyLibrary.GetPageOption();
                                        options += EasyLibrary.GetDasboardPageOption();
                                    }
                                    //$('.logStatPgLst').html(options);
                                    let $allLinkDropdowns = $('.logStatPgLst');
                                    $allLinkDropdowns.each(function () {

                                        let $this = $(this);
                                        let $dropIds = $this.parent().parent().attr('data-dropitemdvid');
                                        let $anchor = $activeDOM.find('.logStatAuth').find('[data-dropitemid="' + $dropIds + '"]').find('a');
                                        let prevSelected = $anchor.attr('data-prev');
                                        $this.html(options);
                                        if (prevSelected != undefined)
                                            $this.val(prevSelected);
                                        else
                                            $this.val('select');
                                    });
                                } catch (e) {
                                    console.log(e.message);
                                }
                            }
                            $('.logStatPgLst').on('change', function () {
                                let $this = $(this);
                                let $selected = $this.find('option:selected');
                                let isDashboardLink = $selected.attr('data-dashboard');
                                if (isDashboardLink) isDashboardLink = '/dashboard/';
                                else isDashboardLink = '/'
                                let urlText = $selected.text();
                                urlText = (urlText.trim()).replace(/ /g, '-');
                                let urlVal = $selected.val();
                                let $dropIds = $this.parent().parent().attr('data-dropitemdvid');
                                let $anchor = $logStatMenu.find('.logStatAuth').find('[data-dropitemid="' + $dropIds + '"]').find('a');
                                $anchor.attr('data-prev', urlVal);
                                if ($('#chkOnePageMenu').is(':checked')) {
                                    $anchor.removeClass('anchorpage');
                                    $anchor.attr({ 'data-link': linklist.onepage, 'data-onepage': urlVal, 'href': urlVal });
                                } else {
                                    $anchor.addClass('anchorpage');
                                    $anchor.attr({ 'data-link': linklist.internal, 'href': SageFrameHostURL + isDashboardLink + urlText });
                                }
                            });
                        }
                        function outrSrtDiv() {
                            $('.authSrt').children().children().first().after('<div class="authSrtOutr"></div>');
                            $('.logStatItemInr').appendTo('.authSrtOutr');
                            //$('.authSrtOutr').insertAfter('.ddwrap')
                            $logStatEditList.find('.authSrtOutr').AdvanceSorting({
                                targetParent: $item.closest('.SetHdlr').parent().find(".logStatMenu").find(".dropdown-content"),
                                targetElem: '.drop-cont',
                                sortableOptions: {
                                    items: "div.logStatItemInr",
                                    handle: ".logStatSort",
                                    containment: 'div.authSrtOutr'
                                }
                            });
                        }
                        function imageOrTextOrBoth() {
                        }
                    },
                    "active": function () {
                        $('#chkIsAnUsrBasic').trigger('change');
                    }
                },
                "Image": {
                    "DOM": '<div class="imageLogin"></div>',
                    "onload": function ($item) {
                        let $imageParent = $activeDOM.find('.logStatUImg');
                        (function ($) {
                            let imageDefault = {
                                height: 'H-50',
                                width: 'W-50',
                                shape: 'rectangle'
                            }
                            $.fn.ImageDimensions = function ($applyOn) {
                                let $img = $applyOn.find('img');
                                let da = DeviceAlpha();
                                let hasDn = $applyOn.hasClass(da + 'Dn');
                                let $dom = this;
                                let heightSlider = CreateSliderDOM('height-slider', 'height-handle', 'Height');
                                let widthSlider = CreateSliderDOM('width-slider', 'width-handle', 'Width');
                                let sizeSlider = CreateSliderDOM('size-slider', 'size-handle', 'Size');
                                //let imageVisibility = CreateCheckboxDOM('Visibility', 'show-image', '');
                                let imageVisibility = '';
                                let imageShape = '<div class="field-row"><div class="field-row stElWrap col60-40"><label class="fCol">Image Display</label><span class="fCol select__box txAl-r">' + SelectDOMCreate('slc-image-shape', '', [['round', 'Round'], ['rect', 'Rectangle']]) + '</span></div></div>';
                                let dom = imageVisibility;
                                if (!hasDn)
                                    dom += `<div class='image-dimension'>${imageShape}
                                                <div class ="forRect">${heightSlider}${widthSlider}</div>
                                                <div class="forRound">
                                                    ${sizeSlider}
                                                </div>
                                                </div>`

                                $dom.html(dom)
                                let functions = {
                                    controllers: {
                                        shape: $('#slc-image-shape'),
                                        visibility: $('#show-image'),
                                        sliders: $('.image-dimension')
                                    },
                                    imageWidth: function () {
                                        AdvanceSageSlider($('#width-slider'), $('#width-handle'), 1, 100, GetValueByClassName($applyOn, 'H-[0-9]{1,3}', 'H-'), this.heightChange, $applyOn, 'px');
                                    },
                                    imageHeight: function () {
                                        AdvanceSageSlider($('#height-slider'), $('#height-handle'), 1, 100, GetValueByClassName($applyOn, 'W-[0-9]{1,3}', 'W-'), this.widthChange, $applyOn, 'px');
                                    },
                                    widthChange: function (space, $par) {
                                        ReplaceClassByPattern($par, 'W-[0-9]{1,3}', 'W-' + space);
                                    },
                                    heightChange: function (space, $par) {
                                        ReplaceClassByPattern($par, 'H-[0-9]{1,3}', 'H-' + space);
                                    },
                                    heightWidthChange: function (space, $par) {
                                        ReplaceClassByPattern($par, 'W-[0-9]{1,3}', 'W-' + space);
                                        ReplaceClassByPattern($par, 'H-[0-9]{1,3}', 'H-' + space);
                                    },
                                    roundImageSize: function () {
                                        AdvanceSageSlider($('#size-slider'), $('#size-handle'), 1, 100, GetValueByClassName($applyOn, 'W-[0-9]{1,3}', 'W-'), this.heightWidthChange, $applyOn, 'px');
                                    },
                                    visibilityChange: function () {
                                        let $this = $(this);
                                        if ($this.prop('checked')) {
                                            $applyOn.removeClass(da + 'Dn');
                                            $(functions.controllers.sliders).fadeIn();
                                        }
                                        else {
                                            $applyOn.addClass(da + 'Dn');
                                            $(functions.controllers.sliders).fadeOut();
                                        }
                                    },
                                    shapeChange: function () {
                                        let selected = $(this).val();
                                        if (selected == 'round') {
                                            $img.css('border-radius', '50%');
                                            $('.forRound').show();
                                            $('.forRect').hide();
                                        }
                                        else if (selected == 'rect') {
                                            $img.css('border-radius', '0');
                                            $('.forRect').show();
                                            $('.forRound').hide();
                                        }
                                    },
                                    bindEvents: function () {
                                        let _this = this;
                                        let $shapeSelect = _this.controllers.shape;
                                        let $showImage = _this.controllers.visibility;
                                        $shapeSelect.off('change').on('change', _this.shapeChange);
                                        $showImage.off().on('click', _this.visibilityChange);
                                    },
                                    loadSettings: function () {
                                        let $shapeSelect = this.controllers.shape;
                                        let $showImage = this.controllers.visibility;
                                        let bordeRadius = $img.css('border-radius');
                                        let shape = 'rect'
                                        if (bordeRadius != '0px')
                                            shape = 'round';
                                        $shapeSelect.val(shape);
                                        $showImage.prop('checked', $applyOn.hasClass(da + 'Dn'));
                                        $showImage.trigger('click');
                                        $shapeSelect.trigger('change');
                                        this.imageHeight();
                                        this.imageWidth();
                                        this.roundImageSize();
                                    },
                                    init: function () {
                                        this.bindEvents();
                                        this.loadSettings();
                                    }
                                }
                                functions.init();
                            }
                        })(jQuery)
                        $('.imageLogin').ImageDimensions($imageParent);
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("loginstatus/loginSize"),
                    "onload": function () {
                        function handleDDChange(val) {
                            let options = {}
                            let tORf = !(/\b(logStatUIcns)|(logStatSMIcns)|(logStatMIcns)/g).test(val);
                            $.extend(options, {
                                size: true,
                                width: false,
                                spacing: tORf,
                                transform: tORf,
                                family: tORf,
                                weight: tORf,
                                color: true
                            })
                            $("#sizeDOM").AdvanceTextSetting({
                                targetParent: $activeDOM,
                                targetElem: $activeDOM.find(val),
                                options
                            });

                        }
                        let $checkloginStatus = $('#chkIsAnUsrSize');
                        let $dropDown = $('#logStatSizeAplyOn');
                        let comm = component["login status"].common
                        comm.loginStateChange($checkloginStatus, $dropDown)
                        comm.dropdownChange($dropDown, handleDDChange)

                    },
                    "active": function () {

                        $('#chkIsAnUsrSize').trigger('change');
                        $('#logStatSizeAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#logStatSizeAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("loginstatus/loginStatusSpacing"),
                    "onload": function () {
                        function handleDDChange(val) {
                            $("#logStatAllSpacing").AdvanceSpacing({
                                targetParent: $activeDOM,
                                targetElem: $activeDOM.find(val),
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                }
                            });
                        }
                        let $checkloginStatus = $('#chkIsAnUsrSpc');
                        let $dropDown = $('#logStatSpcAplyOn');
                        let comm = component["login status"].common
                        comm.loginStateChange($checkloginStatus, $dropDown)
                        comm.dropdownChange($dropDown, handleDDChange)
                    },
                    "active": function () {
                        $('#chkIsAnUsrSpc').trigger('change');
                        $('#logStatSpcAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#logStatSpcAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("loginstatus/loginHover"),
                    "onload": function (param) {
                        function handleDDChange(val) {

                            $('#hoverDOM').AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: val,
                                options: {
                                    shadow: "on",
                                    border: {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"],
                                    },
                                    zoom: "on",
                                    color: ['background', 'text']
                                }
                            });
                        }
                        let $checkloginStatus = $('#hoverLoginCheck');
                        let $dropDown = $('#hoverApplyOn');

                        let comm = component["login status"].common
                        comm.loginStateChange($checkloginStatus, $dropDown);
                        comm.dropdownChange($dropDown, handleDDChange, param);
                    },
                    "active": function () {
                        $('#hoverLoginCheck').trigger('change');
                        $('#hoverApplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#hoverApplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('loginStatus/loginStatusBackground'),
                    "onload": function ($item) {
                        function InitBackground(val) {
                            $("#logStatBGrnd").empty();
                            $("#logStatBGrnd").AdvanceBackground({
                                targetParent: $activeDOM,
                                targetElem: $activeDOM.find(val),
                                options: ["color"]
                            });
                        }
                        let $checkloginStatus = $('#chkIsAnUsrBg');
                        let $dropDown = $('#logStatBGrndAplyOn');
                        let comm = component["login status"].common
                        comm.loginStateChange($checkloginStatus, $dropDown)
                        comm.dropdownChange($dropDown, InitBackground)
                    },
                    "active": function () {
                        $('#logStatBGrndAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#logStatBGrndAplyOn').trigger('change').addClass('slcActiveEleSetting');
                        $('#chkIsAnUsrBg').trigger('change');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("loginstatus/borderDOM"),
                    "onload": function () {
                        function handleDDChange(val) {
                            $('#borderDOM').AdvanceBorder({
                                targetParent: $activeDOM,
                                targetElem: $activeDOM.find(val),
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });
                        }
                        let $checkloginStatus = $('#chkLoginStatus');
                        let $dropDown = $('#slcApplyBorderOn');
                        let comm = component["login status"].common
                        comm.loginStateChange($checkloginStatus, $dropDown)
                        comm.dropdownChange($dropDown, handleDDChange)
                    },
                    'active': function () {
                        $('#chkLoginStatus').trigger('change')
                        $('#slcApplyBorderOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcApplyBorderOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("loginstatus/borderRadiusDOM"),
                    "onload": function () {
                        function handleDDChange(val) {
                            $('#borderRadiusDOM').AdvanceBoxRadius({
                                targetParent: $activeDOM,
                                targetElem: $activeDOM.find(val),
                                options: {
                                    "max": 50,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });
                        }
                        let $checkloginStatus = $('#chkLoginStatu');
                        let $dropDown = $('#slcApplyBorderRadiusOn');
                        let comm = component["login status"].common
                        comm.loginStateChange($checkloginStatus, $dropDown)
                        comm.dropdownChange($dropDown, handleDDChange)
                    },
                    'active': function () {
                        $('#chkLoginStatu').trigger('change');
                        $('#slcApplyBorderRadiusOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcApplyBorderRadiusOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("loginstatus/shadowDOM"),
                    "onload": function () {
                        function handleDDChange(val) {
                            $('#shadowDOM').AdvanceBoxShadow({
                                targetParent: $activeDOM,
                                targetElem: $activeDOM.find(val),
                            });
                        }
                        let $checkloginStatus = $('#chkLoginStatusShadow');
                        let $dropDown = $('#slcApplyShadowOn');
                        let comm = component["login status"].common
                        comm.loginStateChange($checkloginStatus, $dropDown)
                        comm.dropdownChange($dropDown, handleDDChange)
                    },
                    'active': function () {
                        $('#chkLoginStatusShadow').trigger('change')
                        $('#slcApplyShadowOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcApplyShadowOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Image": {
                    'DOM': EasyLibrary.ReadDOM("loginstatus/loginBasicRes"),
                    'onload': function () {
                        let device = ViewDeviceAlpha();
                        let regex = new RegExp("\\b" + device + "Dn", "g");
                        let classes = $activeDOM.attr("class").match(regex);
                        if (typeof (classes) !== "undefined" && classes !== null) 
                            $("#profileVisibility").prop("checked", false);
                        else $("#profileVisibility").prop("checked", true);
                        $("#profileVisibility").off().on("change", function () {
                            if ($(this).is(":checked"))
                                $activeDOM.removeClass(device + "Dn").removeClass(device + "Dib").addClass(device + "Dib");
                            else $activeDOM.removeClass(device + "Dib").addClass(device + "Dn");
                        });
                        component['login status'].settingDOMs.tabs.Image.onload();
                    }
                },
                'Text': {
                    'DOM': EasyLibrary.ReadDOM("loginstatus/loginSize"),
                    'onload': function () {
                        component['login status'].settingDOMs.tabs.Text.onload();
                    },
                    "active": function () {
                        component['login status'].settingDOMs.tabs.Text.active();
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("loginstatus/loginStatusSpacing"),
                    "onload": function () {
                        component['login status'].settingDOMs.tabs.Spacing.onload();
                    },
                    "active": function () {
                        component['login status'].settingDOMs.tabs.Spacing.active();
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "view": {
            "view": function () {
                try {
                    this.library.viewEvents();
                } catch (e) {
                    console.log(e.message);
                }
            },
            "library":
            {
                "viewEvents": function () {
                    let $thisView = this;
                    let $logStatWrap = $('.loginStatus').find('.logStatMenu');
                    let $actDrop = $('.logStatActCnt');
                    try {
                        chkLogStat();
                        $logStatWrap.on('mouseover', '.logStatAuth', function (e) {
                            try {
                                var $this = $(this);
                                $this.find('.dropdown-content').removeClass('Dn').addClass('Dfx');

                            } catch (e) {
                                console.log(e.message);
                            }
                        });
                        $logStatWrap.on('mouseleave', function (e) {
                            try {
                                var $this = $(this);
                                $this.find('.dropdown-content').removeClass('Dfx').addClass('Dn');

                            } catch (e) {
                                console.log(e.message);
                            }
                        });
                        $logStatWrap.on('mouseover mouseout', '.drop-cont', function (e) {
                            try {
                                var $this = $(this);
                                if (e.type === 'mouseover') {
                                    $this.parent().removeClass('Dn').addClass('Dfx');

                                } else if (e.type === 'mouseout') {
                                    $this.parent().removeClass('Dfx').addClass('Dn');

                                }
                            } catch (e) {
                                console.log(e.message);
                            }
                        });

                        function chkLogStat() {
                            try {
                                var config = {
                                    method: '',
                                    url: SageFrameHostURL + '/Builder',
                                    data: '',
                                    ajaxSuccess: '',
                                    ajaxFailure: ''
                                };
                                config.method = "GetProfile";

                                config.ajaxSuccess = chkLogStatSuccess;
                                CommonLibrary.AjaxCall(config);
                            } catch (e) {
                                console.log(e.message);
                            }
                        }
                        function chkLogStatSuccess(data) {
                            let $response = data.d;
                            if ($response === null) {
                                $logStatWrap.find('.logStatAuth').removeClass('Dfx').addClass('Dn');
                                $logStatWrap.find('.logStatAn').removeClass('Dn').addClass('Dfx');
                                $logStatWrap.find('.logStatAuth').find('.logStatUImg img').attr('src', '/Modules/Admin/UserManagement/UserPic/NoImage.png');
                            } else {
                                $logStatWrap.find('.logStatAuth').removeClass('Dn').addClass('Dfx');
                                $logStatWrap.find('.logStatAn').removeClass('Dfx').addClass('Dn');
                                $logStatWrap.find('.logStatAuth').find('.logStatRef').find('.logStatLnk a').css('cursor', 'context-menu').text($response.UserName);
                                if ($response.Image == null || $response.Image == '') $response.Image = 'NoImage.png';
                                $logStatWrap.find('.logStatAuth').find('.logStatUImg img').attr('src', '/Modules/Admin/UserManagement/UserPic/' + $response.Image);
                            }
                        };
                        $('.logoutpage').on('click', function () {
                            $('.logoutConfirm')[0].click();
                        });
                        $('.profileurl').attr('href', SageFrameHostURL + '/dashboard/user-profile');
                    } catch (e) {
                        console.log(e.message);
                    }
                },
                "messageDisplay": function (message, msgType) {
                    try {
                        var msgSec = $("#messageSection");
                        var msgLbl = $("#mgdLabel");;
                        if (msgType === 'success') {
                            msgSec.css({ 'margin': '10px 0px', 'padding': '12px', 'color': '#4F8A10', 'background-color': '#DFF2BF' });
                            msgLbl.css({ 'color': '#4F8A10', 'background-color': '#DFF2BF' });
                        } else if (msgType === 'warning') {
                            msgSec.css({ 'margin': '10px 0px', 'padding': '12px', 'color': '#9F6000', 'background-color': '#FEEFB3' });
                            msgLbl.css({ 'color': '#9F6000', 'background-color': '#FEEFB3' });
                        } else if (msgType === 'error') {
                            msgSec.css({ 'margin': '10px 0px', 'padding': '12px', 'color': '#D8000C', 'background-color': '#FFD2D2' });
                            msgLbl.css({ 'color': '#D8000C', 'background-color': '#FFD2D2' });
                        }
                        msgLbl.text(message);
                        msgSec.fadeIn('fast');
                    } catch (e) {
                        console.log(e.message);
                    }
                },
            }
        },
        "common": {
            reloadAllSettingTabs: function (setOrStyleDOM, excludeThis) {
                if (Object.prototype.toString.call(excludeThis) !== '[object Array]') {
                    excludeThis = $.map(excludeThis.split(','), $.trim);
                }
                let componentName = $activeDOM.attr('data-type');
                let tabArray = Object.keys(component[componentName][setOrStyleDOM].tabs);
                $.each(excludeThis, function (i, val) {
                    let ii = tabArray.indexOf(val);
                    if (ii >= 0) {
                        tabArray.splice(tabArray.indexOf(val), 1);
                    }
                });
                tabArray.forEach(function (val) {
                    component[componentName][setOrStyleDOM].tabs[val].onload();
                });

            },
            showHideUernameWelcome: function () {
                let $usernameWelcome = $('#show-welcome-username');
                let da = DeviceAlpha();
                let dadn = da + 'Dn';
                let $welcomeUser = $activeDOM.find('.logStatAuth  .logStatRef>span');
                let showUserWelcom = $welcomeUser.hasClass(da + 'Dn');
                let $hidable = $('.logStatItem .hidable');
                if (!showUserWelcom) {
                    $usernameWelcome.prop('checked', true);
                    $hidable.removeClass(dadn);
                }
                else {
                    $usernameWelcome.prop('checked', false);
                    $hidable.addClass(dadn);
                }

                $usernameWelcome.off().on('change', function () {
                    if ($(this).prop('checked')) {
                        $hidable.removeClass(dadn);
                        $welcomeUser.removeClass(dadn);
                    }
                    else {
                        $welcomeUser.addClass(dadn);
                        $hidable.addClass(dadn);
                    }

                });
            },
            showHideIconOptions: function ($all) {
                let showOrHideIcons = $activeDOM.attr('data-fonticons');
                let showOrHideText = $activeDOM.attr('data-anTextOnly');

                if (showOrHideIcons === 'show') {
                    $('.ddlAn.hideable').removeClass('Dn').addClass('Db');
                }
                else if (showOrHideIcons === 'hide') {
                    $('.ddlAn.hideable').removeClass('Db').addClass('Dn');
                }

                if (showOrHideText === 'show') {
                    $('.ddlAn.hideableText').removeClass('Dn').addClass('Db');
                }
                else if (showOrHideText === 'hide') {
                    $('.ddlAn.hideableText').removeClass('Db').addClass('Dn');
                }
            },
            menuHideShow: function () {
                let menuShowHideIcons = $activeDOM.attr('data-menuIcons');
                let menuShowHideText = $activeDOM.attr('data-menuText');
                if (menuShowHideIcons === 'show') {
                    $('.ddlAuth.hideMenuIcon').removeClass('Dn').addClass('Db');
                }
                else if (menuShowHideIcons === 'hide') {
                    $('.ddlAuth.hideMenuIcon').removeClass('Db').addClass('Dn');
                }

                if (menuShowHideText === 'show') {
                    $('.ddlAuth.hideMenuText').removeClass('Dn').addClass('Db');
                }
                else if (menuShowHideText === 'hide') {
                    $('.ddlAuth.hideMenuText').removeClass('Db').addClass('Dn');
                }
            },
            loginStateChange: function ($checbox, $ddSelect) {
                $checbox.prop('checked', $activeDOM.find('.logStatAuth').hasClass('Dn'));
                $checbox.off().on('change', function () {
                    let $this = $(this);

                    if ($this.prop('checked')) {//annonymous
                        $activeDOM.find('.logStatAn').removeClass('Dn');
                        $activeDOM.find('.logStatAuth').addClass('Dn');
                        $ddSelect.find('.ddlAuth').removeClass('Db').addClass('Dn');
                        $ddSelect.find('.ddlAn').removeClass('Dn').addClass('Db').eq(0).prop('selected', 'selected').trigger('change');
                        component['login status'].common.showHideIconOptions();
                    }
                    else {//authenticated
                        $activeDOM.find('.logStatAn').addClass('Dn');
                        $activeDOM.find('.logStatAuth').removeClass('Dn');
                        $ddSelect.find('.ddlAn').removeClass('Db').addClass('Dn');
                        $ddSelect.find('.ddlAuth').removeClass('Dn').addClass('Db').eq(0).prop('selected', 'selected').trigger('change');
                        component['login status'].common.menuHideShow();
                    }

                    $('.chkIsAnUsr').prop('checked', $this.prop('checked'));
                });

            },

            dropdownChange: function ($dropDown, callback, param) {
                if (param) $dropDown.trigger('change');
                $dropDown.off().on('change', function () {

                    let $selected = $(this).find('option:selected').val();
                    if ($selected === '.dropdown-content' || $selected === '.logStatSMIcns' || $selected === '.drop-item' || $selected === '.drop-cont') {
                        $('.logStatMIcn').trigger('mouseover');
                    }
                    else {
                        $('.logStatMIcn').trigger('mouseout');
                    }
                    $activeDOM.find('.actEle').removeClass('actEle');
                    $activeDOM.find($selected).addClass('actEle');
                    if (typeof callback == 'function')
                        callback($selected);
                });
            }
        },
        "removeedit": function ($editDOM) {
            //$editDOM.find('#logoutStateEle').html('');
            //$editDOM.find('#logInStateEle').html('');
            $editDOM.find('.logStatLnksAuth').html('');
            $editDOM.find('.logStatAuth').find('.logStatUImg img').attr('src', '/Modules/Admin/UserManagement/UserPic/NoImage.png');
        },
        "remove": function ($cloneDOM) {
            $cloneDOM.find('.logStatLnksAuth').html('');
            $cloneDOM.find('.logStatAuth').find('.logStatUImg img').attr('src', '/Modules/Admin/UserManagement/UserPic/NoImage.png');
        }
    }
,    "logo slider": {
        "componentname": "logo slider",
        "category": "advance",
        "icon": "fa fa-image",
        "row": false,
        "hidden": false,
        "type": "carousel",
        "bucket": true,
        "defaultdata": EasyLibrary.ReadDOM("logoslider/logoslider"),
        "onDrop": function ($appendLayer) { },

        "onsort": function (ui) {
            var sliderContainer = ui.find('.LogoSliderWrapper');
            sliderContainer.removeClass('binded');
            var carousel = new CarouselInit(sliderContainer);
        },

        "loadSetting": function ($item) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            $appendLayer.find('div.logoslider').attr('data-id', 'sl_' + Math.floor((Math.random() * 1000) + 100));
            var sliderContainer = $appendLayer.find('.LogoSliderWrapper');
            if (dropped) {
                var sliderLib = this.view.library;
                sliderLib.ReAssignViewItems(sliderContainer);
                this.common.InitalizeEvents(sliderContainer, sliderContainer.attr('data-type'));
                sliderContainer.removeClass('binded');
                var carousel = new CarouselInit(sliderContainer);
                this.view.library.SetCustomEvents();
                SettingEvents();
            }
            else {
                this.resize();
            }

        },
        "settingDOMs": {
            "tabs": {
                "Basic":
                {
                    "DOM": EasyLibrary.ReadDOM("logoslider/logosliderbasic"),
                    "onload": function ($item) {
                        var $parent = $item.closest('.SetHdlr').parent();
                        var sliderContainer = $parent.find('.LogoSliderWrapper');
                        var sliderHeading = $parent.find('.sliderHeading');
                        var navigationArrows = $parent.find('.arrows-wrapper');

                        var pagerDot = $parent.find('.pager-dot');

                        LoadSettings();
                        TriggerEvents();

                        function LoadSettings() {

                            var perView = DeviceItemPerView(sliderContainer.attr('data-itemsperview'));
                            if (!perView) perView = "3";

                            if ($parent.hasClass('fullpagebanner')) {
                                $('#heightAdjustCarousel').prop('checked', true);
                            } else {
                                $('#heightAdjustCarousel').prop('checked', false);
                            }

                            $('#slcSliderItemsPerView').val(perView);
                            $('#slcSliderAnimation').val(sliderContainer.parent().attr('data-transition'));

                            var loop = sliderContainer.parent().attr('data-loop');
                            if (typeof loop !== "undefined" && loop.length > 0)
                                $('#sliderAutoSlide').prop('checked', true);


                            SetToggleValueBasedOnHideElement(sliderHeading, '#showSliderHeading');
                            SetToggleValueBasedOnHideElement(navigationArrows, '#showNavigationalArrows');
                            SetToggleValueBasedOnHideElement(pagerDot, '#showSliderDots');

                            //function ChangeCaroselHeight(space) {
                            //    $parent.children().eq(1).height(space);
                            //}

                            component["logo slider"].common.sliderHeight();
                            component["logo slider"].common.sliderImageHeight();

                            //function ChangeItemsHeight(space) {
                            //    var childItems = sliderContainer.find('.itemWrapper').children();
                            //    childItems.each(function (index) {
                            //        $(this).find('img').height(space);
                            //    });
                            //}


                            // var firstItemHeight = sliderContainer.find('.itemWrapper').children().first().height();
                            //AdvanceSageSlider($('#logoSliderHeightSlider'), $('#logoSliderHeightHandle'), 0, 1000, $parent.children().eq(1).height(), ChangeCaroselHeight, $parent, 'px');
                            // AdvanceSageSlider($('#logoSliderItemHeightSlider'), $('#logoSliderItemHeightHandle'), 0, 1000, firstItemHeight, ChangeItemsHeight, $parent, 'px');
                        }

                        function TriggerEvents() {
                            var gutterSpaceControl = $('#sliderHvrGutterSpace');

                            var horGutterSpace = sliderContainer.attr('data-horzspacing');

                            var currentMarginRight = 0;
                            if (!horGutterSpace) currentMarginRight = 0; else currentMarginRight = horGutterSpace;

                            var sliderLib = component["logo slider"]["view"]["library"];
                            var changeRightSpace = sliderLib.ChangeRightSpacing;

                            function ReDefineGutter(space, $par) {
                                changeRightSpace(space, $par, '.LogoSliderWrapper', '.itemWrapper');
                            }

                            AdvanceSageSlider($('#sliderHorGutterSpaceSlider'), $('#sliderHorGutterSpaceHandle'), gutterSpaceControl.data('slidemin'), gutterSpaceControl.data('slidemax'), currentMarginRight, ReDefineGutter, $parent, 'px');

                            function ReAssignLiItems(count, $par) {
                                sliderLib.ReAssignViewItems(sliderContainer, count);
                            }

                            var currentTotal = sliderContainer.find('.itemWrapper').children().length;

                            EasyLibrary.NumberCounter($('.manualNumCounter'), 1, 50, 1, currentTotal, $parent, ReAssignLiItems);


                            $('#sliderAutoSlide').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    sliderContainer.parent().attr('data-loop', "loop");
                                } else {
                                    sliderContainer.parent().attr('data-loop', "");
                                }
                                sliderContainer.removeClass('binded');
                                InitCarouselSlider(sliderContainer);
                            });


                            $('#heightAdjustCarousel').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    $parent.addClass('fullpagebanner');
                                    AdjustSizeFullpage($parent);
                                } else {
                                    RemoveCarouselHeight($parent);
                                    $parent.removeClass('fullpagebanner');
                                }
                            });

                            $('#slcSliderItemsPerView').off().on('change', function () {
                                var totalRequired = $('.totalNumCount').text();
                                sliderLib.ReAssignViewItems(sliderContainer, totalRequired);

                                SettingEvents();

                            });

                            $('#slcSliderAnimation').off().on('change', function () {

                                var transition = $(this).find('option:selected').text().toLowerCase();

                                sliderContainer.parent().attr('data-transition', transition);

                                sliderContainer.removeClass('binded');
                                InitCarouselSlider(sliderContainer);
                            });

                            SetEventToShowHideElement($item, $('#showSliderHeading'), sliderHeading);
                            SetEventToShowHideElement($item, $('#showNavigationalArrows'), navigationArrows);
                            SetEventToShowHideElement($item, $('#showSliderDots'), pagerDot);

                        }
                    }
                },
              
                "Spacing":
                    {
                        "options": {
                            "margin": {
                                "max": 80,
                                "min": -80,
                                "times": 5,
                                "position": ["all", "top", "left", "bottom", "right"]
                            },
                        }
                    },               

            },
            "selectLayer": function ($elem) {
                return $elem.closest('.SetHdlr').parent();

                //$(".editor-row").removeClass("activeSetting");
                //var $parent = $elem.parents(".editor-row");
                //$parent.addClass("activeSetting");
                //return $parent;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background":
                {
                    "options": ["image", "color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius":
                    {
                        "options": {
                            "max": 50,
                            "min": 0,
                            "times": 1,
                            "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                        }
                    },
                "Box Shadow":
                    {
                        "options": {

                        }
                }                
            },
            "selectLayer": function ($elem) {
                return $elem.closest('.SetHdlr').parent();
            }
        },

        //-------------------------------------------------
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Slider Height": {
                            "DOM": CreateSliderDOM('logoSliderHeightSlider', 'logoSliderHeightHandle', 'Logo Slider Height'),
                            "prepend": "true",
                            "onload": function () {
                                component["logo slider"].common.sliderHeight();
                            }
                        },
                        "Image Height": {
                            "DOM": CreateSliderDOM('logoSliderItemHeightSlider', 'logoSliderItemHeightHandle', 'Logo Image Height'),
                            "prepend": "true",
                            "onload": function () {
                                component["logo slider"].common.sliderImageHeight();
                            }
                        },
                        "Visibility": {},
                        "Per slider": {
                            "DOM": "<div id='logoPerSlide'></div>",
                            "onload": function () {
                                let $slider = $activeDOM.find('.LogoSliderWrapper');
                                $('#logoPerSlide').AdvanceItemPerView({
                                    label: 'Items per view',
                                    min: 1,
                                    max: 5,
                                    value: DeviceItemPerView($slider.attr('data-itemsperview')),
                                    onChange: function (val) {
                                        $slider.attr('data-itemsperview', SetDeviceItemPerView($slider.attr('data-itemsperview'), val));
                                        let lib = component["logo slider"]["view"]["library"];
                                        lib.ReDrawSliderItems($slider, val, false);
                                        lib.UpdateWidthAttribute($slider, val);
                                        let dev = ViewDeviceAlpha();
                                        let $spaceAttr = 'data-' + dev + 'horzspacing';
                                        lib.ChangeRightSpacing($slider.attr($spaceAttr), $slider.parent(), '.LogoSliderWrapper', '.itemWrapper');
                                    }
                                });
                            }
                        },
                        "Gutter Spacing": {
                            custom: true,
                            DOM: `<div class="field-row">
                                    <h4 id="logoGutterSpaceWrap" data-times="5">Gutter Spacing</h4>
                                    <div class="field-row stElWrap col100" id="logoGutterSpace">
                                        <div class="range__slider fCol">
                                            <div id="logoGutterSpaceSlider">
                                                <div id="logoGutterSpaceHandle" class="ui-slider-handle" title="Horizontal">0</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>`,
                            onload: function () {
                                let dev = ViewDeviceAlpha();
                                let sliderLib = component["logo slider"]["view"]["library"];
                                let changeRightSpace = sliderLib.ChangeRightSpacing;
                                let currentMarginRight = $activeDOM.find('.LogoSliderWrapper').attr('data-' + dev + 'horzspacing');

                                function ReDefineGutter(space, $par) {
                                    changeRightSpace(space, $par, '.LogoSliderWrapper', '.itemWrapper');
                                }

                                AdvanceSageSlider($('#logoGutterSpaceSlider'), $('#logoGutterSpaceHandle'), 0, 40, currentMarginRight, ReDefineGutter, $activeDOM, 'px');
                            }
                        }
                    }
                },

                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "left", "right"]
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },

        //---------------------------------------------

        resize: function () {
            this.view.view();
        },
        "view": {
            "view": function () {
                let dev = ViewDeviceAlpha();
                let $container = $('.LogoSliderWrapper');
                let self = this;
                let isView = (typeof SettingEvents === 'undefined');
                $container.each(function () {
                    var $this = $(this);
                    //$this.removeClass('binded');
                    //var carousel = new CarouselInit($this);
                    let perView = DeviceItemPerView($this.attr('data-itemsperview'));
                    self.library.ReDrawSliderItems($this, perView, isView);
                    self.library.UpdateWidthAttribute($this, perView);
                    let $spaceAttr = 'data-' + dev + 'horzspacing';
                    self.library.ChangeRightSpacing($this.attr($spaceAttr), $this.parent(), '.LogoSliderWrapper', '.itemWrapper');
                    //if (dev == 'm') {
                    //    self.library.ReDrawSliderItems($this, 1, isView);
                    //}
                    //else if (dev == 't') {
                    //    self.library.ReDrawSliderItems($this, 2, isView);
                    //} else {
                    //    self.library.ReDrawSliderItems($this, $this.attr('data-itemsperview'), isView);
                    //}
                });
            },

            "library": {

                "ReAssignViewItems": function ($container, $newtotalItems) {
                    var currentCount = 0;
                    var dataType = $container.attr('data-type');

                    var $totalItems = parseInt($container.attr('data-totalcount'));
                    var $perView = parseInt(DeviceItemPerView($container.attr('data-itemsperview')));

                    var liItem = $container.find('.itemWrapper'); // CHECK FOR EXISTING ITEMS

                    if (liItem.length <= 0) {
                        // IF FIRST TIME
                        var itemsWrapper = $container.find('.itemsWrapper');

                        var updatedDefaultData = this.FindReplaceDeleteHelper(component[dataType].defaultdata);
                        updatedDefaultData = this.DisableDragging(updatedDefaultData);
                        updatedDefaultData = this.EnableComponentSettings(updatedDefaultData);
                        var compHTML = '<div class="Ml-0 Mr-0 Mb-0 Mt-0 sfFixed Pt-0 Pr-0 Pb-0 Pl-0 tMl-0 tMr-0 tMb-0 tMt-0 mMl-0 mMr-0 mMb-0 mMt-0" style="display: flex !important; height: 100%; align-items: center; justify-content: center;"> ' + updatedDefaultData + '</div>';

                        this.UpdateWidthAttribute($container, $perView);

                        var itemsAdded = 0;
                        while (itemsAdded !== $totalItems) {
                            var itemHTML = '';
                            for (var i = 0; i < $perView; i++) {
                                itemHTML += compHTML;
                                itemsAdded++;
                            }
                            itemsWrapper.append('<li class="itemWrapper" style="display: inline-flex; height: 100%; background-repeat: no-repeat; background-size: cover; position: relative; justify-content: center; align-items: center;">' + itemHTML + '</li>');
                        }

                        var space = $container.attr('data-horzspacing');
                        if (!space) space = 0;
                        this.ChangeRightSpacing(space, $container.parent(), '.LogoSliderWrapper', '.itemWrapper');
                        this.SetCustomEvents();

                    } else {

                        var newPerView = $('#slcSliderItemsPerView').find("option:selected").text();
                        var itemsPerView = parseInt(newPerView);

                        //var liChildren = liItem.children();

                        if (itemsPerView !== $perView) { // [ ITEMS PER VIEW CHANGE ]
                            this.ReDrawSliderItems($container, itemsPerView, false);
                        }
                        else {
                            var liChildren = liItem.children();
                            var currentItemsCount = liChildren.length;

                            var totalItems = parseInt($newtotalItems);

                            var addComponent = true;
                            var itemDiff = Math.abs(currentItemsCount - totalItems);
                            if (totalItems < currentItemsCount) addComponent = false;

                            if (!addComponent) { // REMOVE COMPONENT

                                SageConfirmDialog(' Taking this step will result in some data loss. Do you wish to continue ?').done(function () {

                                    var lastli = liItem.last(); // liItem.eq(liItem.length - 1);
                                    lastli.children().last().remove();

                                    if (lastli.children().length <= 0) {
                                        liItem.last().remove();
                                        $container.removeClass('binded');
                                        InitCarouselSlider($container);
                                    }

                                }).fail(function () {
                                    $('#numCounterTotal').html($container.find('.itemWrapper').children().length);
                                });

                            }
                            else {  // ADD COMPONENT
                                var itemCopy = liChildren.eq(0).clone(true);
                                var lastliItem = liItem.last();
                                if (lastliItem.children().length < $perView) { // LESS THAN REQUIRED
                                    lastliItem.append(itemCopy);
                                    component["logo slider"]["common"].InitalizeEvents(itemCopy, $container.attr('data-type'));
                                } else {
                                    // [ ADD NEW LI ITEM ( REQUIRES RE-INIT ) ]
                                    $container.find('.itemsWrapper').append('<li class="itemWrapper" style="display: inline-block; height: 100%; background-repeat: no-repeat; background-size: cover; position: relative;"></li>');
                                    $container.find('.itemWrapper').last().append(itemCopy);
                                    $container.removeClass('binded');
                                    InitCarouselSlider($container);
                                    component["logo slider"]["common"].InitalizeEvents(itemCopy, $container.attr('data-type'));
                                }
                            }
                        }

                        //$container.attr('data-itemsperview', newPerView);
                        $container.attr('data-itemsperview', SetDeviceItemPerView($container.attr('data-itemsperview'), newPerView));

                        this.UpdateWidthAttribute($container, itemsPerView);

                        var horizonalGutterSpace = $('#sliderHorGutterSpaceHandle').text();
                        this.ChangeRightSpacing(horizonalGutterSpace, $container.parent(), '.LogoSliderWrapper', '.itemWrapper');

                    }
                },

                "ReDrawSliderItems": function ($container, itemsPerView, isView) {

                    var liItem = $container.find('.itemWrapper'); // CHECK FOR EXISTING ITEMS

                    var liChildren = liItem.children();

                    var liChildrenhtmlArray = [];
                    liChildren.each(function () {
                        liChildrenhtmlArray.push($(this)[0].outerHTML);
                    });

                    var itemsWrapper = $container.find('.itemsWrapper');
                    itemsWrapper.empty();

                    var childCount = liChildrenhtmlArray.length;

                    var itemsAdded = 0;

                    while (itemsAdded < childCount) {
                        var itemHTML = '';
                        for (var i = 0; i < itemsPerView; i++) {

                            if (liChildrenhtmlArray.length === itemsAdded) break;
                            itemHTML += liChildrenhtmlArray[itemsAdded];
                            itemsAdded++;
                        }
                        itemsWrapper.append('<li class="itemWrapper" style="display: inline-block; height: 100%; background-repeat: no-repeat; background-size: cover; position: relative;">' + itemHTML + '</li>');
                    }

                    $container.removeClass('binded');
                    InitCarouselSlider($container);

                    if (typeof isView !== "undefined" && !isView) {
                        SettingEvents();
                        GetLibrary("logo slider").SetCustomEvents();
                    }
                },

                "FindReplaceDeleteHelper": function (editorComponentContainer) {

                    //var newHTML = $(editorComponentContainer)
                    //    .find('div').eq(1)
                    //    .find('.deletehelper').eq(0)
                    //    .removeClass('deletehelper')
                    //    .addClass('deleteSliderItem sfError')
                    //    .parents('.editor-component').eq(0)[0].outerHTML;
                    var newHTML = $(editorComponentContainer).attr('data-type', 'Image Link').find("li.copyData").remove().end().find(".deletehelper").removeClass('deletehelper').addClass("deleteSliderItem").end().addClass('H-200 tH-100 mH-100');
                    return newHTML[0].outerHTML;
                },

                "DisableDragging": function (editorComponentContainer) {
                    //var newHTML = $(editorComponentContainer)
                    //  .find('div').eq(0)
                    //  .find('.icon-icon-drag').eq(0)
                    //  .removeClass('icon-icon-drag')
                    //  .removeClass('sortComponent')

                    //  .parents('.editor-component').eq(0)[0].outerHTML;
                    var newHTML = $(editorComponentContainer).find("span.sortComponent").remove().end().find(".SetHdlr").addClass("no-drag").end();
                    return newHTML[0].outerHTML;
                },

                "SetCustomEvents": function () {

                    var redrawItem = this.ReDrawSliderItems;
                    $('.deleteSliderItem').off().on('click', function () {

                        var itemToDelete = $(this).closest('.SetHdlr').parent().parent();
                        var $container = itemToDelete.parents('.LogoSliderWrapper');

                        var perView = DeviceItemPerView($container.attr('data-itemsperview'));
                        if (!perView) perView = "3";

                        var itemsPerView = parseInt(perView);

                        var liItem = $container.find('.itemWrapper'); // CHECK FOR EXISTING ITEMS
                        var liChildren = liItem.children();
                        var siblingsCount = liChildren.length;


                        if (siblingsCount > 1) {

                            SageConfirmDialog(' Do you want to delete this item ?').done(function () {
                                itemToDelete.remove();
                                $('#numCounterTotal').text(siblingsCount - 1);

                                redrawItem($container, itemsPerView, false);
                                // RE INIT ITEMS
                            });
                        } else {
                            SageAlertDialog("Atleast one item is required", 'Alert');
                        }

                    });

                },

                "EnableComponentSettings": function (editorComponentContainer) {
                    var newHTML = $(editorComponentContainer).addClass('options-display-inside')[0].outerHTML;
                    return newHTML;
                },

                "UpdateWidthAttribute": function ($sliderContainer, newColCount) {
                    newColCount = parseInt(newColCount);
                    var widthPercentage = "";
                    switch (newColCount) {
                        case 2: widthPercentage = "50%"; break;
                        case 3: widthPercentage = "33%"; break;
                        case 4: widthPercentage = "25%"; break;
                        case 5: widthPercentage = "20%"; break;
                        case 1: widthPercentage = "100%"; break;
                    }
                    let dev = ViewDeviceAlpha();
                    $colAttr = 'data-' + dev + 'colwidth';
                    $sliderContainer.attr($colAttr, widthPercentage);
                },

                "ChangeRightSpacing": function (space, $mainWrapperParent, $mainWrapperID, $effectedItemsParentID) {

                    if (space !== 'undefined' && typeof (space) !== 'undefined') {
                        space = parseInt(space);
                        let dev = ViewDeviceAlpha();
                        var times = 5;
                        var itemsContainer = $mainWrapperParent.find($effectedItemsParentID);
                        var childComp = itemsContainer.children();

                        let rReg = new RegExp('\\b' + dev + 'Mr-[0-9]{1,3}\\b', 'g');;
                        let lReg = new RegExp('\\b' + dev + 'Ml-[0-9]{1,3}\\b', 'g');;
                        
                        var marginRightClass = childComp.attr('class').match(rReg);
                        var marginLeftClass = childComp.attr('class').match(lReg);

                        if (marginRightClass !== null) {

                            var mainWrapper = $mainWrapperParent.find($mainWrapperID);

                            childComp.each(function () {
                                var $me = $(this);
                                $me.removeClass(marginRightClass[0].trim());
                                $me.removeClass(marginLeftClass[0].trim());
                            });

                            var compOuterSpace = space * times;


                            var className = '';
                            var leftSpaceClassName = '';
                            if (space >= 0) {
                                className = dev + 'Mr-' + compOuterSpace;
                                leftSpaceClassName = dev + 'Ml-' + compOuterSpace;
                            }
                            else {
                                space = Math.abs(space);
                                className = dev + 'MrN-' + compOuterSpace;
                                leftSpaceClassName = dev + 'MlN-' + compOuterSpace;

                            }

                            childComp.addClass(className);
                            childComp.addClass(leftSpaceClassName);
                            childComp.addClass('display-inline-block');
                            $colAttr = 'data-' + dev + 'colwidth';
                            var widthPercentage = mainWrapper.attr($colAttr);
                            if (typeof widthPercentage === 'undefined') {
                                widthPercentage = '20%';
                                console.error("No width percent attr found");
                            }

                            mainWrapper.attr('data-' + dev + 'horzspacing', space);
                            var newWidthAttr = "calc(" + widthPercentage + " - " + (compOuterSpace * 2) + "px)";
                            childComp.each(function (i, v) {
                                var $me = $(this);
                                $me.css(
                                    {
                                        "width": newWidthAttr,
                                        "float": "left"
                                    });
                            });
                        }


                    }

                },

            }

        },

        "common": {
            "InitalizeEvents": function ($sender, componentName) {
                var compo = component[componentName];
                if (typeof compo !== "undefined" && typeof compo.afterdrop !== "undefined") {
                    compo.afterdrop($sender.parent(), $sender, true, false);
                }
            },

            //-----------------------------
            "sliderHeight": function () {
                let $parent = $activeDOM;
                let $logoslider = $parent.find('.logoslider');
                function SliderHeightChange(space) {
                    ReplaceClassByPattern($activeDOM.find('.logoslider'), 'H-[0-9]{1,4}', 'H-' + space);
                }
                AdvanceSageSlider($('#logoSliderHeightSlider'), $('#logoSliderHeightHandle'), 0, 1000, GetValueByClassName($logoslider, 'H-[0-9]{1,4}', 'H-'), SliderHeightChange, $parent, 'px');
            },

            "sliderImageHeight": function () {
                let $parent = $activeDOM;
                let $logoimages = $parent.find('div.image');
                function BarHeightChange(space) {
                    ReplaceClassByPattern($activeDOM.find('div.image'), 'H-[0-9]{1,4}', 'H-' + space);
                }
                AdvanceSageSlider($('#logoSliderItemHeightSlider'), $('#logoSliderItemHeightHandle'), 50, 1000, GetValueByClassName($logoimages, 'H-[0-9]{1,4}', 'H-'), BarHeightChange, $parent, 'px');
            }
            //-----------------------------------
        },

    }
,    "managepages": {
        "componentname": "managepages",
        "category": "page",
        "icon": "icon-icon-row",
        "row": false,
        "hidden": true,
        "collection": false,
        "type": "hidden",
        "defaultdata": '',
        "afterdrop": function ($appendLayer) { },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Pages": {
                    "DOM": EasyLibrary.ReadDOM("sitemenupages"),
                    "onload": function ($item) {
                        var $parent = $('.editor-site-header');
                        InitEvents();

                        function InitEvents() {
                            ClearPageError();
                            $('#pageAddPanel').on('click', function () {
                                ClearPageError();
                                $('#pageCreateArea').attr('data-pageid', 0);
                                $('#pageCreateArea').attr('data-webbuilderid', 0);
                                $('#pageCreateArea').show();
                                $('#pageListArea').hide();
                                $('#hdnPageID').val('');
                                $('#txtPageName').val('');
                                $('#txtPageTitle').val('');
                                $('#txtPageDescription').val('');
                            });
                            $('#btnCancelPageAdd').on('click', function () {
                                $('#pageCreateArea').attr('data-pageid', 0);
                                $('#pageCreateArea').hide();
                                $('#pageListArea').show();
                                ClearPageError();
                            });
                            $("#chkClonePage").on('click', function () {
                                var isChk = $(this).prop("checked");
                                if (isChk) {
                                    $(".clonePageList").show();
                                }
                                else {
                                    $(".clonePageList").hide();
                                }
                            });
                            $('#btnSavePage').on('click', function () {
                                var $pageName = $('#txtPageName');
                                var $title = $('#txtPageTitle');
                                var $description = $('#txtPageDescription');
                                var pageName = $pageName.val().trim();
                                var pageID = parseInt($('#pageCreateArea').attr('data-pageid'));
                                var webbuilderID = parseInt($('#pageCreateArea').attr('data-webbuilderid'));
                                var description = $description.val().trim();
                                var title = $title.val().trim();
                                if (pageName.length == 0) {
                                    SetPageError("Page Name can't be empty");
                                } else {
                                    if (!ValidatePageName(pageName)) {
                                        SetPageError("Page Name not accepted");
                                    } else if (CheckDuplicate(pageName, pageID)) {
                                        SetPageError("Page Name duplicated");
                                    } else {
                                        description = description.length == 0 ? pageName : description;
                                        title = title.length == 0 ? pageName : title;
                                        var cloneWebBuilderID = 0;
                                        if ($("#chkClonePage").prop("checked")) {
                                            cloneWebBuilderID = $("#clonePageList").val();
                                        }
                                        
                                        //changing
                                        var pageIDs = AddUpdatePage(pageID, pageName, '', title, description, webbuilderID, cloneWebBuilderID);
                                        //changing
                                        var newPageID = pageIDs.pageID;
                                        var oldPageName = currentpageName;
                                        if (newPageID == 0) {
                                            SetPageError("Page Name Already Exists.");
                                            return false;
                                        } else if (newPageID != 0) {
                                            currentpageName = pageName;
                                            if (pageID == newPageID) { //updated
                                                var $li = $('li[data-pageid="' + newPageID + '"]');
                                                $li.find(' >a > .pageName').text(pageName);
                                                $li.find('> a').attr('href', SageFrameHostURL + '/' + pageName.replace(/ /g, '-'));
                                                var $div = $('div[data-pageid="' + newPageID + '"]');
                                                $div.find('label.title').text(pageName);
                                                $div.find('> .activedefalutPage ').attr('data-pagename', pageName);

                                                var $cloneOption = $('option[data-type="clonepage"][data-pageid="' + newPageID + '"]');
                                                $cloneOption.text(pageName);
                                            } else { //added
                                                var addedMenu = '<div data-type="page" data-webbuilderid="' + pageIDs.webbuilderID + '" data-pageid="' + newPageID + '" class="panel panel-info form-elements element field-row stElWrap col60-40">';
                                                addedMenu += '<label class="fCol title">' + pageName + '</label>';
                                                addedMenu += '<span class="fCol TxAl-r">';
                                                addedMenu += '<span class="cb-tick activedefalutPage " title="set as starup page"data-pageName="' + pageName + '"></span>';
                                                addedMenu += '<span class="deleteWebPage  cb-del"></span>';
                                                addedMenu += '<span class="editWebPage fa fa-pencil-square-o"></span>';
                                                addedMenu += "</span>";
                                                $('#headerMenuList').append(addedMenu);

                                                var clonePageAdded = '<option data-type="clonepage" value="' + pageIDs.webbuilderID + '" data-pageid="' + newPageID + '">';
                                                clonePageAdded += pageName;
                                                clonePageAdded += "</option>";
                                                $("#clonePageList").append(clonePageAdded);
                                                $("#chkClonePage").prop("checked", false);
                                                $(".clonePageList").hide();
                                                $('.eb-menu').each(function () {
                                                    var $this = $(this);
                                                    var isHeading = false;
                                                    if ($this.closest('.editor-site-header').length == 1)
                                                        isHeading = true;
                                                    var color = 'rgb(0,0,0)';
                                                    var fontSize = '';
                                                    var $menuAnchor = '';
                                                    var $span = '';
                                                    var $menuA = '';
                                                    if ($this.find('li').not('.Dn').find('a').not('.active-page').length == 0) {
                                                        color = 'rgb(0,0,0)';
                                                        fontSize = '12';
                                                    } else {
                                                        var $item = $this.find('li a').not('.active-page').eq(0);
                                                        color = $item.find('span').css('color');
                                                        fontSize = $item.find('span').css('font-size');
                                                        $menuAnchor = $item.parent();
                                                        $span = $item.find('span');
                                                        $menuA = $item;

                                                    }
                                                    var hide = 'Dn';
                                                    var href = SageFrameHostURL + '/' + pageName.replace(/ /g, '-');
                                                    var li = '<li data-pageid="' + newPageID + '" >';
                                                    li += '<a href="' + href + '" class="pagelink">';
                                                    li += '<span class="pageName LtrSpc-0" style="font-size: ' + fontSize + '; color: ' + color + ';">';
                                                    li += pageName;
                                                    li += '</span>';
                                                    li += '</a>';
                                                    li += '</li>';
                                                    var $li = $(li);
                                                    $this.append($li);
                                                    if ($menuAnchor.length > 0) {
                                                        $li.attrs($menuAnchor.attrs());
                                                        $li.find('span').attrs($span.attrs());
                                                        $li.find('a').attrs($menuA.attrs());
                                                        $li.find('a').attr('href', href);
                                                        $li.attr('data-pageid', newPageID);
                                                        $li.attr('data-webbuilderID', pageIDs.webbuilderID);
                                                        $li.find('a').removeClass("redirectLink").addClass("redirectLink");
                                                        $li.find("a").attr("data-PageName", pageName.replace(/ /g, '-'));
                                                        if (isHeading) {
                                                            $li.removeClass('Dn');
                                                        } else {
                                                            if (!$li.hasClass('Dn'))
                                                                $li.addClass('Dn');
                                                        }
                                                    }
                                                });
                                                SortEvents();
                                                PagelinkStop();
                                                MenuHover($('#primaryColor').css('background-color'), $('#secondaryColor').css('background-color'));
                                            }
                                            $('#pageCreateArea').hide();
                                            $('#pageListArea').show();
                                            currentpageName = oldPageName;
                                            var Oriname = $('#txtPageName').attr('data-pname');
                                            if (cloneWebBuilderID > 0 && Oriname === oldPageName) {
                                            }
                                            else {
                                                SilentSave();
                                            }

                                            if (typeof Oriname !== "undefined" && Oriname === oldPageName) {
                                                window.location = SageFrameHostURL + '/WebBuilder/' + pageName.replace(" ", '-');
                                            }
                                        }

                                    }
                                }
                            });
                        }

                        function ValidatePageName(pageName) {
                            var validPageaName = (/^[A-Za-z\s]+$/).test(pageName);
                            if (validPageaName)
                                return true;
                            else
                                return false;
                        }
                        ReadMenu();
                        ClonePageBind();
                        function ReadMenu() {
                            var $menu = $('#innerPageList  li');
                            $('#headerMenuList').html(BindMenuItem($menu));
                            SortEvents();
                        }
                        function ClonePageBind() {
                            var $menu = $('#innerPageList  li');
                            $("#clonePageList").html(BindCloneMenuItem($menu));

                        }
                        function BindMenuItem($menu) {
                            var html = '';
                            $.each($menu, function (index, item) {
                                var $item = $(this);
                                var pageID = $item.attr('data-pageid');
                                var webbuilderID = $item.attr('data-webbuilderid');
                                var pageName = $item.find(' > a > .pageName').text();
                                html += '<div data-type="page" data-webbuilderid="' + webbuilderID + '" data-pageid="' + pageID + '" class="panel panel-info form-elements element field-row stElWrap col60-40">';
                                html += '<label class="fCol title">';
                                html += pageName;
                                html += '</label>';
                                var currentPage = false;
                                var activeCurrent = '';
                                if (pageName === portalDefaultPage) {
                                    currentPage = true;
                                    activeCurrent = "active";
                                }
                                html += '<span class="fCol TxAl-r">';
                                html += '<span class="cb-tick activedefalutPage ' + activeCurrent + '" title="set as starup page" data-pageName="' + pageName + '"></span>';
                                if (!currentPage) {
                                    html += '<span class="deleteWebPage cb-del" title="delete page"></span>';
                                    html += '<span class="editWebPage  fa fa-pencil-square-o" title="edit page"></span>';
                                }
                                html += "</span>";
                                if ($item.find('> ul > li').length > 0) {
                                    html += '<div class="sortable panel-body ">';
                                    html += BindMenuItem($item.find('> ul > li'), item.MenuItemID);
                                    html += "</div>";
                                }
                                html += "</div>";
                            });
                            return html;
                        }
                        function BindCloneMenuItem($menu) {
                            var html = '';
                            html += '<option data-type="clonepage" value="0" data-pageid="0">Select Page</option>';
                            $.each($menu, function (index, item) {
                                var $item = $(this);
                                var pageID = $item.attr('data-pageid');
                                var webbuilderID = $item.attr('data-webbuilderid');
                                var pageName = $item.find(' > a > .pageName').text();
                                html += '<option data-type="clonepage" value="' + webbuilderID + '" data-pageid="' + pageID + '">';
                                html += pageName;
                                html += "</option>";
                            });
                            return html;
                        }
                        function CheckDuplicate(newPage, pageID) {
                            var duplicate = false;
                            $parent.find('.eb-menu li').not('li[data-pageid="' + pageID + '"]').each(function (i, v) {
                                if ($(this).text().trim().toLowerCase() === newPage.toLowerCase()) {
                                    duplicate = true;
                                    return true;
                                }
                            });
                            return duplicate;
                        }

                        function ClearPageError() {
                            $('#pageError').text('');
                        }

                        function SetPageError(error) {
                            $('#pageError').text(error);
                        }

                        function RebindMenu() {
                            var $menu = $('#headerMenuList > div.panel-info');
                            var menuSpan = $('.eb-menu li a span').eq(0).attrs();
                            $('.eb-menu').html(ReBindMenuItem($menu));
                            if ($('#headerMenuList > div.panel-info').length == 1) {
                                $('#headerMenuList > div.panel-info > .deleteWebPage').remove(0);
                            }
                            $('.eb-menu span').each(function () {
                                $(this).attrs(menuSpan);
                            });
                            PagelinkStop();
                        }

                        function SortEvents() {
                            $('.deleteWebPage').off().on('click', function () {
                                var $this = $(this);
                                var tempName = $this.parent().parent().find('label').text();
                                SageConfirmDialog('Do you want to delete "' + tempName + '" page? All the data on the page will also be deleted.').done(function () {
                                    var pageID = $this.parent().parent().attr('data-pageid');
                                    var pageName = tempName;
                                    DeletePage(pageID, $this.parent().parent(), pageName);
                                });
                            });
                            $('.editWebPage ').off().on('click', function () {
                                var pageID = $(this).parent().parent().attr('data-pageid');
                                var webbuilderID = $(this).parent().parent().attr('data-webbuilderid');
                                $.ajax({
                                    isPostBack: false,
                                    async: false,
                                    cache: false,
                                    type: 'POST',
                                    contentType: "application/json; charset=utf-8",
                                    data: JSON2.stringify({
                                        pageID: pageID,
                                        portalID: parseInt(SageFramePortalID),
                                        userName: SageFrameUserName,
                                        userModuleID: webBuilderUserModuleID,
                                        secureToken: SageFrameSecureToken
                                    }),
                                    dataType: 'json',
                                    crossDomain: true,
                                    url: SageFrameHostURL + '/Modules/Pages/Services/PagesWebService.asmx/GetPageDetails',
                                    success: function (data) {
                                        var pageDetail = data.d;
                                        $('#txtPageName').val(pageDetail.PageName);
                                        $('#txtPageName').attr('data-pname', pageDetail.PageName);
                                        $('#txtPageTitle').val(pageDetail.Title);
                                        $('#txtPageDescription').val(pageDetail.Description);
                                        var pID = pageDetail.PageID;
                                        $('#pageCreateArea').attr('data-pageid', pID);
                                        $('#pageCreateArea').attr('data-webbuilderid', webbuilderID);
                                        $('#pageCreateArea').show();
                                        $('#pageListArea').hide();
                                    },
                                    error: function () {
                                    },
                                });
                            });

                            $('.activedefalutPage').not('.active').on('click', function () {
                                var pageName = $(this).attr('data-pagename');
                                SageConfirmDialog('Do you want to set ' + pageName + ' as default startup page?').done(function () {
                                    SetDefaultPage(pageName, portalDefaultPage);
                                });
                            });
                        }
                        function ReBindMenuItem($menu) {
                            var html = '';
                            $.each($menu, function (index, item) {
                                var $item = $(this);
                                var pageID = $item.attr('data-pageid');
                                var pageName = $item.find('> .title').text();
                                var addliclass = 'Dn';
                                if ($item.find('> .showinmenu').find('.showpageinmenu').is(':checked')) {
                                    addliclass = '';
                                }
                                html += '<li data-pageid="' + pageID + '" class="' + addliclass + '" >';
                                html += '<a href="' + SageFrameHostURL + '/' + pageName.replace(/ /g, '-') + webBuilderPageExtension + '" class="pagelink"><span class="pageName">' + pageName + '</span></a>';
                                if ($item.find(' > div.panel-body > div.panel-info').length > 0) {
                                    html += '<ul>';
                                    html += ReBindMenuItem($item.find(' > div.panel-body > div.panel-info'));
                                    html += "</ul>";
                                }
                                html += "</li>";
                            });
                            return html;
                        }

                        function AddUpdatePage(pageID, pageName, caption, title, description, webbuilderID, cloneWebBuilderID) {
                            var newPageID = 0;
                            var Mode = pageID > 0 ? "E" : "A";
                            var UpdateLabel = '';
                            var checks = $('div.divPermission tr:gt(0), #dvUser tr').find('input.sfCheckbox:checked');
                            lstPagePermission = [];
                            var beforeID = 0;
                            var afterID = 0;
                            if ($('#rdbBefore').prop('checked') == true) {
                                beforeID = $('#cboPositionTab').val();
                            } else if ($('#rdbAfter').prop('checked') == true) {
                                afterID = $('#cboPositionTab').val();
                            }
                            var MenuSelected = 0;
                            var _IsVisible = $('#rdbAdmin').prop('checked') ? $('#chkShowInDashboard').prop("checked") : true;
                            //var lstPagePermission = [];
                            //lstPagePermission[0] = {
                            //    "PermissionID": 1,
                            //    "RoleID": 'cd3ca2e2-7120-44ad-a520-394e76aac552',
                            //    "Username": "",
                            //    "AllowAccess": true
                            //};
                            //lstPagePermission[1] = {
                            //    "PermissionID": 2,
                            //    "RoleID": 'cd3ca2e2-7120-44ad-a520-394e76aac552',
                            //    "Username": "",
                            //    "AllowAccess": true
                            //};
                            //lstPagePermission[2] = {
                            //    "PermissionID": 1,
                            //    "RoleID": 'a87e850f-14c8-4c89-86f4-4598ff27da72',
                            //    "Username": "",
                            //    "AllowAccess": true
                            //};
                            //var PageDetails = {
                            //    PageEntity: {
                            //        Mode: Mode,
                            //        Caption: caption,
                            //        PageID: pageID,
                            //        PageName: pageName,
                            //        IsVisible: true,
                            //        IconFile: '',
                            //        Title: title,
                            //        Description: description,
                            //        KeyWords: "",
                            //        Url: "",
                            //        StartDate: '',
                            //        EndDate: '',
                            //        RefreshInterval: 0,
                            //        PageHeadText: "SageFrame",
                            //        IsSecure: false,
                            //        IsActive: true,
                            //        AddedBy: SageFrameUserName,
                            //        IsAdmin: false,
                            //        LstPagePermission: lstPagePermission,
                            //        MenuList: MenuSelected,
                            //        UpdateLabel: ''
                            //    }
                            //};
                            var objTagValue = GetSeoValue('easybuilder', title, description);
                            SaveMessageShow(pageName + ' page adding');
                            SecureAjaxCall.PassObject({
                                data: JSON2.stringify({
                                    PageName: pageName,
                                    DisplayName: pageName,
                                    WebbuilderID: webbuilderID,
                                    CloneWebBuilderID: cloneWebBuilderID,
                                    KeyWords: '',
                                    //KeyWords: objTagValue,
                                    PageComponent: '',
                                    HeaderFooterComponent: 'pageadded',
                                    Mode: Mode,
                                    Culture:'en-US'
                                }),
                                url: SageFrameHostURL + '/webbuilder/Savepage',
                                success: function (response) {

                                    switch (response.StatusCode) {

                                        case 1:
                                            {
                                                let result = response.Result;
                                                newPageID = { 'pageID': result[0], 'webbuilderID': result[1] };
                                                SaveMessageRemove();
                                            }
                                            break;
                                        case 7:
                                            {
                                                let result = response.Result;
                                                newPageID = { 'pageID': result[0], 'webbuilderID': result[1] };
                                                SaveMessageRemove();
                                            }
                                            break;
                                        default:
                                    }
                                    //var response = data.d;
                                    //if (response !== null)
                                    //    response = response.split(',');
                                    
                                },
                            })
                            //$.ajax({
                            //    isPostBack: false,
                            //    async: false,
                            //    cache: false,
                            //    type: 'POST',
                            //    contentType: "application/json; charset=utf-8",
                            //    data: JSON2.stringify({
                            //        "objPageInfo": PageDetails.PageEntity,
                            //        Culture: 'en-US',
                            //        portalID: parseInt(SageFramePortalID),
                            //        userName: SageFrameUserName,
                            //        userModuleID: webBuilderUserModuleID,
                            //        secureToken: SageFrameSecureToken,
                            //        webbuilderID: webbuilderID,
                            //        cloneWebBuilderID: cloneWebBuilderID,
                            //        objTagValue: objTagValue,
                            //        PageComponent: '',
                            //        HeaderFooterComponent: 'pageadded'
                            //    }),
                            //    dataType: 'json',
                            //    crossDomain: true,
                            //    url: SageFrameHostURL + '/Builder/AddUpdatePages',
                            //    success: function (data) {
                            //        var response = data.d;
                            //        if (response !== null)
                            //            response = response.split(',');
                            //        newPageID = { 'pageID': response[0], 'webbuilderID': response[1] };
                            //        SaveMessageRemove();
                            //    },
                            //    error: function () {

                            //    },
                            //});
                            return newPageID;
                        }

                        function GetSeoValue(type, title, desciption) {
                            var objTagValue = [];
                            var tagValue = [type, title, desciption];
                            var tagID = [1, 2, 4];
                            $.each(tagValue, function (index, value) {
                                var objTag = {
                                    SEOMetaTagTypeID: parseInt(tagID[index]),
                                    MetaTagContent: tagValue[index]
                                };
                                objTagValue.push(objTag);
                            });
                            return objTagValue;
                        }

                        function DeletePage(pageID, $item, pageName) {
                            $.ajax({
                                isPostBack: false,
                                async: false,
                                cache: false,
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                data: JSON2.stringify({
                                    pageID: pageID,
                                    deletedBY: SageFrameUserName,
                                    portalID: parseInt(SageFramePortalID),
                                    userName: SageFrameUserName,
                                    userModuleID: webBuilderUserModuleID,
                                    secureToken: SageFrameSecureToken
                                }),
                                dataType: 'json',
                                crossDomain: true,
                                url: SageFrameHostURL + '/Builder/DeleteChildPages',
                                success: function () {
                                    $item.remove();
                                    $("#clonePageList option").filter(function () {
                                        return $.trim($(this).text()) == pageName;
                                    }).remove();
                                    $('.eb-menu').each(function () {
                                        var $this = $(this);
                                        $this.find('li').each(function () {
                                            var $me = $(this);
                                            var newPagename = $me.find('> a > span').text();
                                            if (newPagename === pageName) {
                                                if ($me.find(' > ul').length > 0) {
                                                    $this.append($me.find('> ul >li'));
                                                }
                                                var $ul = $me.parent().parent('li.hasChild');
                                                $me.remove();
                                                if ($ul.find('li').length == 0) {
                                                    $ul.find('i').remove();
                                                    $ul.removeClass('hasChild');
                                                }
                                            }
                                        });
                                    });
                                    SilentSave();
                                    if (pageName === currentpageName) {
                                        window.location = window.location.href;
                                    }
                                },
                                error: function () { },
                            });
                        }

                        function SetDefaultPage(newPageName, oldPageName) {
                            $.ajax({
                                isPostBack: false,
                                async: false,
                                cache: false,
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                data: JSON2.stringify({
                                    PageName: newPageName,
                                    OldPageName: oldPageName,
                                    ActiveTemplateName: SageFrameActiveTemplate,
                                    portalID: parseInt(SageFramePortalID),
                                    userName: SageFrameUserName,
                                    userModuleID: webBuilderUserModuleID,
                                    secureToken: SageFrameSecureToken
                                }),
                                dataType: 'json',
                                crossDomain: true,
                                url: SageFrameHostURL + '/Modules/Pages/Services/PagesWebService.asmx/UpdSettingKeyValue',
                                success: function () {
                                    portalDefaultPage = newPageName;
                                    ReadMenu();
                                    $('#chkUnderConstruction').removeClass('active');
                                    $('#underConstructionNote').hide();
                                    webBuilderSettings.isunderconstruction = false;
                                    //UpdateSettings();
                                    UpdateSettingKeyValue("defaultPage", newPageName);
                                },
                                error: function () { },
                            });
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        }
    }
,    "menu": {
        "componentname": "menu",
        "category": "basic",
        "icon": "fa fa-bars",
        "row": false,
        "hidden": false,
        "collection": false,
        "type": "element",
        "bucket": false,
        "defaultdata": '<div class="menuWrapper"></div>',
        "dom": {
            "menusettings": EasyLibrary.ReadDOM("menusettings")
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            var html = this.dom.menusettings;
            if (dropped) {
                $appendLayer.html(html);
                $appendLayer.find('.webMenu').find('.menulist').html(EasyLibrary.PageListDOM());
                $appendLayer.find('.pageName').addClass('Fs-20 tFs-18 mFs-16');
                $appendLayer.find('.pagelink').addClass('mPl-5 Pl-10 tPr-5 mPr-5 Pr-10 tPl-5');
                SettingEvents();
                MenuHover(webBuilderSettings.primaryColor, webBuilderSettings.secondaryColor);
            }
        },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("sitemenubasic"),
                    "onload": function ($item) {
                        var type = $item.attr('data-menuType');
                        var $parent = $activeDOM;
                        var $nav = $parent.find('nav');
                        var onePAgeType = $nav.attr('data-active');
                        var $ebMenu;
                        if (onePAgeType === 'onepagemenu') {
                            $ebMenu = $nav.find('ul.onepagemenu');
                        } else {
                            $ebMenu = $nav.find('ul.eb-menu');
                        }
                        var $text = $ebMenu.find('.pageName');
                        var $hamIcon = $('.res-menu-trigger');
                        InitEvents();

                        function InitEvents() {
                            component["menu"].common.LogoWidth();
                            if ($parent.hasClass('menuHeader')) {
                                $('#MenuStyleWrapper').show();
                            } else {
                                $('#MenuStyleWrapper').hide();
                            }
                            if (!$activeDOM.hasClass('menuHeader')) {
                                $('#headerTypeMenu [data-class="msty-tred"]').attr('title', 'Horizontal');
                                $('#headerTypeMenu [data-class="msty-ham"]').attr('title', 'Vertical');
                            }
                            $('#menuTextColor').css('background-color', $parent.find('.pagelink').not('.active-page').find('.pageName').eq(0).css('color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.pagelink').not('.active-page').find('.pageName').css('color', objColor.bgColor);
                                    $ebMenu.attr('data-textcolor', objColor.bgColor);
                                }
                            });
                            $('#menuTextColor').colorPicker(colorPickerOption);

                            $('#menuBackgroundColor').css('background-color', $parent.css('background-color'));
                            var menuBackgroundColor = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.css('background-color', objColor.bgColor);
                                    $ebMenu.not(':eq(0)').css('background-color', objColor.bgColor);
                                }
                            });
                            $('#menuBackgroundColor').colorPicker(menuBackgroundColor);
                            $("#menuBorderRadius").html('');
                            $("#menuBorderRadius").AdvanceBoxRadius({
                                targetParent: $activeDOM,
                                targetElem: $text.parent(),
                                options: {
                                    "max": 100,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all"]
                                }
                            });
                            $('#menuTextBGColor').css('background-color', $parent.find('.pagelink').not('.active-page').eq(0).css('background-color'));
                            var txtcolorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.pagelink').not('.active-page').css('background-color', objColor.bgColor);
                                    $ebMenu.attr('data-textbgcolor', objColor.bgColor);
                                }
                            });
                            $('#menuTextBGColor').colorPicker(txtcolorPickerOption);

                            $('#menuTextBorColor').css('background-color', $parent.find('.pagelink').eq(0).css('border-color'));
                            var menuTextBorColor = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.pagelink').css('border-color', objColor.bgColor);
                                    $ebMenu.attr('data-textborcolor', objColor.bgColor);
                                }
                            });
                            $('#menuTextBorColor').colorPicker(menuTextBorColor);

                            $('#navLinkBGCol').css('background-color', $ebMenu.attr('data-navLinkBGCol'));
                            var navLinkBGCol = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $ebMenu.find('> li > a.active-page ').css('background-color', objColor.bgColor);
                                    $ebMenu.attr('data-navLinkBGCol', objColor.bgColor);
                                }
                            });
                            $('#navLinkBGCol').colorPicker(navLinkBGCol);

                            $('#navLinkTextCol').css('background-color', $ebMenu.attr('data-navLinkTextCol'));
                            var navLinkTextCol = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $ebMenu.find(' > li > a.active-page >span ').css('color', objColor.bgColor);
                                    $ebMenu.attr('data-navLinkTextCol', objColor.bgColor);
                                }
                            });
                            $('#navLinkTextCol').colorPicker(navLinkTextCol);

                            $('#hamIconColor').css('background-color', $hamIcon.find('span').eq(0).css('background-color'));
                            var hamIconColor = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $hamIcon.find('span').css('background-color', objColor.bgColor);
                                }
                            });
                            $('#hamIconColor').colorPicker(hamIconColor);
                            $("#menuTextSettings").html();
                            $("#menuTextSettings").AdvanceTextSetting({
                                targetParent: $parent,
                                targetElem: $text,
                                options: {
                                    width: false,
                                    color: false,
                                    maxFontSize: 100
                                }
                            });
                            //fontSize();
                            //letterSpacing();
                            //TextTranformCheck();
                            MenuTradHemStyle();
                            MenuHemStyle();
                            MenuStyle();
                            MenuLineBorderWidth();
                            MenuLineBorderColor();
                            NavLinkBorderColor();
                            if (!$activeDOM.hasClass('menuHeader'))
                                loadMenuStyle();
                        }
                        function MenuTradHemStyle() {
                            var menuSty = 'msty-tred';
                            $(".hamIconWrp").hide();
                            var parentClasses = $parent.parent().attr('class').match(/msty-[a-z]{1,20}/g);
                            if (parentClasses !== null) {
                                menuSty = parentClasses[0];
                            }
                            if (menuSty === 'msty-ham') {
                                $(".hamIconWrp").show();
                            }
                            $('#menuStyles').find('i').removeClass('selected');
                            $('#menuStyles').find('i[data-class="' + menuSty + '"]').addClass('selected');
                            $('#menuStyles > i').on('click', function () {
                                //$parent.parent().removeClass('msty-tred').removeClass('msty-ham');
                                var menuTStyle = $(this).attr('data-class');
                                let menuType = $activeDOM.hasClass('menuHeader');
                                $('#menuStyles').find('i').removeClass('selected');
                                $('#menuStyles').find('i[data-class="' + menuTStyle + '"]').addClass('selected');
                                switch (menuTStyle) {
                                    case 'msty-tred':
                                        if (menuType) {
                                            $('body').removeClass('offset-left').removeClass('offset-right').removeClass('offset-top');
                                            $(".msty-ham").addClass('Dn tDb mDb');
                                            $(".msty-tred").removeClass('Dn');
                                        } else changeMenuStyle('horizontal');
                                        break;
                                    case 'msty-ham':
                                        if (menuType) {
                                            $(".msty-tred").addClass('Dn');
                                            $(".msty-ham").removeClass('Dn tDb mDb');
                                            $parent.find('.res-menu-trigger').trigger('click');
                                            $('#hamMenuStyles > i.selected').trigger('click');
                                        } else changeMenuStyle('side');
                                        break;
                                    default:
                                        break;
                                }
                                if (menuType)
                                    $("." + menuTStyle).find('.com-settings[data-type="menu"]').trigger("click");
                            });
                        }
                        function changeMenuStyle(menuType) {
                            var $ebmenu = $parent.find('nav > ul');
                            $ebmenu.removeClass('horizontal').removeClass('side').removeClass('footer').removeClass('Dfx').removeClass('flxWrp');
                            if (menuType == 'horizontal') {
                                $ebmenu.addClass('Dfx').addClass('flxWrp');

                            } else if (menuType == 'side') { }

                            $ebmenu.attr('data-menu', menuType).addClass(menuType);

                        }
                        function MenuHemStyle() {
                            var hamSty = 'ham-right';
                            var parentClasses = $parent.parent().attr('class').match(/ham-[a-z]{1,20}/g);
                            if (parentClasses !== null) {
                                hamSty = parentClasses[0];
                            }
                            $('#hamMenuStyles').find('i').removeClass('selected');
                            $('#hamMenuStyles').find('i[data-class="' + hamSty + '"]').addClass('selected');
                            $('#hamMenuStyles > i').on('click', function () {
                                $parent.parent().removeClass('ham-left').removeClass('ham-right').removeClass('ham-top');
                                $('body').removeClass('offset-left').removeClass('offset-right').removeClass('offset-top');
                                var menuStyle = $(this).attr('data-class');
                                $ebMenu.attr('data-navHamType', menuStyle);
                                $parent.parent().not('.msty-tred').addClass(menuStyle);
                                $('#hamMenuStyles').find('i').removeClass('selected');
                                $('#hamMenuStyles').find('i[data-class="' + menuStyle + '"]').addClass('selected');
                                $(".res-menu-trigger").trigger("click");
                            });
                        }

                        function MenuLineBorderWidth() {
                            var menuLineBorderWidht = $ebMenu.attr('data-navBorderWidth');
                            if (typeof menuLineBorderWidht === 'undefined') {
                                menuLineBorderWidht = 0;
                            }
                            menuLineBorderWidht = parseInt(menuLineBorderWidht);

                            function MenuBorderWidthValue(space) {
                                var navClass = 'nav-style-none';
                                var navStyleClasses = $nav.attr('class').match(/nav-style-[a-z]{1,20}/g);
                                if (navStyleClasses !== null) {
                                    navClass = navStyleClasses[0];
                                }
                                if (navClass === 'nav-style-underline') {
                                    $text.parent().css('border-style', 'solid');
                                    $text.parent().css('border-top-width', '0px');
                                    $text.parent().css('border-right-width', '0px');
                                    $text.parent().css('border-left-width', '0px');
                                    $text.parent().css('border-bottom-width', space + 'px');
                                } else {
                                    $text.parent().css('border-style', 'solid');
                                    $text.parent().css('border-top-width', space + 'px');
                                    $text.parent().css('border-right-width', space + 'px');
                                    $text.parent().css('border-left-width', space + 'px');
                                    $text.parent().css('border-bottom-width', space + 'px');
                                }
                                $ebMenu.attr('data-navBorderWidth', space);
                            }
                            AdvanceSageSlider($('#menuBorderWidth'), $('#menuBorderWidthHandle'), 0, 100, menuLineBorderWidht, MenuBorderWidthValue, $parent, 'px');
                        }
                        function MenuLineBorderColor() {
                            $('#menuBorderColor').css('background-color', $ebMenu.attr('data-lineBorderColor'));
                            var menuBorderColor = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $text.parent().not('.active-page').css('border-color', objColor.bgColor);
                                    $ebMenu.attr('data-lineBorderColor', objColor.bgColor);
                                }
                            });
                            $('#menuBorderColor').colorPicker(menuBorderColor);
                        }
                        function NavLinkBorderColor() {
                            $('#navLinkBorderColor').css('background-color', $ebMenu.attr('data-navLinkBorCol'));
                            var navLinkBorderColor = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $ebMenu.attr('data-navLinkBorCol', objColor.bgColor);
                                    $ebMenu.find('.pagelink.active-page').css('border-color', objColor.bgColor);
                                }
                            });
                            $('#navLinkBorderColor').colorPicker(navLinkBorderColor);
                        }

                        function navFillRadius(styleType) {
                            $("#navStyleRadius").html("");
                            $(".navStyleRadius").hide();                            
                            if (styleType === "nav-style-fill") {
                                $(".navStyleRadius").show();
                                $("#navStyleRadius").AdvanceBoxRadius({
                                    targetParent: $activeDOM,
                                    targetElem: $ebMenu.find("li>a"),
                                    options: {
                                        "max": 50,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all"]
                                    }
                                });
                            }
                            else $ebMenu.find("li>a").css("border-radius", "");
                        }
                        function MenuStyle() {
                            var navClass = 'nav-style-none';
                            var navStyleClasses = $nav.attr('class').match(/nav-style-[a-z]{1,20}/g);
                            if (navStyleClasses !== null) {
                                navClass = navStyleClasses[0];
                            }
                            $('#menuStyle').val(navClass);
                            navFillRadius(navClass);
                            NavHideShow(navClass);
                            $('#menuStyle').on('change', function () {
                                var navStyleClasses = $nav.attr('class').match(/nav-style-[a-z]{1,20}/g);
                                if (navStyleClasses !== null) {
                                    $nav.removeClass(navStyleClasses[0]);
                                }
                                var style = $(this).val().trim();
                                NavHideShow(style);
                                $nav.addClass(style);
                                var navLinkBGCols = $ebMenu.attr('data-navLinkBGCol');
                                var navLinkTextCols = $ebMenu.attr('data-navLinkTextCol');
                                var navLinkBorCol = $ebMenu.attr('data-navLinkBorCol');
                                if (navLinkBGCols === undefined) {
                                    navLinkBGCols = webBuilderSettings.primaryColor;
                                }
                                if (navLinkTextCols === undefined) {
                                    navLinkTextCols = webBuilderSettings.secondaryColor;
                                }
                                if (style === 'nav-style-line' || style === 'nav-style-underline') {
                                    navLinkBGCols = navLinkBorCol;
                                }
                                navFillRadius(style);
                                MenuChangeInstant($ebMenu, navLinkBGCols, navLinkTextCols, style);
                                if (style === "nav-style-line") {
                                    let bdrWidth = parseInt($ebMenu.attr("data-navborderwidth"));
                                    $ebMenu.find("li>a").css("border-width", bdrWidth + "px");
                                }
                                if (style === "nav-style-underline") {
                                    let bdrWidth = parseInt($ebMenu.attr("data-navborderwidth"));
                                    $ebMenu.find("li>a").css("border-width", "0px 0px " + bdrWidth+"px");
                                }
                            });
                        }
                        function NavHideShow(style) {
                            $('.navBgHide').show();
                            if (style === 'nav-style-fill') {
                                $('.fillBG').show();
                                $('#roundness').show();
                                $('.lineroundness').hide();
                                $text.parent().css('border-style', '');
                                $text.parent().css('border-top-width', '0px');
                                $text.parent().css('border-right-width', '0px');
                                $text.parent().css('border-left-width', '0px');
                                $text.parent().css('border-bottom-width', '0px');

                            } else if (style === 'nav-style-rounded') {
                                $('.fillBG').hide();
                                $('#roundness').show();
                                $('.lineroundness').hide();
                                $ebMenu.attr('data-textbgcolor', '');
                            } else if (style === 'nav-style-line' || style === 'nav-style-roundedline') {
                                let menuLineBorderWidht = $text.parent().css('border-top-width');
                                $text.parent().css('border-style', 'solid');
                                $text.parent().css('border-top-width', menuLineBorderWidht);
                                $text.parent().css('border-right-width', menuLineBorderWidht);
                                $text.parent().css('border-left-width', menuLineBorderWidht);
                                $text.parent().css('border-bottom-width', menuLineBorderWidht);
                                $text.parent().css('background-color', '');
                                $ebMenu.attr('data-textbgcolor', '');
                                $('.fillBG').hide();
                                $('#roundness').show();
                                $('.lineroundness').show();
                                $('.navBgHide').hide();
                            } else if (style === 'nav-style-underline') {
                                //let menuLineBorderWidht = $text.parent().css('border-top-width');
                                let menuLineBorderWidht = $ebMenu.attr("data-navborderwidth");
                                $text.parent().css('border-style', 'solid');
                                $text.parent().css('border-top-width', '0px');
                                $text.parent().css('border-right-width', '0px');
                                $text.parent().css('border-left-width', '0px');
                                $text.parent().css('border-bottom-width', menuLineBorderWidht);
                                $text.parent().css('background-color', '');
                                $ebMenu.attr('data-textbgcolor', '');
                                $('.fillBG').hide();
                                // $('#roundness').hide();
                                $('.lineroundness').show();
                                $('.navBgHide').hide();
                            } else {
                                $('.fillBG').hide();
                                $('#roundness').hide();
                                $('.lineroundness').hide();
                                $text.parent().css('border-style', '');
                                $text.parent().css('border-top-width', '0px');
                                $text.parent().css('border-right-width', '0px');
                                $text.parent().css('border-left-width', '0px');
                                $text.parent().css('border-bottom-width', '0px');
                                $ebMenu.attr('data-textbgcolor', '');
                                $('.navBgHide').hide();
                            }
                        }
                        function loadMenuStyle() {
                            $('#menuStyles i').removeClass('selected');
                            if ($parent.find('.menulist').hasClass('horizontal'))
                                $('#menuStyles i[data-class="msty-tred"]').addClass('selected');
                            else
                                $('#menuStyles i[data-class="msty-ham"]').addClass('selected');

                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("menuspacing"),
                    "onload": function () {
                        component["menu"].common.Spacing();
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="menuAlign"></div><div id="hamMenuAlign"></div></div>',
                    "onload": function ($item) {
                        component["menu"].common.alignment();
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "remove": function ($cloneDom) { },
        "removeedit": function ($editDom) { },
        "common": {
            "LogoWidth": function () {
                $("#menuwidth").AdvanceDimension({
                    type: 'sfwidth',
                    targetParent: $activeDOM,
                    targetElem: $activeDOM,
                    label: 'Width',
                    defaultValue: 100,
                    callback: function (width) {
                        $holder = $activeDOM.parent().find('#menuholder');
                        ReplaceClassByPattern($holder, 'sfCol_[0-9]{1,3}', 'sfCol_' + (100 - parseInt(width)));
                    }
                });
            },
            "Spacing": function () {
                let $parent = $activeDOM;
                if ($activeDOM.closest('.siteheader').find('.msty-ham').hasClass('Dn'))
                    $('#slcMenuSpacingStng option[value=".msty-ham"]').remove();
                else if ($activeDOM.closest('.siteheader').find('.msty-ham').length > 0)
                    $('#slcMenuSpacingStng').append('<option value=".msty-ham">Hamburger</option>');
                let val = $('#slcMenuSpacingStng').val();
                $('#slcMenuSpacingStng').off().on('change', function () {
                    val = $(this).val();
                    $parent.find('.actEle').removeClass('actEle')
                        .end()
                        .find(val).addClass('actEle');
                    initSpacing();
                });

                function initSpacing() {
                    if (val === ".menuHeader")
                        val = $parent;
                    $("#slcMenuMSpacing,#slcMenuPSpacing").html('');
                    $("#slcMenuMSpacing").AdvanceSpacing({
                        targetParent: $activeDOM.parent(),
                        targetElem: val,
                        options: {
                            "margin": {
                                "max": 40,
                                "min": -40,
                                "times": 5,
                                "position": ["all", "top", "bottom", "left", "right"]
                            }
                        }
                    });
                    $("#slcMenuPSpacing").AdvanceSpacing({
                        targetParent: $activeDOM.parent(),
                        targetElem: val,
                        options: {
                            "padding": {
                                "max": 40,
                                "min": 0,
                                "times": 5,
                                "position": ["all", "top", "bottom", "left", "right"]
                            }
                        }
                    });
                }
                initSpacing();
            },
            "alignment": function () {
                $('#menuAlign,#hamMenuAlign').html('');
                $("#menuAlign").AdvanceAlignment({
                    targetParent: $activeDOM.parent(),
                    targetElem: $activeDOM
                });
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "logowidth": {
                            "prepend": "true",
                            "DOM": EasyLibrary.ReadDOM('menuResponsive'),
                            "onload": function ($item) {
                                let $parent = $activeDOM;
                                if ($parent.parents(".msty-tred").length > 0) {
                                    $("#respMenuTyeWrap").hide();
                                    $parent = $(".msty-ham").find(".menuHeader");
                                }
                                component["menu"].common.LogoWidth();
                                let pageName = $parent.find('.pageName');
                                $('#fontSize').AdvanceTextSetting({
                                    targetElem: pageName,
                                    targetParent: $parent,
                                    options: {
                                        size: true,
                                        lineheight: true,
                                        width: false,
                                        spacing: true,
                                        transform: false,
                                        family: false,
                                        weight: true,
                                        color: false,
                                        style: false,
                                        maxFontSize: 100
                                    }
                                });

                                let da = DeviceAlpha();
                                const respClass = {
                                    default: 'menulist eb-menu',
                                    horizontal: `${da}horizontal ${da}Dfx ${da}flxWrp`,
                                    side: da + 'Db',
                                    footer: da + 'Db'
                                };
                                let respMenuSlc = document.getElementById('respMenuTye');
                                let menuList = $parent.find('.menulist');
                                let regExString = `\\b${da}\\w+`;
                                let regEx = new RegExp(regExString, 'gi');
                                $(respMenuSlc).val(menuList.attr(`data-${da}Menu`));
                                respMenuSlc.addEventListener("change", function () {
                                    menuList.removeClass(() => {
                                        let matchedClass = menuList.attr('class').match(regEx);
                                        if (matchedClass !== null)
                                            matchedClass = matchedClass.join(' ');
                                        return matchedClass;
                                    }).addClass(respClass.default);
                                    let selectedVal = respMenuSlc.options[respMenuSlc.selectedIndex].value;
                                    menuList.attr(`data-${da}Menu`, selectedVal);
                                    switch (selectedVal) {
                                        case "horizontal":
                                            menuList.addClass(respClass.horizontal);
                                            break;
                                        case "side":
                                            menuList.addClass(respClass.side);
                                            break;
                                        case "footer":
                                            menuList.addClass(respClass.footer);
                                            break;
                                    }
                                });
                            }
                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("menuspacing"),
                    "onload": function () {
                        component["menu"].common.Spacing();
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="menuAlign"></div></div>',
                    "onload": function ($item) {
                        component["menu"].common.alignment();
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        }
    }
,    "menupages": {
        "componentname": "menupages",
        "category": "page",
        "icon": "icon-icon-row",
        "row": false,
        "hidden": true,
        "collection": false,
        "defaultdata": '',
        "type": "hidden",
        "afterdrop": function ($appendLayer) { },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Pages": {
                    "DOM": EasyLibrary.ReadDOM("sitemenu"),
                    "onload": function ($item) {
                        var $parent = $activeDOM;
                        var $ebmenu = $parent.find('nav > ul');
                        ReadMenu();
                        if ($parent.hasClass('menuHeader')) {
                            $('#pagemenutype').hide();
                        } else {
                            $('#pagemenutype').show();
                        }

                        function ReadMenu() {
                            var $ebbindMenu = $parent.find('.eb-menu');
                            var $menu = $ebbindMenu.find('> li');
                            $('#headerMenuLists').html(BindMenuItem($menu));
                            SortableMenu();
                            SortEvents();
                            var menuType = $ebmenu.attr('data-menu');
                            $('#selMenutype').val(menuType);
                            $('#selMenutype').on('change', function () {
                                $ebmenu.removeClass('horizontal').removeClass('side').removeClass('footer').removeClass('Dfx').removeClass('flxWrp');
                                var menuType = $(this).val();
                                if (menuType == 'horizontal') {
                                    $ebmenu.addClass('Dfx').addClass('flxWrp');

                                } else if (menuType == 'side') {
                                }
                                else if (menuType == 'footer') {

                                }

                                $ebmenu.attr('data-menu', $(this).val()).addClass($(this).val());
                            });
                        }

                        function BindMenuItem($menu) {
                            var html = '';
                            $.each($menu, function (index, item) {
                                var $item = $(this);
                                var pageID = $item.attr('data-pageid');
                                var pageName = $item.find(' > a > .pageName').text();
                                html += '<div data-type="page" data-pageid="' + pageID + '" class="panel panel-info form-elements element">';
                                html += '<div  class="field-row stElWrap col60-40 ">';
                                html += '<div class="fCol">';
                                html += '<span class="panel-heading fCol"><i class="fa fa-arrows" aria-hidden="true"></i></span>';
                                html += '<span class="title fCol">';
                                html += pageName;
                                html += '</span>';
                                html += "</div>";
                                html += '<div class="fCol TxAl-r">';
                                html += '<div class="showinmenu checkbx">';
                                var checked = "checked='checked'";
                                if ($item.hasClass('Dn'))
                                    checked = "";
                                html += '<input id="page_' + pageID + '" class="showpageinmenu" type="checkbox" ' + checked + '>';
                                html += '<label for="page_' + pageID + '" class="chBox"></label>';
                                html += '</div>';
                                html += '<span class="previewhere fa fa-eye fCol" title="preview page"></span>';
                                html += '<span class="gotoeditor fa fa-outdent fCol" title="go to editor"></span>';
                                html += "</div>";
                                html += "</div>";
                                if ($item.find('> ul > li').length > 0) {
                                    html += '<div class="sortable panel-body">';
                                    html += BindMenuItem($item.find('> ul > li'), item.MenuItemID);
                                    html += "</div>";
                                } else {
                                    html += '<div class="sortable panel-body">&nbsp;</div>';
                                }
                                html += "</div>";
                            });
                            return html;
                        }

                        function SortableMenu() {
                            var $panelList = $('.sortable');
                            $panelList.sortable({
                                start: function (event, ui) { },
                                handle: '.panel-heading',
                                connectWith: '.sortable',
                                placeholder: 'ui-hover-state',
                                receive: function (event, ui) { },
                                beforeStop: function (ev, ui) { },
                                stop: function (event, ui) {
                                    RebindMenu();
                                }
                            });
                        }
                        function ReArrange($panelList, $item) {
                            var $index = $item.index($panelList);
                            console.log($index);
                            var $pageid = $item.attr("data-pageid");
                            $ebmenu.find('div[data-pageid="' + pageid + '"]');
                            var $destinationMenu = $ebmenu.find();
                        }
                        function MoveMenuItems() {

                        }
                        function RebindMenu() {
                            var $menu = $('#headerMenuLists > div.panel-info');
                            //var $ebMenus= $parent.parent().parent().find('.eb-menu');
                            //$.each($ebMenus, function (index, item) {
                            //    var $ebMenuList = $ebMenus[index];
                            //    $ebMenuList.html(ReBindMenuItem($menu));
                            //});
                            if ($activeDOM.hasClass('menuHeader')) {
                                $(".msty-tred").find('.eb-menu').html(ReBindMenuItem($menu));
                                $(".msty-ham").find('.eb-menu').html(ReBindMenuItem($menu));
                            }
                            else
                            {
                                $activeDOM.find('nav > ul').html(ReBindMenuItem($menu));
                            }                            
                            if ($('#headerMenuLists > div.panel-info').length == 1) {
                                $('#headerMenuLists > div.panel-info > .deleteWebPage').remove(0);
                            }
                            PagelinkStop();
                            ActiveMenu();
                            MenuHover($('#primaryColor').css('background-color'), $('#secondaryColor').css('background-color'));
                        }
                        function SortEvents() {
                            $('.showpageinmenu').off().on('click', function () {
                                if ($('#headerMenuLists > .panel').find('.showpageinmenu:checked').length > 0) {
                                    var $this = $(this);
                                    var index = $(".showpageinmenu").index($this);
                                    if ($this.is(':checked')) {
                                        $ebmenu.find('li').eq(index).removeClass('Dn');
                                    } else {
                                        $ebmenu.find('li').eq(index).addClass('Dn');
                                    }
                                } else {
                                    SageAlertDialog('At least a page must be visible in menu');
                                    $(this).prop('checked', true);
                                }
                            });
                            $('.previewhere').on('click', function () {
                                var name = $(this).parent().parent().find('.title').text();
                                window.open(WbHostURL + '/' + name.replaceAll(" ", '-'), '_blank');
                            });
                            $('.gotoeditor').on('click', function () {
                                var name = $(this).parent().parent().find('.title').text();
                                window.location = WbHostURL + '/' + name.replaceAll(" ", '-');
                            });
                        }
                        function ReBindMenuItem($menu) {
                            var html = '';
                            var color = 'rgb(0,0,0)';
                            var fontSize = '';
                            if ($ebmenu.find('li a').not('.active-page').length == 0) {
                                color = 'rgb(0,0,0)';
                                fontSize = '12';
                            } else {
                                var $item = $ebmenu.find('li a').not('.active-page').eq(0);
                                color = $item.find('span').css('color');
                                fontSize = $item.find('span').css('font-size');
                            }
                            $.each($menu, function (index, item) {
                                var isChild = false;
                                var $item = $(this);
                                var pageID = $item.attr('data-pageid');
                                var pageName = $item.find('.title').eq(0).text();
                                var addliclass = 'Dn';
                                if ($item.find('.showinmenu').find('.showpageinmenu').is(':checked')) {
                                    addliclass = '';
                                }
                                var $li = $ebmenu.find("li[data-pageid='" + pageID + "']").eq(0);
                                var liClass = '';
                                var liStyle = '';
                                liClass = $li.attr('class');
                                if (liClass === undefined) {
                                    liClass = '';
                                }
                                liStyle = $li.attr('style');
                                if (liStyle === undefined) {
                                    liStyle = '';
                                }
                                var webbuilderID = $li.attr('data-webbuilderid');

                                var $a = $li.find('a');
                                var $span = $a.find('span');

                                var aClass = '';
                                var aStyle = '';
                                aClass = $a.attr('class');
                                if (aClass === undefined) {
                                    aClass = '';
                                }
                                aStyle = $a.attr('style');
                                if (aStyle == undefined) {
                                    aStyle = '';
                                }

                                var spanClass = '';
                                var spanStyle = '';
                                spanClass = $span.attr('class');
                                if (spanClass == undefined) {
                                    spanClass = '';
                                }
                                spanStyle = $span.attr('style');
                                if (spanStyle == undefined) {
                                    spanStyle = '';
                                }
                                var href = SageFrameHostURL + '/' + pageName.replace(/ /g, '-') + webBuilderPageExtension;
                                if ($item.find(' > div.panel-body > div.panel-info').length > 0) {
                                    isChild = true;
                                }
                                if (liClass.indexOf('hasChild') == -1 && isChild) {
                                    liClass = liClass + ' hasChild';
                                    // href = 'javascript:void(0)';
                                }
                                html += '<li data-pageid="' + pageID + '" data-webbuilderid="' + webbuilderID + '" class="' + liClass + '"  style="' + liStyle + '">';
                                html += '<a href="' + href + '" data-pageName=' + pageName.replace(/ /g, '-')+' class="redirectLink ' + aClass + '" style="' + aStyle + '"><span class="' + spanClass + '" style="' + spanStyle + '">' + pageName + '';
                                if (isChild) {
                                    html += '<i class="cb-arw-d"></i>';
                                }
                                html += '</span ></a > ';
                                if (isChild) {
                                    var backgroundcolor = $ebmenu.parents('nav').css('background-color');
                                    if (backgroundcolor == 'rgba(0, 0, 0, 0)') {
                                        backgroundcolor = 'rgba(255, 255, 255, 1)';
                                    }
                                    html += '<ul style="background-color:' + backgroundcolor + '" class="TxAL-l">';
                                    html += ReBindMenuItem($item.find(' > div.panel-body > div.panel-info'), isChild);
                                    html += "</ul>";
                                }
                                html += "</li>";
                            });
                            return html;
                        }
                    }
                },
            },
            "selectLayer": function ($elem) {
            },
        }
    }
,    "milestone": {
        "componentname": "milestone",
        "category": "advance",
        "icon": "fa fa-500px",
        "row": false,
        "hidden": false,
        "bucket": true,
        "collection": false,
        "type": "countdown",
        "defaultdata": EasyLibrary.ReadDOM('milestone/milestoneview'),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if ($(document).find('#hdnMilestoneSettingAttr').length <= 0)
                $('body').append('<div data-attribute="" style="display: none;" id="hdnMilestoneSettingAttr"></div>');
            if (!dropped)
                $('.mileStone-wrap').attr('data-animate', 0);
            component['milestone'].common.animateMilestone();
        },
        "onsort": function (ui) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('milestone/milestoneComp') + `<div id="MileItemsperow"></div><h4 style="font-size: 12px;">Gutter Spacing</h4><div id="gutterDOM"></div><div id="AlignDOM"></div>`,
                    "onload": function ($item) {
                        let $eachMilestone = $activeDOM.find('.milestone-item');
                        let $counters = $eachMilestone.find('.milestone-counter');
                        let $icons = $eachMilestone.find('.milestone-icon');
                        let $title = $eachMilestone.find('.milestone-title');
                        let $checkCounter = $('#ShowCounter');
                        let $checkTitle = $('#ShowTitle');
                        let $checkIcon = $('#ShowIcon');
                        let dAlpha = ViewDeviceAlpha();
                        let visible = dAlpha + 'Dn';
                        $checkCounter.prop('checked', !$counters.hasClass(visible));
                        $checkTitle.prop('checked', !$title.hasClass(visible));
                        $checkIcon.prop('checked', !$icons.hasClass(visible));

                        toggleVisibility($checkCounter, $counters, 'counter');
                        toggleVisibility($checkTitle, $title, 'title');
                        toggleVisibility($checkIcon, $icons, 'icon');

                        function toggleVisibility($checkbox, $target, _dataItem) {

                            $checkbox.off().on('change', function () {
                                let $this = $(this);
                                if ($this.prop('checked')) {
                                    $target.removeClass(visible);
                                }
                                else
                                    $target.addClass(visible);
                                dropdownEvent($target, _dataItem);
                            });
                        }

                        dropdownEvent($icons, 'icon');
                        dropdownEvent($title, 'title');
                        function dropdownEvent(_item, _itemName) {
                            if ($(_item[0]).hasClass('Dn'))
                                $(`option[data-item="${_itemName}"]`).addClass('Dn');
                            else $(`option[data-item="${_itemName}"]`).removeClass('Dn');
                        }
                        component['milestone'].editLib.perRowAndGutter('#MileItemsperow', '#gutterDOM', $activeDOM.find('.milestone-item'));

                    }
                },
                "Data": {
                    "DOM": EasyLibrary.ReadDOM('milestone/milestoneDatasetting'),
                    "onload": function ($item) {
                        var attr = $('#hdnMilestoneSettingAttr').data('attribute');
                        if (attr != '') {
                            $('#popupModel').attrs(attr);
                            $('#hdnMilestoneSettingAttr').data('attribute', '');
                        }

                        var MileStoneBasic = {
                            IconClassReg: /fa-\w+(\-*\w*)*/g,
                            Position: 0,
                            Container: $activeDOM,
                            init: function () {

                                let $MileStoneItem = MileStoneBasic.Container.find('.milestone-item');
                                var html = '';
                                var mLength = $MileStoneItem.length;
                                $MileStoneItem.each(function () {
                                    let $This = $(this);
                                    let $Mcount = $This.find('.milestone-counter h1').text();
                                    let $MTitle = $This.find('.milestone-title h1').text();
                                    let $MIcon = $This.find('.milestone-icon .mile-icon i').attr('class').match(MileStoneBasic.IconClassReg);
                                    html += '<div class="field-row data-row">';
                                    html += '<div class="item field-row stElWrap cPointer col100">';
                                    html += '<span class="sfCol_6 TxAl-l"><i class="fa fa-arrows-v sortHandle"></i></span>';
                                    html += '<span class="sfCol_2"></span>';
                                    html += '<span class=" sfCol_10 TxAl-c">';
                                    html += '<i class="iconChooser in-form-icon fa ' + $MIcon + '"></i>';
                                    html += '</span>';
                                    html += '<span class="sfCol_40  cb_input">';
                                    html += '<input type="text" class="title mileStoneInput" placeholder="Title" value="' + $MTitle + '" >';
                                    html += '</span>';
                                    html += '<span class="sfCol_2"></span>';
                                    html += '<span class="sfCol_30  cb_input">';
                                    html += '<input class="xsml-box counter mileStoneInput"  type="text" value="' + $Mcount + '">';
                                    html += '</span>';
                                    if (mLength > 1)
                                        html += '<span class=" sfCol_10 TxAl-r">';
                                    html += '<i title="Delete" class="deleteMilestone fa fa-trash in-form-icon delete-icon"></i>';
                                    html += '</span></div></div>';

                                });
                                $('.mileStoneForm').html(html);

                                if ($('.mileStoneForm').children().length < 2)
                                    $('.deleteMilestone').hide();

                                MileStoneBasic.UIEvents();
                            },
                            UIEvents: function () {
                                var firstItem = MileStoneBasic.Container.find('.milestone-icon').first();
                                if (firstItem.css('display') != 'none')
                                    $('#chkIsActiveMileIcon').prop('checked', true);
                                $('#chkIsActiveMileIcon').off().on('click', function () {
                                    var IconWrap = MileStoneBasic.Container.find('.milestone-icon');
                                    if ($(this).is(':checked')) {
                                        IconWrap.show();
                                    } else {
                                        IconWrap.hide();
                                    }
                                });

                                $('.addMoreMilestone').off().on('click', function () {
                                    let $MItem = MileStoneBasic.Container.find('.milestone-item').last();
                                    var NewDom = document.createElement("div");
                                    $(NewDom).attrs($MItem.attrs());
                                    $(NewDom).html($MItem.html());
                                    let $MContainer = MileStoneBasic.Container.find('.mileStone-wrap');
                                    $MContainer.prepend(NewDom);

                                    $('#hdnMilestoneSettingAttr').data('attribute', $('#popupModel').attrs());
                                    SettingEvents($activeDOM);
                                    component['milestone'].editLib.reloadAllSettingTabs('settingDOMs');
                                    //MileStoneBasic.SettingButton.trigger('click');
                                });

                                $('.deleteMilestone').off().on('click', function () {
                                    $this = $(this);
                                    SageConfirmDialog('Are you sure?').done(function () {
                                        let $pos = $('.mileStoneForm .item').index($this.parents('.item'));
                                        MileStoneBasic.Container.find('.milestone-item').eq($pos).remove();
                                        MileStoneBasic.init();
                                    });
                                });
                                $('.mileStoneInput').off().on('keyup', function () {
                                    let $this = $(this);
                                    let $Val = $this.val();
                                    let $pos = $('.mileStoneForm .item').index($this.parents('.item'));
                                    var mileStoneItem = MileStoneBasic.Container.find('.milestone-item').eq($pos);
                                    if ($this.hasClass('title')) {
                                        mileStoneItem.find('.milestone-title h1').text($Val);
                                    } else {
                                        if ($Val == '')
                                            $Val = 0;
                                        if (parseInt($Val) >= 0)
                                            mileStoneItem.find('.milestone-counter h1').text($Val);
                                    }
                                });

                                $('#MilestonefontIconCollection').html($('ul#fontIconCollection').html());

                                $('.iconChooser').off('click').on('click', function () {
                                    let $this = $(this);
                                    $this.parent().parent().parent().next($('.milestoneIconList'));
                                    MileStoneBasic.Position = $('.mileStoneForm .item').index($this.parents('.item'));
                                    //$('.milestoneIconList').removeClass('hide-element');
                                    $('.milestoneIconList').insertAfter($this.parents('.data-row'));
                                    $('.milestoneIconList').show();

                                    $('#MilestonefontIconCollection').find('li').removeClass('selected');
                                    var CurrentClass = $this.attr('class').match(MileStoneBasic.IconClassReg)[0];
                                    $('#MilestonefontIconCollection').find('li i[data-class="' + CurrentClass + '"]').parent().addClass('selected');

                                });
                                $('.closeIconChooser').off().on('click', function () {
                                    $('.milestoneIconList').hide();
                                    $('.mileStoneForm').parent().append($('.milestoneIconList'));
                                });
                                $('#MilestoneSearchIcon').on('keyup', function () {
                                    var searchVal = $(this).val();
                                    $('#MilestonefontIconCollection').find('li').each(function () {
                                        var $this = $(this);
                                        var dataClass = $this.find('i').attr('data-class');
                                        var pos = dataClass.indexOf(searchVal);
                                        if (pos < 0) {
                                            $this.addClass('Dn');
                                        } else {
                                            $this.removeClass('Dn');
                                        }
                                    });
                                });
                                $('#MilestonefontIconCollection').find('li').on('click', function () {

                                    var chooseClass = $(this).find('i').attr('data-class');
                                    $('#MilestonefontIconCollection').find('li').removeClass('selected');
                                    $('#MilestonefontIconCollection').find('li i[data-class="' + chooseClass + '"]').parent().addClass('selected');
                                    let $FormIcon = $('.mileStoneForm .item').eq(MileStoneBasic.Position).find('.iconChooser ');
                                    var PrevClass = $FormIcon.attr('class').match(MileStoneBasic.IconClassReg)[0];
                                    //console.log(PrevClass);
                                    $FormIcon.removeClass(PrevClass);
                                    $FormIcon.addClass(chooseClass);
                                    $ViewIcon = MileStoneBasic.Container.find('.milestone-item').eq(MileStoneBasic.Position).find('.mile-icon i');
                                    $ViewIcon.removeClass(PrevClass);
                                    $ViewIcon.addClass(chooseClass);
                                    $(".closeIconChooser").trigger("click");
                                });
                            },
                        };
                        $('.mileStoneForm').parent().append($('.milestoneIconList'));
                        MileStoneBasic.init();

                        $(".mileStoneForm").AdvanceSorting({
                            targetParent: $('.mileStone-wrap'),
                            targetElem: ".milestone-item",
                            sortableOptions: {
                                items: "div.data-row",
                                handle: ".sortHandle",
                                containment: "div.mileStoneForm",
                                start: function (event, ui) {
                                    $('.closeIconChooser').trigger('click');
                                }
                            }
                        });
                    }
                },
                "Spacing": {
                    "DOM": EasyLibrary.ReadDOM('milestone/spacing', false),
                    "custom": true,
                    "onload": function ($item) {
                        component['milestone'].common.spacing();
                    }
                },
                "Text": {
                    "DOM": EasyLibrary.ReadDOM('milestone/textSetting', false),
                    "custom": true,
                    "onload": function () {
                        component['milestone'].common.textSetting();
                    }
                },
                "Alignment": {
                    "DOM": EasyLibrary.ReadDOM('milestone/alignment', false),
                    "custom": true,
                    "onload": function () {
                        component['milestone'].common.alignment();
                    }
                }

            }

        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "DOM": EasyLibrary.ReadDOM('milestone/background', false),
                    "custom": true,
                    "onload": function ($item) {
                        let val = $('#slcMilestoneBgColor').val();
                        dropdownEvent($activeDOM.find('.milestone-icon'), 'icon');
                        dropdownEvent($activeDOM.find('.milestone-title'), 'title');
                        function dropdownEvent(_item, _itemName) {
                            if ($(_item[0]).hasClass('Dn'))
                                $(`option[data-item="${_itemName}"]`).addClass('Dn');
                            else $(`option[data-item="${_itemName}"]`).removeClass('Dn');
                        }
                        backgroundColor();
                        $('#slcMilestoneBgColor').off().on('change', function () {
                            val = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle').end().find(val).addClass('actEle');
                            backgroundColor();
                        });
                        function backgroundColor() {
                            $("#milestoneBackground").html('');
                            $("#milestoneBackground").AdvanceBackground({
                                targetParent: $activeDOM.parent(),
                                targetElem: val,
                                options: ["color"]
                            });
                        }
                    }
                },

                "Border": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('milestone/border', false),
                    "onload": function ($item) {
                        let val = $('#slcMilestoneBorder').val();
                        milestoneBorder();
                        $('#slcMilestoneBorder').off().on('change', function () {
                            val = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle').end().find(val).addClass('actEle');
                            milestoneBorder();
                        });
                        function milestoneBorder() {
                            $("#milestoneBorder").html('');
                            $("#milestoneBorder").AdvanceBorder({
                                targetParent: $activeDOM.parent(),
                                targetElem: val,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });
                        }
                    }
                },

                "Border Radius": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('milestone/borderradius',false),
                    "onload": function ($item) {
                        let val = $('#slcMilestoneBdrRadius').val();
                        milestoneBdrRadius();
                        $('#slcMilestoneBdrRadius').off().on('change', function () {
                            val = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle').end().find(val).addClass('actEle');
                            milestoneBdrRadius();
                        });
                        function milestoneBdrRadius() {
                            $("#milestoneBdrRadius").html('');
                            $("#milestoneBdrRadius").AdvanceBoxRadius({
                                targetParent: $activeDOM.parent(),
                                targetElem: val,
                                options: {
                                    "max": 50,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"],
                                }
                            });
                        }
                    }
                },

                "Box Shadow": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('milestone/shadow', false),
                    "onload": function ($item) {
                        let val = $('#slcMilestoneShadow').val();
                        milestoneShadow();
                        $('#slcMilestoneShadow').off().on('change', function () {
                            val = $(this).val();
                            $activeDOM.find('.actEle').removeClass('actEle').end().find(val).addClass('actEle');
                            milestoneShadow();
                        });
                        function milestoneShadow() {
                            $("#milestoneBdrShadow").html('');
                            $("#milestoneBdrShadow").AdvanceBoxShadow({
                                targetParent: $activeDOM.parent(),
                                targetElem: val,
                            });
                        }
                    }
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Visibility": {},
                        "PerRow": {
                            "cusotom": true,
                            "DOM": `<div id="Resp"></div><div id="AlignDOMResp"></div>`,
                            "prepend": true,
                            "onload": function ($item) {
                                $('#Resp').append(component['milestone'].settingDOMs.tabs.Basic.DOM);
                                component['milestone'].settingDOMs.tabs.Basic.onload();
                            }
                        }
                    }
                },
                "Spacing": {
                    "DOM": EasyLibrary.ReadDOM('milestone/spacing', false),
                    "custom": true,
                    "onload": function ($item) {
                        component['milestone'].common.spacing();
                    }
                },
                "Text": {
                    "DOM": EasyLibrary.ReadDOM('milestone/textSetting', false),
                    "custom": true,
                    "onload": function () {
                        component['milestone'].common.textSetting();
                    }
                },
                "Alignment": {
                    "DOM": EasyLibrary.ReadDOM('milestone/alignment', false),
                    "custom": true,
                    "onload": function () {
                        component['milestone'].common.alignment();
                    }
                }

            }
        },
        'editLib': {
            "perRowAndGutter": function (perRowDOM, gutterDOM, targetEle) {
                $(perRowDOM).AdvanceItemsPerRow({
                    targetParent: $activeDOM,
                    targetElem: targetEle,
                    label: 'Items per row',
                    callback: function (itemperrow) {
                        callGutter(itemperrow);
                    }
                });

                let itemperrow = $(perRowDOM).find('select option:selected').text();
                callGutter(itemperrow);
                function callGutter(itemperrow) {
                    $(gutterDOM).AdvanceGutterSpace({
                        targetParent: $activeDOM,
                        targetElem: targetEle,
                        itemsperrow: itemperrow,
                    });
                    if (itemperrow < 2) {
                        $(gutterDOM).children('div').first().hide();
                    }
                }

            },
            "reloadAllSettingTabs": function (setOrStyleDOM, excludeThis) {
                let componentName = 'milestone';
                if (componentName == undefined || componentName == '') {
                    this.getSetDataType.setType($activeDOM);
                    componentName = this.getSetDataType.getType();
                }
                let tabArray = Object.keys(component[componentName][setOrStyleDOM].tabs);
                if (excludeThis) {
                    $.each(excludeThis, function (i, val) {
                        tabArray.splice(tabArray.indexOf(val), 1);
                    });
                }

                tabArray.forEach(function (val) {
                    component[componentName][setOrStyleDOM].tabs[val].onload();
                });

            },
            "allWrapperSize": function () {
                let $parent = $activeDOM.find('.fonticon');
                function LineHeightChange(space) {
                    ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + space);
                    ReplaceClassByPattern($parent, 'W-[0-9]{1,4}', 'W-' + space);
                }
                AdvanceSageSlider($('#mileIconSizeSlider'), $('#mileIconSizeHandle'), 5, 1080, GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-'), LineHeightChange, $parent, 'px');
            }
        },
        "common": {
            "animateMilestone": function () {
                $(window).scroll(function () {
                    initAnimation();
                });
                var winHeight = $(window).height() - 80;

                function IsInVisibleSection($Component) {
                    var winScroll = $(window).scrollTop();
                    var diff = $Component.offset().top - winScroll;
                    if (0 <= diff && diff < winHeight)
                        return true;
                    else
                        return false;
                }
                initAnimation();
                function initAnimation() {
                    $('.mileStone-wrap').each(function () {
                        if (IsInVisibleSection($(this)) && $(this).attr('data-animate') == 0) {
                            $(this).attr('data-animate', 1);
                            $(this).find('.milestone-counter h1').each(function () {
                                let $mileValue = $(this);
                                let valString = $mileValue.text();
                                let num = valString.match(/[\d]+/);
                                num = parseInt(num[0]);
                                $(this).prop('Counters', 0).animate({
                                    Counters: num
                                }, {
                                        duration: 4000,
                                        easing: 'swing',
                                        step: function (now) {
                                            $(this).text(Math.ceil(now));
                                        },
                                        progress: function (animation, progress, msRemaining) {
                                            let reg = RegExp('\\+', 'gi');
                                            if (reg.test(valString))
                                                $mileValue.append('+');
                                        }
                                    });
                            });
                        }
                    });
                }
            },
            "textSetting": function () {
                let val = $('#milestoneTxtSett').val();
                advanceText();
                $('#milestoneTxtSett').off().on('change', function () {
                    val = $(this).val();
                    $activeDOM.find('.actEle').removeClass('actEle').end().find(val).addClass('actEle');
                    advanceText();
                });
                function advanceText() {
                    $("#milestoneTxtSetting,#milestoneSize").html('');
                    if (val === '.fonticon') {
                        val = '.font-icon';
                        let options = {
                            size: true,
                            lineheight: false,
                            width: false,
                            spacing: false,
                            transform: false,
                            family: false,
                            weight: false,
                            color: true,
                            style: false,
                            heading: false
                        };
                        $('#milestoneWrapSize').removeClass('Dn');
                        text(options, true);
                    }
                    else {
                        $('#milestoneWrapSize').removeClass('Dn').addClass('Dn').find('.manualSize').remove();
                        text();
                    }

                }
                function text(options) {
                    $("#milestoneTxtSetting").AdvanceTextSetting({
                        targetParent: $activeDOM,
                        targetElem: val,
                        options: options
                    });
                    if (options !== undefined) {
                        component['milestone'].editLib.allWrapperSize();
                    }
                    //$("#milestoneSize").AdvanceDimension({
                    //    type: 'sfwidth',
                    //    targetParent: $activeDOM,
                    //    targetElem: ".fonticon",
                    //    label: 'Width',
                    //});
                }
            },
            "spacing": function () {
                let val = $('#slcMilestoneSpacing').val();
                spacing();
                $('#slcMilestoneSpacing').off().on('change', function () {
                    val = $(this).val();
                    $activeDOM.find('.actEle').removeClass('actEle').end().find(val).addClass('actEle');
                    spacing();
                });
                function spacing() {
                    $("#milestoneMSpacing,#milestonePSpacing").html('');
                    $("#milestoneMSpacing").AdvanceSpacing({
                        targetParent: $activeDOM.parent(),
                        targetElem: val,
                        options: {
                            "margin": {
                                "max": 40,
                                "min": -40,
                                "times": 5,
                                "position": ["all", "top", "bottom", "left", "right"]
                            },
                        },
                    });
                    $("#milestonePSpacing").AdvanceSpacing({
                        targetParent: $activeDOM.parent(),
                        targetElem: val,
                        options: {
                            "padding": {
                                "max": 40,
                                "min": 0,
                                "times": 5,
                                "position": ["all", "top", "bottom", "left", "right"]
                            }
                        },
                    });
                }
            },
            "alignment": function () {
                let val = $('#slcMilestoneAlign').val();
                alignment();
                $('#slcMilestoneAlign').off().on('change', function () {
                    val = $(this).val();
                    $activeDOM.find('.actEle').removeClass('actEle').end().find(val).addClass('actEle');
                    alignment();
                });
                function alignment() {
                    $("#milestoneAlignment").html('');
                    $("#milestoneAlignment").AdvanceAlignment({
                        targetParent: $activeDOM.parent(),
                        targetElem: val
                    });
                }
            }
        },
        "remove": function () {
        },
        "view": {
            "view": function () {
                this.library.initAnimatCounter();
            },
            "library": {
                "initAnimatCounter": function () {
                    $('.mileStone-wrap').attr('data-animate', 0);
                    component['milestone'].common.animateMilestone();
                }
            }
        }
    }
,    "pie chart": {
        "componentname": "pie chart",
        "category": "advance",
        "icon": "fa fa-pie-chart",
        "row": false,
        "hidden": false,
        "bucket": true,
        "collection": true,
        "type": "graph",
        "defaultdata": EasyLibrary.ReadDOM('piechart/piechartdom'),
        "beforeDrop": function ($this) {

        },
        "afterdrop": function ($appendedParent, $appendLayer) {
            this.view.view();
        },
        "onsort": function (ui) {
            this.view.view();
        },
        "settingDOMs": {
            "tabs": {
                "Title": {
                    "DOM": `<div id="titleTextWrap"></div>`,
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $("#titleTextWrap").AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: '.pieTitle',
                            options: {
                                size: true,
                                width: true,
                                spacing: true,
                                transform: true,
                                family: true,
                                weight: true,
                                color: true
                            }
                        });
                        $('#titleTextWrap').prepend(EasyLibrary.ReadDOM('piechart/piechartbasicsettings'));
                        let barTitle = $parent.find('.pieTitle').text();
                        $("#txtPieChartTitle").val(barTitle);
                        $("#txtPieChartTitle").off('keyup').on("keyup", function () {
                            let value = $(this).val().trim();

                            let $elm = $parent.find('.pieTitle');
                            $elm.text(value);
                        });
                    }
                },
                "Data": {
                    "DOM": EasyLibrary.ReadDOM('piechart/pieChartDataWrapper'),
                    "onload": function ($item) {
                        var $parent = $item.parents('.pieChart');
                        var eleIndex = -1;

                        var $pieChartWrapper = $parent.find('.pieChartWrapper');
                        var pieData = $pieChartWrapper.attr('data-value');

                        var pieDataArray = JSON.parse(pieData);

                        LoadData();
                        InitPieEvents();
                        InitAddMorePieEvent();

                        function LoadData() {
                            var html = '';
                            $("#pieChartEditWrapper").html('');

                            $.each(pieDataArray, function (index, item) {
                                html += '<div class="field-row data-row">';
                                html += '<div class="field-row stElWrap col100">';
                                html += '<span class="sfCol_6 TxAl-l cPointer"><i class="fa fa-arrows-v sortHandle"></i></span>';
                                html += '<span class="sfCol_2"></span>';
                                html += '<span class="fcol sfCol_10"> ';
                                html += '<span class="color-picker-holder chooseColor choosePieFontColor" style="background-color: ' + item.color + '"></span>';
                                html += '</span>';
                                html += '<span class="sfCol_40  cb_input">';
                                html += '<input type="text" maxlength="15" class=" indPieName" value="' + item.name + '"/>';
                                html += '</span>';
                                html += '<span class="sfCol_2"></span>';
                                html += '<span class="sfCol_30 cb_input">';
                                html += '<input type="text" class="indPieValue" value="' + item.value + '"/>';
                                html += '</span>';
                                html += '<span class="sfCol_10 deletePieContainer TxAl-r">';
                                html += '<i title="delete" class=" in-form-icon fa fa-trash-o delete-icon deletePie"></i>';
                                html += '</span>';
                                html += '</div>';
                                html += '</div>';
                            });
                            $("#pieChartEditWrapper").html(html);

                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    var dataIndex = $('#pieChartEditWrapper').find('.data-row').index($elm.parent().parent().parent());

                                    pieDataArray[dataIndex].color = objColor.bgColor;
                                    var jsonData = JSON.stringify(pieDataArray);
                                    $pieChartWrapper.attr('data-value', jsonData);
                                    component['pie chart'].afterdrop($parent.parent(), $parent);
                                }
                            });
                            $('.choosePieFontColor').colorPicker(colorPickerOption);

                        }


                        function InitPieEvents() {

                            $("#pieChartEditWrapper .indPieName").off('keyup').on('keyup', function () {
                                var value = $(this).val().trim();
                                var dataIndex = $('#pieChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());

                                pieDataArray[dataIndex].name = value;
                                var jsonData = JSON.stringify(pieDataArray);
                                $pieChartWrapper.attr('data-value', jsonData);
                                component['pie chart'].afterdrop($parent.parent(), $parent);
                            });

                            $("#pieChartEditWrapper .indPieValue").off('keyup').on('keyup', function () {
                                var value = $(this).val().trim();
                                var dataIndex = $('#pieChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());

                                if (value.length == 0) {
                                    value = 0;
                                    pieDataArray[dataIndex].value = value;
                                    var jsonData = JSON.stringify(pieDataArray);
                                    $pieChartWrapper.attr('data-value', jsonData);
                                    component['pie chart'].afterdrop($parent.parent(), $parent);
                                    $(this).attr('value', value);
                                    $(this).val(value);
                                } else if (isNaN(value)) {
                                    $(this).attr('value', pieDataArray[dataIndex].value);
                                    $(this).val(pieDataArray[dataIndex].value);
                                } else if (parseFloat(value) < 0) {
                                    $(this).attr('value', pieDataArray[dataIndex].value);
                                    $(this).val(pieDataArray[dataIndex].value);
                                } else {
                                    pieDataArray[dataIndex].value = value;
                                    var jsonData = JSON.stringify(pieDataArray);
                                    $pieChartWrapper.attr('data-value', jsonData);
                                    component['pie chart'].afterdrop($parent.parent(), $parent);
                                }
                            });

                            $("#pieChartEditWrapper .deletePie").off('click').on('click', function () {
                                let childrenCount = $('#pieChartEditWrapper').children().length;
                                if (--childrenCount < 2)
                                    $('.deletePie').hide();
                                var dataIndex = $('#pieChartEditWrapper').find('.data-row').index($(this).parent().parent().parent());

                                pieDataArray.splice(dataIndex, 1);
                                var jsonData = JSON.stringify(pieDataArray);
                                $pieChartWrapper.attr('data-value', jsonData);
                                $(this).parent().parent().parent().remove();
                                component['pie chart'].afterdrop($parent.parent(), $parent);
                            });

                            var sortParams = {
                                targetParent: $parent,
                                targetElem: '.pieChart',
                                sortableOptions: {
                                    items: 'div.data-row',
                                    handle: '.sortHandle',
                                    containment: "#pieChartEditWrapper",
                                    start: function (event, ui) { },
                                    stop: function (event, ui) {
                                        pieDataArray = [];
                                        $('#pieChartEditWrapper').find('.data-row').each(function (index, object) {
                                            let obj = {
                                                id: index + 1,
                                                name: $(object).find('.indPieName').val(),
                                                value: $(object).find('.indPieValue').val(),
                                                color: $(object).find('.choosePieFontColor').css('background-color')
                                            };
                                            pieDataArray.push(obj);
                                            var jsonData = JSON.stringify(pieDataArray);
                                            $pieChartWrapper.attr('data-value', jsonData);
                                            component['pie chart'].afterdrop($parent.parent(), $parent);
                                        });
                                    }
                                }
                            };
                            $('#pieChartEditWrapper').AdvanceSorting(sortParams);
                        }
                        function getRandomColor() {
                            let colors = [];
                            for (let i = 0; i < 3; i++) {
                                colors.push(Math.floor(Math.random() * Math.floor(256)));
                            }
                            return `rgb(${colors})`;
                        }

                        function InitAddMorePieEvent() {
                            $("#btnAddMorePieData").off().on("click", function () {
                                let randomColor = getRandomColor();
                                var html = '';
                                var $editParent = $('#pieChartEditWrapper');

                                if ($editParent.find('.data-row').length > 0) {
                                    var $editHtml = '';
                                    var duplicateData = pieDataArray[0];
                                    var itemCount = pieDataArray.length;
                                    var $firstDom = $editParent.find('.data-row').eq(0);
                                    var attrClass = $firstDom.attr('class');
                                    $editHtml += '<div class="' + attrClass + '">';
                                    $editHtml += '<div class="field-row stElWrap col100">';
                                    $editHtml += '<span class="sfCol_6 TxAl-l cPointer"><i class="fa fa-arrows-v sortHandle"></i></span>';
                                    $editHtml += '<span class="sfCol_2"></span>';
                                    $editHtml += '<span class="fcol sfCol_10"> ';
                                    $editHtml += '<span class="color-picker-holder chooseColor choosePieFontColor" style="background-color: ' + randomColor + '"></span>';
                                    $editHtml += '</span>';
                                    $editHtml += '<span class="sfCol_40  cb_input">';
                                    $editHtml += '<input type="text" maxlength="15" class="indPieName valid" value="' + duplicateData.name + '"/>';
                                    $editHtml += '</span>';
                                    $editHtml += '<span class="sfCol_2"></span>';
                                    $editHtml += '<span class="sfCol_30 cb_input">';
                                    $editHtml += '<input type="text" class="indPieValue" value="' + duplicateData.value + '"/>';
                                    $editHtml += '</span>';
                                    $editHtml += '<span class="sfCol_10 deletePieContainer TxAl-r">';
                                    $editHtml += '<i title="delete" class="in-form-icon fa fa-trash-o delete-icon deletePie"></i>';
                                    $editHtml += '</span>';
                                    $editHtml += '</div>';
                                    $editHtml += '</div>';
                                    $editParent.prepend($editHtml);
                                    var $deleteContainer = $('.deletePieContainer');
                                    $.each($deleteContainer, function (i, val) {
                                        $(val).children().show();
                                    });

                                    var newData = {
                                        "id": itemCount + 1,
                                        "name": duplicateData.name,
                                        "value": duplicateData.value,
                                        "color": randomColor
                                    };



                                    pieDataArray.unshift(newData);
                                } else {
                                    html += '<div class="field-row data-row">';
                                    html += '<div class="field-row stElWrap col100">';
                                    html += '<span class="sfCol_6 TxAl-l cPointer"><i class="fa fa-arrows-v sortHandle"></i></span>';
                                    html += '<span class="sfCol_2"></span>';
                                    html += '<span class="sfCol_10">';
                                    html += '<span class="color-picker-holder chooseColor choosePieFontColor" style="background-color: #A55CA5;"></span>';
                                    html += '</span>';
                                    html += '<span class="sfCol_40  cb_input">';
                                    html += '<input type="text" maxlength="15" class="indPieName valid" value="data 1"  />';
                                    html += '</span>';
                                    html += '<span class="sfCol_2"></span>';
                                    html += '<span class="sfCol_30 cb_input">';
                                    html += '<input class=" indPieValue" value="10" type="text"/>';
                                    html += '</span>';
                                    html += '<span class="sfCol_10 deletePieContainer TxAl-r">';
                                    html += '<i title="delete" class="  in-form-icon fa fa-trash-o delete-icon deletePie"></i>';
                                    html += '</span>';
                                    html += '</div>';
                                    html += '</div>';
                                    $editParent.prepend(html);

                                    var defaultData = {
                                        "id": 1,
                                        "name": "data 1",
                                        "value": 10,
                                        "color": "#A55CA5"
                                    };
                                    pieDataArray.unshift(defaultData);
                                }

                                var jsonData = JSON.stringify(pieDataArray);
                                $pieChartWrapper.attr('data-value', jsonData);
                                component['pie chart'].afterdrop($parent.parent(), $parent);

                                var colorPickerOption = ColorPickerOption({
                                    renderCallback: function ($elm, toggled) {
                                        var objColor = RenderCallBackColor(this);
                                        var dataIndex = $('#pieChartEditWrapper').find('.data-row').index($elm.parent().parent().parent());

                                        pieDataArray[dataIndex].color = objColor.bgColor;
                                        var jsonData = JSON.stringify(pieDataArray);
                                        $pieChartWrapper.attr('data-value', jsonData);
                                        component['pie chart'].afterdrop($parent.parent(), $parent);
                                    }
                                });
                                $('.choosePieFontColor').colorPicker(colorPickerOption);


                                InitPieEvents();

                            });
                        }

                    }
                },
                "Legend": {
                    "DOM": `<div id="legendTextWrap"></div>` + CreateColorPickerDOM("Font Color",'labelColor',''),
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $("#legendTextWrap").AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: '.pieLegend>.cGrid>.Dib',
                            options: {
                                size: true,
                                width: true,
                                spacing: true,
                                transform: true,
                                family: true,
                                weight: true,
                                color: false
                            }
                        });
                        let $colorCircle = $('#labelColor');
                        let $pieWrap=$parent.find('.pieChartWrapper');
                        let legends = $parent.find('.pieLegend>.cGrid>.Dib');
                        let color = $pieWrap.attr('data-labelColor');
                        $colorCircle.css('background-color', color)
                        var colorPickerOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                legends.css({ 'color': objColor.bgColor });
                                $pieWrap.attr('data-labelColor', objColor.bgColor)
                            }
                        });
                        $colorCircle.colorPicker(colorPickerOption);

                        
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div>
                            <div id="titleAlignDOM"></div>
                            <div id="canvasAlignDOM"></div>
                            <div id="legendAlignDOM"></div>
                            </div>`,
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();


                        $('#titleAlignDOM').AdvanceAlignment({
                            targetParent: $parent,
                            targetElem: $('.pieTitle').parent(),
                            options: {
                                "horizontal": ["left", "center", "right"]
                            },
                            labels: {
                                'horizontal': 'Title'
                            }
                        });

                        $('#canvasAlignDOM').AdvanceAlignment({
                            targetParent: $parent,
                            targetElem: '.pieChartWrapper ',
                            options: {
                                "horizontal": ["left", "center", "right"]
                            },
                            labels: {
                                'horizontal': 'Chart'
                            }
                        });

                        $('#legendAlignDOM').AdvanceAlignment({
                            targetParent: $parent,
                            targetElem: '.pieLegend',
                            options: {
                                "horizontal": ["left", "center", "right"]
                            },
                            labels: {
                                'horizontal': 'Legend'
                            }
                        });

                    }
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Visibility": {}
                    }
                }
            }
        },
        "view": {
            "view": function () {
                
                var myCanvasList = document.querySelectorAll(".pieCanvas");

                var _this = this;
                if (myCanvasList.length == 0) {

                } else {
                    $.each(myCanvasList, function (index, item) {
                        var myCanvas = item;//pieCanvas
                        let piWrapper = item.parentNode;
                        var parentWidth = piWrapper.offsetWidth;//border+padding+netWidth
                        parentWidth = Math.max(parentWidth, 250);
                        myCanvas.height = parentWidth * 0.6;
                        myCanvas.width = parentWidth * 0.6;

                        var pieFontColor = piWrapper.getAttribute('data-piefontcolor');
                        var pieChartData = piWrapper.getAttribute('data-value');
                        var pieChartFont = piWrapper.getAttribute('data-piefontsize');
                        let labelColor = piWrapper.getAttribute('data-labelColor');
                        var pieData = JSON.parse(pieChartData);

                        var ctx = myCanvas.getContext("2d");
                        
                        var myLegend = piWrapper.children[2];

                        _this.library.PieChart({
                            canvas: myCanvas,
                            seriesName: "Pie Chart",
                            padding: 20,
                            pieFontColor: pieFontColor,
                            data: pieData,
                            legend: myLegend,
                            width: parentWidth,
                            pieChartFont: pieChartFont,
                            labelColor
                        });
                    });
                }
            },
            "library": {
                "DrawLine": function (ctx, startX, startY, endX, endY, color) {
                    ctx.save();
                    ctx.strokeStyle = color;
                    ctx.beginPath();
                    ctx.moveTo(startX, startY);
                    ctx.lineTo(endX, endY);
                    ctx.stroke();
                    ctx.restore();
                },

                "DrawArc": function (ctx, centerX, centerY, radius, startAngle, endAngle, color) {
                    ctx.save();
                    ctx.strokeStyle = color;
                    ctx.beginPath();
                    ctx.arc(centerX, centerY, radius, startAngle, endAngle);
                    ctx.stroke();
                    ctx.restore();
                },

                "DrawPieSlice": function (ctx, centerX, centerY, radius, startAngle, endAngle, color) {
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.moveTo(centerX, centerY);
                    ctx.arc(centerX, centerY, radius, startAngle, endAngle);
                    ctx.closePath();
                    ctx.fill();
                },

                "PieChart": function (options) {
                    this.options = options;
                    this.canvas = options.canvas;
                    this.ctx = this.canvas.getContext("2d");
                    //this.colors = options.colors;
                    var _this = this;
                    this.draw = function () {
                        var total_value = 0;
                        var maxValue = 0;
                        var maxWidth = 0;
                        $.each(this.options.data, function (index, categ) {
                            //console.log(categ);
                            total_value += parseFloat(categ.value);
                        });

                        var start_angle = 0;

                        var textWidth = 0;
                        $.each(this.options.data, function (index, categ) {
                            var val = parseFloat(categ.value);

                            var slice_angle = 2 * Math.PI * val / total_value;
                            _this.DrawPieSlice(
                                _this.ctx,
                                _this.canvas.width / 2,
                                _this.canvas.height / 2,
                                Math.min(_this.canvas.width / 2, _this.canvas.height / 2),
                                start_angle,
                                start_angle + slice_angle,
                                categ.color
                            );


                            var pieRadius = Math.min(_this.canvas.width / 2, _this.canvas.height / 2);
                            var labelX = _this.canvas.width / 2 + (pieRadius / 2) * Math.cos(start_angle + slice_angle / 2);
                            var labelY = _this.canvas.height / 2 + (pieRadius / 2) * Math.sin(start_angle + slice_angle / 2);


                            var labelText = Math.round(100 * val / total_value);
                            _this.ctx.fillStyle = _this.options.pieFontColor;

                            var fontSize = _this.options.pieChartFont;
                            //console.log("bold " + parseInt(fontSize) + "px Arial");
                            _this.ctx.font = "bold " + parseInt(fontSize) + "px Arial";
                            _this.ctx.fillText(labelText + "%", labelX, labelY);


                            start_angle += slice_angle;


                        });

                        if (_this.options.legend) {
                            var legendHTML = "";
                            var fontSize = _this.options.width / 500 * 12;
                            
                            let labelColor = _this.options.labelColor;

                            var html = '<div class="cGrid position-absolute" style="top: 20px; right:20px;">';
                            if ((_this.options.width * 0.6) < 250) {
                                html = '<div  style="top: 20px; left:20px;">';
                            }
                            $.each(this.options.data, function (index, categ) {
                                html += `<div class="Pa-5 Dib sfCol_25 Fs-17" style="color:${labelColor};"><span style="display:inline-block; width:20px; background-color:${categ.color};">&nbsp;</span>${categ.name}</div>`;
                            });

                            html += '</div>';
                            _this.options.legend.innerHTML = html;
                        }

                    };

                    this.draw();
                }
            }
        },
        "resize": function () {
            this.view.view();
        }
    }
,    "Policy Info": {
        "componentname": "Policy Info",
        "category": "advance",
        "icon": "fa fa-exclamation",
        "bucket": true,
        "hidden": false,
        "dependent": ["rich text", "button"],
        "defaultdata": EasyLibrary.ReadDOM("policyinfo/view", false),
        "onsort": function (ui) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped) {
                $appendLayer.find('.divRichText').LightTextEditor();
            }
            this.inheritSettings();
        },
        "settingDOMs": {
            "tabs": {
                "Basics": {
                    "DOM": EasyLibrary.ReadDOM("policyinfo/basic", false),
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        let rDn = ViewDeviceAlpha() + "Dn";
                        let rDib = ViewDeviceAlpha() + "Dib";
                        forResponsive();
                        if (!$parent.find(".paBtn").hasClass(rDn)) {
                            $("#showHideButton").prop("checked", true);
                        }
                        if (!$parent.find(".closePAlert").hasClass(rDn)) {
                            $("#showHideIcon").prop("checked", true);
                        } else {
                            $("#closeIconColor").hide();
                            $("#closeBtn").hide();
                        }
                        var posType = $parent.attr("data-posType");
                        if (posType !== "fixed") {
                            $(".fixCompPos").hide();
                        }
                        if (posType !== "popup") {
                            $("#pbgcolor").closest(".field-row").hide();
                        }
                        $("#posType").val(posType);
                        $("#posType").off("change").on("change", function () {
                            var posType = $(this).val();
                            $parent.attr("data-posType", posType);
                            if (posType === "fixed") {
                                $(".fixCompPos").show();
                                $("#pbgcolor").closest(".field-row").hide();
                            } else if (posType === "popup") {
                                $("#pbgcolor").closest(".field-row").show();
                                $(".fixCompPos").hide();
                            } else {
                                $("#pbgcolor").closest(".field-row").hide();
                                $(".fixCompPos").hide();
                            }
                        });
                        $(`#alertPos>i[title="${$parent.attr("data-pos")}"]`).addClass("selected");
                        $("#alertPos>i").off("click").on("click", function () {
                            $(this).siblings().removeClass("selected");
                            $(this).addClass("selected");
                            $parent.attr("data-pos", $(this).attr("title"));
                        });
                        $("#showHideIcon").off("click").on("click", function () {
                            let isChecked = $(this).is(":checked");
                            $parent.find(".closePAlert").toggleClass(rDn, !isChecked).toggleClass(rDib, isChecked);
                            $("#closeIconColor").toggle(isChecked);
                            $("#closeBtn").toggle(isChecked);
                        });
                        $("#showHideButton").off("click").on("click", function () {
                            let isChecked = $(this).is(":checked");
                            $parent.find(".paBtn").toggleClass(rDn, !isChecked).toggleClass(rDib, isChecked);
                        });
                        $("#width").AdvanceWidthSlider({
                            targetParent: $parent,
                            targetElem: ".policy-alert.wrapper"
                        });
                        $("#width").find(".ui-slider-handle").attr("title", "Policy Message Width");
                        $("#rTWidth").AdvanceWidthSlider({
                            targetParent: $parent,
                            targetElem: $parent.find(".editor-component.richText")
                        });
                        $("#rTWidth").find(".ui-slider-handle").attr("title", "Text Width");

                        $("#compHeight").AdvanceDimension({
                            targetParent: $parent,
                            targetElem: ".policy-alert.wrapper",
                            label: "Component Height",
                            type: "height",
                            min: 20,
                            max: 1080,
                            defaultValue: $parent.height()
                        });
                        $('#color').css('background-color', $(".closePAlert").css('color'));
                        let colorPickerOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $(".closePAlert").css({ "color": objColor.bgColor });
                            }
                        });
                        $('#color').colorPicker(colorPickerOption);

                        $('#pbgcolor').css('background-color', $parent.attr("data-pbg"));
                        let pcolorPickerOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $parent.attr("data-pbg", objColor.bgColor);
                            }
                        });
                        $('#pbgcolor').colorPicker(pcolorPickerOption);

                        $('#closeBtn').AdvanceTextSetting({
                            targetParent: $parent,
                            targetElem: ".closePAlert",
                            options: {
                                size: true,
                                width: false,
                                spacing: false,
                                transform: false,
                                family: false,
                                weight: false,
                                color: false,
                                lineheight: false
                            }
                        });
                        $('#closeBtn .ui-slider-handle').attr('title', 'Close Button Size');
                        function forResponsive() {
                            if (ViewDeviceAlpha() !== "") {
                                $("#posType").closest(".field-row").hide();
                                $("#color").closest(".field-row").hide();
                                $("#pbgcolor").closest(".field-row").hide();
                                $(".field-row.fixCompPos").hide();
                            }
                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='paMr'></div><div id='paPd'></div>",
                    "onload": function ($this) {
                        var $parent = $activeDOM;
                        $("#paMr").AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: $parent,
                            options: {
                                "margin": {
                                    "max": 40,
                                    "min": -40,
                                    "times": 5,
                                    "position": ["all", "top", "bottom", "left", "right"]
                                }
                            }
                        });
                        $("#paPd").AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: ".policy-alert.wrapper",
                            options: {
                                "padding": {
                                    "max": 40,
                                    "min": -40,
                                    "times": 5,
                                    "position": ["all", "top", "bottom", "left", "right"]
                                }
                            }
                        });
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": "<div id='paAl'></div>",
                    "onload": function ($this) {
                        var $parent = $activeDOM;
                        $("#paAl").AdvanceAlignment({
                            targetParent: $parent,
                            targetElem: $parent,
                            "options": {
                                "horizontal": ["left", "center", "right"]
                            }
                        });
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("policyinfo/text"),
                    "onload": function () {
                        var $parent = $activeDOM;
                        $("#applyTxtOn").off("change").on("change", function () {
                            txtStng($($(this).val()));
                        });
                        function txtStng($target) {
                            $("#txtSetting").AdvanceTextSetting({
                                targetParent: $parent,
                                targetElem: $target,
                                options: {
                                    size: true,
                                    lineheight: true,
                                    width: false,
                                    spacing: true,
                                    transform: true,
                                    family: true,
                                    weight: true,
                                    color: true
                                }
                            });
                        }
                    },
                    "active": function () {
                        $("#applyTxtOn").val($(".slcActiveEleSetting").eq(0).val());
                        $(".slcActiveEleSetting").removeClass("slcActiveEleSetting");
                        $("#applyTxtOn").trigger("change").addClass("slcActiveEleSetting");
                    }
                }
            }
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": "<div id='paBg'></div>",
                    "onload": function (item) {
                        var $parent = $activeDOM;
                        $("#paBg").AdvanceBackground({
                            targetParent: $parent,
                            targetElem: ".policy-alert.wrapper",
                            options: ["image", "color"]
                        });
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": "<div id='paBdr'></div>",
                    "onload": function (item) {
                        var $parent = $activeDOM;
                        $("#paBdr").AdvanceBorder({
                            targetParent: $parent,
                            targetElem: ".policy-alert.wrapper",
                            options: {
                                "max": 20,
                                "min": 0,
                                "times": 1,
                                "position": ["all", "top", "right", "bottom", "left"]
                            }
                        });
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": "<div id='paBr'></div>",
                    "onload": function (item) {
                        var $parent = $activeDOM;
                        $("#paBr").AdvanceBoxRadius({
                            targetParent: $parent,
                            targetElem: ".policy-alert.wrapper",
                            "options": {
                                "max": 200,
                                "min": 0,
                                "times": 1,
                                "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                            }
                        });
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": "<div id='paBs'></div>",
                    "onload": function () {
                        var $parent = $activeDOM;
                        $("#paBs").AdvanceBoxShadow({
                            targetParent: $parent,
                            targetElem: ".policy-alert.wrapper"
                        });
                    }
                }
            }
        },
        "inheritSettings": function () {
            this.responsiveDOMs = this.settingDOMs;
        },
        "view": {
            "view": function () {
                $(".paBtn, .closePAlert").off("click").on("click", function () {
                    var thisComp = $(this).closest(".policy-alert-comp");
                    thisComp.hide();
                    var id = thisComp.attr("data-id");
                    localStorage.setItem("IsPolicyAccept" + id, true);
                });
                $.each($(".policy-alert-comp"), function () {
                    var $this = $(this);
                    var id = $this.attr("data-id");
                    if (!localStorage["IsPolicyAccept" + id]) {
                        $this.removeClass("Dn");
                    }
                });

            }
        },
        "remove": function ($viewDOM) {
            let $policyinfoComp = $viewDOM.find(".editor-component.policy-alert-comp");
            $.each($policyinfoComp, function () {
                var $this = $(this);
                var type = $this.attr("data-posType");
                if (type === "popup") {
                    $this.css({
                        "top": "0px",
                        "z-index": "9991",
                        "position": "fixed",
                        "left": "0px",
                        "width": "100%",
                        "height": "100%",
                        "overflow": "auto",
                        "background-color": $this.attr("data-pbg")
                    });
                    $this.find(".policy-alert.wrapper").css({
                        "transform": "translate(-50%, -50%)",
                        "top": "50%",
                        "left": "50%"
                    });
                } else {
                    $this.css($this.attr("data-pos").toLowerCase(), 0)
                        .css("z-index", 9991);
                    if (type === "fixed") {
                        $this.css("position", $this.attr("data-posType"));
                    }
                }
                $this.addClass("Dn");
                $this.find(".rich-link").removeAttr("data-linktype").removeAttr("data-pageid").removeClass("rich-link");
                $this.find(".policy-alert.wrapper").css({
                    "position": "relative"
                });
            });
        }
    }
,    "rich text": {
        "componentname": "rich text",
        "category": "basic",
        "componentBlockDOM": "",
        "icon": "fa fa-file-text",
        "row": false,
        "hidden": false,
        "collection": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM('richtext/view'),
        "pageload": function () {
            $('.divRichText').LightTextEditor();
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped) {
                $appendLayer.find('.divRichText').LightTextEditor();
            }

        },
        "settingDOMs": {
            "tabs": {
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    },
                },


            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 200,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow":
                    {
                        "options": {
                        }
                    },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    },

                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "remove": function ($viewDom) {
            $('.alloptionC.rotate').trigger('click');
            $viewDom.find('.text-editor-toolsbar').remove();
        },
    }
,    "row separator": {
        "componentname": "row separator",
        "category": "pro",
        "icon": "fa fa-minus",
        "row": true,
        "hidden": false,
        "collection": false,
        "type": "element",
        "description": "This component helps to create a separator between two row type components.",
        "typeicon": "fa fa-th",
        "Screenshot": "https://easybuilder.contentder.com/ComponentScreenshot/row_separator.jpg",
        "defaultdata": EasyLibrary.ReadDOM("starter/rowseparator/data"),
        "afterdrop": function ($appendLayer) { },
        "styleDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("starter/rowseparator/basic"),
                    "onload": function ($item) {
                        var $parent = $activeDOM;
                        var $sep = $parent.find('.rowSeparator');
                        InitEvents();
                        function InitEvents() {
                            HeightInit();
                            Width();
                            Style();
                            SepColor();
                        }
                        function HeightInit() {
                            var parentClasses = $sep.attr('class');
                            var dAlpha = DeviceAlphaSpace();
                            var regex = new RegExp(dAlpha + 'H-[0-9]{1,4}', 'g');
                            var HeightClass = parentClasses.match(regex);
                            var height = 0;
                            if (HeightClass !== null) {
                                height = HeightClass[0].replace(dAlpha + 'H-', '');
                            }
                            AdvanceSageSlider($('#sepHeightSlider'), $('#sepHeightHandle'), 1, 100, height, component["row separator"].common.HeightChange, $sep, 'px');
                        }
                        function Width() {
                            var sepWidth = 100;
                            var parentClasses = $sep.attr('class');
                            var dAlpha = DeviceAlphaSpace();
                            var regex = new RegExp(dAlpha + 'sfCol_[0-9]{1,3}', 'g');
                            var sfWidth = parentClasses.match(regex);
                            if (sfWidth !== null) {
                                sepWidth = parseInt(dAlpha + sfWidth[0].split('_')[1]);
                            }

                            function RowSepWidth(space) {
                                parentClasses = $sep.attr('class');
                                dAlpha = DeviceAlphaSpace();
                                regex = new RegExp(dAlpha + 'sfCol_[0-9]{1,3}', 'g');
                                var sfColVal = parentClasses.match(regex);
                                if (sfColVal !== null) {
                                    sepWidth = $sep.removeClass(sfColVal[0]);
                                }
                                $sep.addClass(dAlpha + 'sfCol_' + space);
                            }
                            AdvanceSageSlider($('#sepWidthSlider'), $('#sepWidthHandle'), 1, 100, sepWidth, RowSepWidth, $parent, '%');
                        }

                        function Style() {
                            var style = $sep.css('border-top-style');
                            $('#rowSepLine').val(style);

                            $('#rowSepLine').on('change', function () {
                                var selStyle = $(this).val();
                                $sep.css('border-top-style', selStyle);
                            });
                        }

                        function SepColor() {
                            $('#rowSepColor').css('background-color', $sep.css('background-color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $sep.css({ 'background-color': objColor.bgColor });
                                }
                            });
                            $('#rowSepColor').colorPicker(colorPickerOption);
                        }
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Height": {
                            "selectLayer": function () {
                                return $activeDOM.find('.rowSeparator');
                            },
                            "callback": function (space, $elem) {
                                //$elem.css("border-top-width", space + 'px');
                                component["row separator"].common.HeightChange(space, $elem);
                            }
                        },
                        "Width": {
                            "selectLayer": function () {
                                return $activeDOM.find('.rowSeparator');
                            }
                        },
                        "Visibility": {},
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "common": {
            "HeightChange": function (space, $parent) {
                var dAlpha = DeviceAlphaSpace();
                var parentClasses = $parent.attr('class');
                let regex = new RegExp(dAlpha + 'H-[0-9]{1,4}', 'g');
                var HeightClass = parentClasses.match(regex);
                var height = 0;
                if (HeightClass !== null) {
                    $parent.removeClass(HeightClass[0]);
                }
                $parent.addClass(dAlpha + 'H-' + space);
            }
        }
    }
,    "row": {
        "componentname": "row",
        "category": "pro",
        "icon": " icon icon-comp-row",
        "row": true,
        "hidden": false,
        "collection": false,
        "type": "Empty Row",
        "typeicon": "fa fa-th",
        "description": "Create a row and manage columns where you can drop components of your choice.",
        "Screenshot": "https://easybuilder.contentder.com/ComponentScreenshot/row.jpg",
        "beforedrop": function ($appendedParent, $row, dropped) {
            var ColumnDOM = "";
            var col100 = DOMCreate('div', '100', 'sfCol_100 column');
            var col80 = DOMCreate('div', '80', 'sfCol_80 column');
            var col75 = DOMCreate('div', '75', 'sfCol_75 column');
            var col70 = DOMCreate('div', '70', 'sfCol_70 column');
            var col60 = DOMCreate('div', '60', 'sfCol_60 column');
            var col50 = DOMCreate('div', '50', 'sfCol_50 column');
            var col40 = DOMCreate('div', '40', 'sfCol_40 column');
            var col30 = DOMCreate('div', '30', 'sfCol_30 column');
            var col33 = DOMCreate('div', '33', 'sfCol_33 sfFixed column');
            var col25 = DOMCreate('div', '25', 'sfCol_25 column');
            var col20 = DOMCreate('div', '20', 'sfCol_20 column');
            ColumnDOM = '<ul class="selectDataWrapper selectcolumns sfCol_100">';
            ColumnDOM += DOMCreate('li', col100, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col80 + col20, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col75 + col25, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col70 + col30, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col60 + col40, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col50 + col50, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col40 + col60, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col30 + col70, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col25 + col75, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col20 + col80, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col20 + col60 + col20, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col25 + col50 + col25, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col30 + col40 + col30, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col33 + col33 + col33, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col25 + col25 + col25 + col25, 'sfCol_20 selectData');
            ColumnDOM += DOMCreate('li', col20 + col20 + col20 + col20 + col20, 'sfCol_20 selectData');
            ColumnDOM += '</ul>';

            if (typeof (dropped) !== "undefined") {
                if (dropped) {
                    var columnNote = "<p class='popupGuideMessage'>You can manage columns later from  <b>Row >> Manage Columns </b>.</p>";
                    ColumnDOM = columnNote + ColumnDOM;
                }
            }
            FullPagePopup({
                data: ColumnDOM,
                heading: "Manage columns",
                showheading: true,
                width: "60%",
            });
            ColEvents();
            function ColEvents() {
                $('.selectData').on('click', function () {
                    var $this = $(this);
                    var $editcontainer = findSelectedLayer($row);
                    var rowColLength = $editcontainer.find('>.cGrid >.editor-col').length;
                    var choosedCol = $this.find('> .column').length;
                    var width = [];
                    $this.find('> .column').each(function () {
                        width.push($(this).text());
                    });
                    var addedCol = choosedCol - rowColLength;
                    if (addedCol > 0) {
                        var col = '';
                        for (var i = 0; i < addedCol; i++) {
                            //var colspacing = 'editor-com-innerSpacing-top-35 editor-com-innerSpacing-right-35 editor-com-innerSpacing-bottom-35 editor-com-innerSpacing-left-35';
                            col += divStart('editor-col cCol ui-state-default sfFixed  ui-sortable ui-droppable sfCol_40 tsfCol_100 msfCol_100 mMt-0 mMb-0 mPt-0 mPr-0 mPb-0 mPl-0 mTxAl-n mTxAl-o mDib tDib tMt-0 tMb-0 tPt-0 tPr-0 tPb-0 tPl-0 tTxAl-n tTxAl-o Pt-0 Pr-0 Pb-0 Pl-0 TxAl-n TxAl-o') + colOption + CompenentCreateDOM + divEnd;
                        }
                        $editcontainer.find('> .cGrid').append(col);
                        //if ($editcontainer.length > 0) {
                        //    $editcontainer.find('.colWrapper').append(col);
                        //} else {
                        //    var $shadedLayer = $row.find('.editor-row-shaded-layer');
                        //    if ($shadedLayer.length > 0) {
                        //        $shadedLayer.find('.colWrapper').append(col);
                        //    } else {
                        //        $row.find('.colWrapper').append(col);
                        //    }
                        //}
                        DraggableSortable();
                        SettingEvents();
                        BindColumnEvents($row);
                        ManageWidth();
                        TriggerView($row);
                    } else if (addedCol < 0) {
                        if (typeof (dropped) !== "undefined" && dropped) {
                            if (dropped) {
                                //no need to because it the drop event and  by defaut there is one column
                                // if basic changes then
                            }
                        } else {
                            SageConfirmDialog('You are going to choose  less column. all your data will be switch to the first column ?').done(function () {
                                RemoveColumn();
                                ManageWidth();
                            });
                        }

                    } else if (addedCol == 0) {
                        ManageWidth();
                    }

                    function ManageWidth() {
                        var mWidth = 100;
                        var tWidth = 100;
                        if ($editcontainer.find('> .cGrid > .editor-col').length % 2 == 0)
                            tWidth = 50;
                        $editcontainer.find('> .cGrid > .editor-col').each(function (i, v) {
                            var $me = $(this);
                            $me.attr('data-type', 'column');
                            var $classes = $me.attr('class').match(/[a-z]{0,1}sfCol_[0-9]{1,3}/g);
                            if ($classes != null) {
                                var length = $classes.length;
                                //use no break in this condition beacause if the length =2 then it must remove 2 class
                                switch (length) {
                                    case 3:
                                        $me.removeClass($classes[2]);
                                    case 2:
                                        $me.removeClass($classes[1]);
                                    case 1:
                                        $me.removeClass($classes[0]);
                                }
                                $me.removeClass($classes[0]);
                            }
                            $me.addClass('sfCol_' + width[i]);
                            var tClass = 'tsfCol_' + tWidth;
                            var mClass = 'msfCol_' + mWidth;
                            $me.addClass(tClass + ' ' + mClass);
                        });
                        CloseFullPagePopup();
                    }
                    function RemoveColumn() {
                        var $editcontainer = $row.find(' > .editor-row-container');
                        var $removeContainer = '';
                        if ($editcontainer.length > 0) {
                            $removeContainer = $editcontainer.find('> .cGrid > .editor-col');
                        } else {
                            var $shadedLayer = $row.find('>.editor-row-shaded-layer');
                            if ($shadedLayer.length > 0) {
                                $removeContainer = $shadedLayer.find('>.cGrid > .editor-col');
                            } else {
                                $removeContainer = $row.find('>.cGrid > .editor-col');
                            }
                        }
                        for (var i = rowColLength - 1; i >= choosedCol; i--) {
                            $removeContainer.eq(i).find('>.editor-component').each(function () {
                                $removeContainer.eq(0).append($(this));
                                $removeContainer.eq(0).find(">.column-data-empty").remove();
                            });
                            $removeContainer.eq(i).remove();
                        }
                        TriggerView($row);
                    }
                });
            }
        },
        'pageload': function () {
            $('.cRow').each(function () {
                RowAddBindEvent($(this));
            });
        },
        'defaultdata': EasyLibrary.ReadDOM("row/row"),
        "DOMS": {
            "headeradd": EasyLibrary.ReadDOM("starter/headingdefaultdata") + EasyLibrary.ReadDOM("starter/textdefaultdata")
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            RowAddBindEvent($appendLayer);
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("row/basic"),
                    "onload": function ($this) {
                        LoadSettings();
                        InitEvents();
                        function InitEvents() {
                            $('#showTitle').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    var $rowTitle = RowHeadingDOM();
                                    $rowTitle.insertAfter(ShadedParent());
                                    $rowTitle.find('h1').addClass('ff-' + $('#basicFonts').val());
                                    $rowTitle.find('h1').addClass('f-weight-400');
                                    $rowTitle.find('p').addClass('ff-' + $('#basicFonts').val());
                                    $rowTitle.find('p').addClass('f-weight-400');
                                    SettingEvents();
                                } else {
                                    $activeDOM.find('.rowTitle').remove();
                                }
                            });
                            $('#autoheightAdjustRow').off('click').on('click', function () {
                                if ($(this).is(':checked')) {
                                    $('#adJustHeight').prop('checked', false);
                                    $('#adjustHeightCheck').addClass('Dn');
                                    $activeDOM.removeClass(function (i, cl) {
                                        return (cl.match(/\bH-[0-9]{1,3}\b/g) || []).join(' ');
                                    });
                                    $activeDOM.css({ 'height': '' });
                                    $activeDOM.removeClass('adjustheight').addClass('fullpagebanner');
                                    AdjustSizeFullpage($activeDOM);
                                    $('#adjustHeaderHolder').hide();
                                } else {
                                    $activeDOM.removeClass('fullpagebanner');
                                    $activeDOM.css({ 'height': '' });
                                    $('#adjustHeightCheck').removeClass('Dn');
                                }
                            });
                            $('#askContainer').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    var containerDiv = divStart('editor-row-container container-medium') + divEnd;
                                    var appendElem = '';
                                    //if ($activeDOM.find('> .editor-row-shaded-layer').length === 0) {
                                    //    appendElem = $activeDOM.children();
                                    //    $activeDOM.append(containerDiv);
                                    //} else {
                                    //    appendElem = $activeDOM.find('> .editor-row-shaded-layer').children();
                                    //    $activeDOM.find('> .editor-row-shaded-layer').append(containerDiv);
                                    //}
                                    //$activeDOM.find('.editor-row-container').append(appendElem);
                                    $activeDOM.find('.cGrid').first().wrap(containerDiv);
                                    $('#selContainerWidth').val('container-medium');
                                    $('#additionalContainer').fadeIn(400);

                                } else {
                                    //var appendElem = $activeDOM.find('.editor-row-container').children();
                                    //if ($activeDOM.find('> .editor-row-shaded-layer').length === 0) {
                                    //    $activeDOM.append(appendElem);
                                    //} else {
                                    //    $activeDOM.find('> .editor-row-shaded-layer').append(appendElem);
                                    //}
                                    //$activeDOM.find('.editor-row-container').remove();
                                    if ($activeDOM.find('.cGrid').first().parent().hasClass('editor-row-container')) {
                                        $activeDOM.find('.cGrid').first().unwrap();
                                        $('#additionalContainer').fadeOut(400);
                                    }
                                }
                                //CalculateWidth($activeDOM.find('.colWrapper'));
                                TriggerView($activeDOM);
                            });
                            $('#selContainerWidth').off().on('change', function () {
                                var containWidth = $(this).val();
                                var $container = $activeDOM.find('.editor-row-container');
                                $container.removeClass('container-small').removeClass('container-medium').removeClass('container-large').removeClass('container-extralarge');
                                $container.addClass(containWidth);
                                //CalculateWidth($activeDOM.find('.colWrapper'));
                            });
                            component["row"].common.heightInit();
                            RearrangeColumn();
                        }
                        function ShadedParent() {
                            if ($activeDOM.find('> .SetHdlr').length == 0) {
                                if ($activeDOM.find('> div > .SetHdlr').length == 0) {
                                    if ($activeDOM.find('> div > div > .SetHdlr').length == 0) { } else
                                        return $activeDOM.find('> div > div > .SetHdlr');
                                } else
                                    return $activeDOM.find('> div > .SetHdlr');
                            } else
                                return $activeDOM.find('> .SetHdlr');
                        }
                        function LoadSettings() {
                            if ($activeDOM.hasClass('fullpagebanner')) {
                                $('#autoheightAdjustRow').prop('checked', true);
                                $('#adjustHeightCheck').addClass('Dn');
                            } else {
                                $('#adjustHeightCheck').removeClass('Dn');
                            }
                            var $container = $activeDOM.find('div.rowTitle');
                            if ($container.length > 0) {
                                $('#showTitle').prop('checked', true);
                            } else {
                                $('#showTitle').prop('checked', false);
                            }
                            if ($activeDOM.hasClass('adjustheight')) {
                                $('#adJustHeight').prop('checked', true);
                                $('#adjustHeaderHolder').show();
                            } else {
                                $('#adJustHeight').prop('checked', false);
                            }
                            $container = $activeDOM.find('.cGrid').first().parent();
                            if ($container.hasClass('editor-row-container')) {
                                $('#askContainer').prop('checked', true);
                                var conClass = $container.attr('class').replace('editor-row-container', '').trim();
                                $('#selContainerWidth').val(conClass);
                                $('#additionalContainer').fadeIn(400);
                            } else {
                                $('#askContainer').prop('checked', false);
                            }
                        }
                        function RowHeadingDOM() {
                            var rowHeadingDOM = '';
                            rowHeadingDOM = DOMCreate('div', component["row"].DOMS.headeradd, 'rowTitle sfCol_100');
                            var $rowHeading = $(rowHeadingDOM);
                            $rowHeading.find('.sortComponent').remove();
                            return $rowHeading;
                        }
                        function RearrangeColumn() {
                            let cols = $activeDOM.find('.cGrid').eq(0).find('> .editor-col ');
                            if (cols.length > 1) {
                                let html = '';
                                cols.each(function (i, v) {
                                    html += `<span class="items" data-no="${i}"> Col ${i + 1}</span>`;
                                });
                                $("#RearrangeColumnWrapper").html(html);
                                $('#rearrangeColumn').show();
                                $("#RearrangeColumnWrapper").AdvanceSorting({
                                    targetParent: $activeDOM,
                                    targetElem: $activeDOM.find('.cGrid > .editor-col '),
                                    sortableOptions: {
                                        items: ".items",
                                        containment: '#RearrangeColumnWrapper',
                                        stop: function (event, ui) {
                                            let order = [];
                                            $('#RearrangeColumnWrapper span').each(function () {
                                                order.push($(this).attr('data-no'));
                                            });
                                            let $colss = $activeDOM.find('.cGrid').eq(0).find('> .editor-col');
                                            $colss.each(function (i, v) {
                                                $(this).addClass('c-' + i);
                                            });
                                            let length = $colss.length;
                                            for (var i = 0; i < length; i++) {
                                                let $col = $activeDOM.find('.cGrid > .editor-col.c-' + order[i]);
                                                $activeDOM.find('.cGrid').eq(0).append($col);
                                                $col.removeClass('c-' + order[i]);
                                                $('#RearrangeColumnWrapper span').eq(i).attr('data-no', i).text((' Col ' + (i + 1)));
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    },
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "bottom"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }

                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                        "vertical": ["top", "middle", "bottom"]
                    }
                },
                "Scroll Effect": {
                    "options": []
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "common": {
            "heightInit": function () {
                $('#adJustHeight').off().on('click', function () {
                    if ($(this).is(':checked')) {
                        $('#autoheightAdjustRow').prop('checked', false);
                        let parentClasses = $activeDOM.attr('class');
                        let dAlpha = DeviceAlphaSpace();
                        let regex = new RegExp(dAlpha + 'H-[0-9]{1,4}', 'g');
                        let rowHeightClass = parentClasses.match(regex);
                        if (rowHeightClass !== null) {
                            $activeDOM.removeClass(rowHeightClass[0]);
                        }
                        $activeDOM.css({ 'height': '' });
                        $activeDOM.removeClass(dAlpha + 'fullpagebanner').addClass(dAlpha + 'adjustheight');
                        $('#adjustHeaderHolder').fadeIn(400);
                        var rowHeight = $activeDOM.css('height').replace('px', '');
                        $activeDOM.addClass(dAlpha + 'H-' + rowHeight);
                        ChangeSliderValue($('#rowHeightSlider'), rowHeight);
                    } else {
                        let parentClasses = $activeDOM.attr('class');
                        let dAlpha = DeviceAlphaSpace();
                        let regex = new RegExp(dAlpha + 'H-[0-9]{1,4}', 'g');
                        let rowHeightClass = parentClasses.match(regex);
                        if (rowHeightClass !== null) {
                            $activeDOM.removeClass(rowHeightClass[0]);
                        }
                        $activeDOM.removeClass(dAlpha + 'adjustheight');
                        $activeDOM.css({ 'height': '' });
                        $('#adjustHeaderHolder').fadeOut(400);
                       // AdjustSizeFullpage($activeDOM);
                    }
                });
                RowHeight();
                function RowHeight() {
                    let $parent = $activeDOM;
                    function rowHeightChange(space) {
                        ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + space);
                    }
                    AdvanceSageSlider($('#rowHeightSlider'), $('#rowHeightHandle'), 30, 1080,
                        GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-'), rowHeightChange, $parent, 'px');
                }
            }
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["image", "color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 50,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow": {
                    "options": {

                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "visibility": {},
                        "ordering": {},
                        "itemsperrow": {
                            "prepend": "true",
                            "DOM": "<div id='itemsperow'></div>",
                            "onload": function ($item) {
                                $parent = $activeDOM;
                                $("#itemsperow").AdvanceItemsPerRow({
                                    targetParent: $activeDOM,
                                    targetElem: $activeDOM.find('.cGrid > .editor-col'),
                                    label: 'Items per row',
                                });
                            }
                        },
                        "resheight": {
                            "prepend": "true",
                            "DOM": EasyLibrary.ReadDOM('row/resheight'),
                            "onload": function () {
                                let d = ViewDeviceAlpha();
                                if ($activeDOM.hasClass(d + 'adjustheight')) {
                                    $('#adJustHeight').prop('checked', true);
                                    $('#adjustHeaderHolder').show();
                                } else {
                                    $('#adJustHeight').prop('checked', false);
                                    $('#adjustHeaderHolder').hide();
                                }
                                component["row"].common.heightInit();
                            }
                        }
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "bottom"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"],
                        "vertical": ["top", "middle", "bottom"]
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "remove": function ($cloneDOM) {
            $cloneDOM.find('.addPro').remove();
        },
        "removeedit": function ($editDOM) {
            $editDOM.find('.addPro.active').removeClass('active');
        },
        resize: function () {
            AdjustSizeFullpage();
        }
    }
,    "share page": {
        "componentname": "share page",
        "category": "advance",
        "icon": "fa fa-share",
        "row": false,
        "bucket": true,
        "hidden": false,
        "collection": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("sharepage/sharepagedefault"),
        "beforeDrop": function ($this) { },
        "afterdrop": function ($appendparent, $appendLayer, dropped) {
            if (dropped) {
                //this.view.library.clickShareButton();
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("sharepage/basicsetting"),
                    "onload": function ($this) {
                        var $parent = $this.closest('.SetHdlr').parent();
                        LoadSetting();
                        InitEvent();

                        function LoadSetting() {
                            let loadsetting = ["normal", "fixleft", "fixright"];
                            for (var i = 0; i < loadsetting.length; i++) {
                                let $hasposclass = $this.closest('.SetHdlr').parent().hasClass(loadsetting[i]);
                                if ($hasposclass == true) {
                                    $("#pageshareorintation").prop('selectedIndex', i);
                                    break;
                                }
                            }
                        }
                        function InitEvent() {
                            $('#pageshareorintation').on('change', function () {
                                let $orintation = $(this).val();
                                $this.closest('.SetHdlr').parent().removeClass('normal').removeClass('fixleft').removeClass('fixright');
                                switch ($orintation) {
                                    case "Normal": {
                                        $this.closest('.SetHdlr').parent().addClass("normal");
                                        break;
                                    }
                                    case "Fix-left": {
                                        $this.closest('.SetHdlr').parent().addClass("fixleft");
                                        break;
                                    }
                                    case "Fix-right": {
                                        $this.closest('.SetHdlr').parent().addClass("fixright");
                                        break;
                                    }
                                }
                            });
                            FontWrapperSize();
                            FontSize();
                            function FontWrapperSize() {
                                component["share page"].fontLib.fontwrapper();
                            }

                            function FontSize() {
                                component["share page"].fontLib.fontsize();
                            }
                        }
                    }
                },

                "Display": {
                    "DOM": EasyLibrary.ReadDOM("sharepage/hideshowsharepage"),
                    "onload": function ($this) {
                        var $parent = $this.closest('.pageshare');
                        var $sharebuttoncollection = $parent.find('.sharebuttoncollection');
                        InitEvent();
                        displaysetting();
                        function displaysetting() {
                            var isfacebookhidden = $sharebuttoncollection.find('.facebook').hasClass('Dn');
                            $('#showfacebook').prop('checked', !isfacebookhidden);

                            var istwitterhidden = $parent.find('.twitter').hasClass('Dn');
                            $('#showtwitter').prop('checked', !istwitterhidden);

                            var isgooglehidden = $parent.find('.google').hasClass('Dn');
                            $('#showgoogle').prop('checked', !isgooglehidden);

                            var ismailhidden = $parent.find('.mail').hasClass('Dn');
                            $('#showmail').prop('checked', !ismailhidden);

                            var ispinteresthidden = $parent.find('.pinterest').hasClass('Dn');
                            $('#showpinterest').prop('checked', !ispinteresthidden);

                            var islinkinhidden = $parent.find('.linkedin').hasClass('Dn');
                            $('#Showlinkedin').prop('checked', !islinkinhidden);
                        }

                        function InitEvent() {
                            var orderedSetDOM = [];
                            var $items = $parent.find('.sharepage');
                            $.each($items, function (index, value) {
                                orderedSetDOM.push($('.' + $(value).attr('data-ForSort')));
                            });
                            $('.ShareComponentsControl').html('');
                            $('.ShareComponentsControl').append(orderedSetDOM);

                            $('#showfacebook').on('change', function () {
                                var checked = $(this).prop('checked');
                                if (checked === true) {
                                    $parent.find('.facebook').addClass("Dib");
                                    $parent.find('.facebook').removeClass("Dn");
                                }
                                else {
                                    $parent.find('.facebook').removeClass("Dib");
                                    $parent.find('.facebook').addClass("Dn");
                                }
                            });

                            $('#showtwitter').on('change', function () {
                                var checked = $(this).prop('checked');
                                if (checked === true) {

                                    $parent.find('.twitter').addClass("Dib");
                                    $parent.find('.twitter').removeClass("Dn");
                                }
                                else {
                                    $parent.find('.twitter').removeClass("Dib");
                                    $parent.find('.twitter').addClass("Dn");

                                }


                            });

                            $('#showgoogle').on('click', function () {
                                var checked = $(this).prop('checked');
                                if (checked === true) {
                                    $parent.find('.google').addClass("Dib");
                                    $parent.find('.google').removeClass("Dn");
                                }
                                else {
                                    $parent.find('.google').removeClass("Dib");
                                    $parent.find('.google').addClass("Dn");
                                }
                            });
                            $('#showmail').on('click', function () {
                                var checked = $(this).prop('checked');
                                if (checked === true) {
                                    $parent.find('.mail').addClass("Dib");
                                    $parent.find('.mail').removeClass("Dn");
                                }

                                else {
                                    $parent.find('.mail').removeClass("Dib");
                                    $parent.find('.mail').addClass("Dn");
                                }
                            });
                            $('#showpinterest').on('click', function () {
                                var checked = $(this).prop('checked');

                                if (checked === true) {
                                    $parent.find('.pinterest').addClass("Dib");
                                    $parent.find('.pinterest').removeClass("Dn");
                                }
                                else {
                                    $parent.find('.pinterest').removeClass("Dib");
                                    $parent.find('.pinterest').addClass("Dn");
                                }
                            });

                            $('#Showlinkedin').on('click', function () {
                                var checked = $(this).prop('checked');

                                if (checked === true) {
                                    $parent.find('.linkedin').addClass("Dib");
                                    $parent.find('.linkedin').removeClass("Dn");
                                }
                                else {
                                    $parent.find('.linkedin').removeClass("Dib");
                                    $parent.find('.linkedin').addClass("Dn");
                                }
                            });

                            $(".ShareComponentsControl").AdvanceSorting({
                                targetParent: $parent,
                                targetElem: '.sharepage',
                                sortableOptions: {
                                    items: "div.SiteShare",
                                    handle: ".sortHandle",
                                    containment: 'div.ShareComponentsControl'
                                }
                            });
                        }
                    }
                },


                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='marginForContainer'></div><div id='marginForIcons'></div>",
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $("#marginForContainer").AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.sharebuttoncollection',
                            options: {
                                "margin": {
                                    "label": "Container Margin",
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        $("#marginForIcons").AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.fonticon',
                            options: {
                                "margin": {
                                    "label": "Icon Margin",
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["top", "left", "bottom", "right"]
                                }
                            }
                        });
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $elem.closest('.pageshare');
            }
        },

        "styleDOMs": {
            "tabs": {
                "Box Radius": {
                    "options": {
                        "max": 500,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Background": {
                    "options": ["color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"]
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $elem.closest(".pageshare");
            }
        },

        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {

                        "fontwrapper": {
                            "DOM": CreateSliderDOM('fontIconbackHeightSlider', 'fontIconbackHeightHandle', 'font-wrapper'),
                            "prepend": "true",
                            "onload": function () {
                                component["social link"].fontwrapper();
                            }
                        },
                        "Font Size": {
                            "DOM": CreateSliderDOM('fontIconHeightSlider', 'fontIconHeightHandle', 'font-size'),
                            "prepend": "true",
                            "onload": function () {
                                component["social link"].fontsize();
                            }
                        },
                        "Visibility": {},
                        "CustomVisibility": {
                            "custom": true,
                            "DOM": '<div class="componentVisibility"><div id="rtwitter"></div><div id="rfacebook"></div><div id="rgoogle"></div><div id="rmail"></div><div id="rpinterest"></div><div id="rlinkedin"></div></div>',
                            onload: function () {
                                Visibility();
                                function Visibility() {
                                    let parentClasses = $activeDOM.attr('class');
                                    let dAlpha = DeviceAlphaSpace();
                                    let regex = new RegExp(dAlpha + 'Dn', 'g');
                                    let visibilityClass = parentClasses.match(regex);
                                    if (visibilityClass !== null)
                                        $('#deviceVisibility').prop('checked', false);
                                    else
                                        $('#deviceVisibility').prop('checked', true);

                                    $('#deviceVisibility').off().on('click', function () {
                                        dAlpha = DeviceAlphaSpace();
                                        if ($(this).is(':checked')) {
                                            $activeDOM.removeClass(dAlpha + 'Dn').addClass(dAlpha + 'Dib');
                                            $('.componentVisibility').show();
                                        }
                                        else {
                                            $activeDOM.addClass(dAlpha + 'Dn').removeClass(dAlpha + 'Dib');
                                            $('.componentVisibility').hide();
                                        }
                                    });
                                }

                                $('#rtwitter').AdvanceVisibility({
                                    targetParent: $activeDOM,
                                    targetElem: '.twitter',
                                    label: 'Twitter'
                                });
                                $('#rfacebook').AdvanceVisibility({
                                    targetParent: $activeDOM,
                                    targetElem: '.facebook',
                                    label: 'Facebook'
                                });
                                $('#rgoogle').AdvanceVisibility({
                                    targetParent: $activeDOM,
                                    targetElem: '.google',
                                    label: 'Google'
                                });
                                $('#rmail').AdvanceVisibility({
                                    targetParent: $activeDOM,
                                    targetElem: '.mail',
                                    showCls: "Db",
                                    label: 'Email'
                                });
                                $('#rpinterest').AdvanceVisibility({
                                    targetParent: $activeDOM,
                                    targetElem: '.pinterest',
                                    showCls: "Db",
                                    label: 'Pinterest'
                                });
                                $('#rlinkedin').AdvanceVisibility({
                                    targetParent: $activeDOM,
                                    targetElem: '.linkedin',
                                    showCls: "Db",
                                    label: 'Linkedin'
                                });
                            }
                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='marginForContainer'></div><div id='marginForIcons'></div>",
                    "onload": function ($item) {
                        $("#marginForContainer").AdvanceSpacing({
                            targetParent: $item,
                            targetElem: '.sharebuttoncollection',
                            options: {
                                "margin": {
                                    "label": "Container Margin",
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        $("#marginForIcons").AdvanceSpacing({
                            targetParent: $item,
                            targetElem: '.fonticon',
                            options: {
                                "margin": {
                                    "label": "Icons Gotter Spacing",
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "fontLib": {
            "fontsize": function () {
                let $parent = $activeDOM;
                let $icon = $parent.find('.font-icon');
                function LineHeightChange(space) {
                    ReplaceClassByPattern($icon, 'Fs-[0-9]{1,4}', 'Fs-' + space);
                }
                AdvanceSageSlider($('#fontIconHeightSlider'), $('#fontIconHeightHandle'), 5, 1080, GetValueByClassName($icon, 'Fs-[0-9]{1,4}', 'Fs-'), LineHeightChange, $parent, 'px');
            },

            "fontwrapper": function () {
                let $parent = $activeDOM;
                let fonticon = $parent.find('.sharepage');

                function LineHeightChange(space) {
                    ReplaceClassByPattern(fonticon, 'H-[0-9]{1,4}', 'H-' + space);
                    ReplaceClassByPattern(fonticon, 'W-[0-9]{1,4}', 'W-' + space);
                }
                AdvanceSageSlider($('#fontIconbackHeightSlider'), $('#fontIconbackHeightHandle'), 5, 1080, GetValueByClassName(fonticon, 'H-[0-9]{1,4}', 'H-'), LineHeightChange, fonticon, 'px');
            }
        },


        "view": {
            "view": function () {
                this.library.clickShareButton();
            },
            "library": {
                "clickShareButton": function () {
                    $('.pageshare').find(".sharepage").on("click", function () {
                        var sharer = $(this).attr("data-sharer");
                        switch (sharer) {
                            case "facebook":
                                {
                                    window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(document.URL) + '&t=' + encodeURIComponent(document.URL), 'Facebook-Popup', 'height=350,width=600');
                                }
                                break;

                            case "twitter":
                                {
                                    window.open('https://twitter.com/intent/tweet?text=' + encodeURIComponent(document.URL), 'Twitter-Popup', 'height=350,width=600');
                                }
                                break;

                            case "google":
                                {
                                    window.open('https://plus.google.com/share?url=' + encodeURIComponent(document.URL), 'Google-Popup', 'height=350,width=600');
                                }
                                break;

                            case "mail":
                                {
                                    window.open('mailto:?subject=' + encodeURIComponent(document.title) + '&body=' + encodeURIComponent(document.URL), 'Gmail-popup', 'height=350,width=600');
                                }
                                break;

                            case "pinterest":
                                {
                                    window.open('http://pinterest.com/pin/create/button/?url=' + encodeURIComponent(document.URL) + '&description=' + encodeURIComponent(document.title), 'LinkedIn-popup', 'height=350,width=600');
                                }
                                break;

                            case "linkedin":
                                {
                                    window.open('http://www.linkedin.com/shareArticle?mini=true&url=' + encodeURIComponent(document.URL) + '&title=' + encodeURIComponent(document.title), 'LinkedIn-popup', 'height=500,width=1000');
                                }
                                break;

                            case "default":

                                {
                                    alert('Please Choose Valid Social Site');
                                }
                        }
                    });


                }
            }
        }
    }
,    "siteheader": {
        "componentname": "siteheader",
        "category": "pro",
        "icon": "fa fa-bars",
        "row": true,
        "hidden": false,
        "collection": false,
        "defaultdata": EasyLibrary.ReadDOM('siteheadertab'),
        "type": "Header",
        "typeicon": "fa fa-bars",
        "description": "Site header which consists of logo and menu",
        "Screenshot": "https://easybuilder.contentder.com/ComponentScreenshot/row.jpg",
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped) {
                if ($appendLayer.parents(".editor-site-header").length === 0) {
                    SageAlertDialog("Site Header component must be dropped in the header!", "Alert");
                    $appendLayer.remove();
                } else {
                    if ($(".siteheader.customMenu").length > 1) {
                        SageAlertDialog("You cannot drop multiple site header components in the same page!", "Alert");
                        $appendLayer.remove();
                    } else {
                        //MenuHover($('#primaryColor').css('background-color'), $('#secondaryColor').css('background-color'));
                        let $ebmenu = $appendLayer.find('.editor-com-nav .eb-menu');
                        $ebmenu.html(EasyLibrary.PageListDOM());
                        $ebmenu.find('li span').addClass('Fs-20 mFs-18 tFs-16 Pr-15 Pl-15');
                        //$ebmenu.find('li span').css({ 'padding-right': '15px', 'padding-left': '15px', 'font-size': '16px', 'color': 'rgba(1, 1, 3, 0.95)' });
                        $ebmenu.find('li span').attr('style', '');
                        $ebmenu.find('li span').css('color', 'rgba(1, 1, 3, 0.95)');
                        $ebmenu.find('li').css({ 'line-height': '58px' });
                        $ebmenu.attr('data-navlinktextcol', 'rgba(1, 1, 3, 0.95)');
                    }
                }
                MenuHover(webBuilderSettings.primaryColor, webBuilderSettings.secondaryColor);
            }
            PagelinkStop();
            MenuDropEvents();
        },
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {

        },
        "onsort": function ($ui) {
            if ($ui.parents(".editor-site-header").length === 0) {
                SageAlertDialog("Site Header component must be dropped in the header!", "Alert");
                $ui.remove();
            }
        },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("sitemenudetail"),
                    "DOMS": {
                        onecol: $(EasyLibrary.ReadDOM("onecolumnrow")),
                        onecol2: $(EasyLibrary.ReadDOM("onecolumnrow"))
                    },
                    "onload": function ($item) {
                        let _this = this;
                        var $parent = $activeDOM;
                        if ($parent.hasClass('editor-row-container')) {
                            $parent = $parent.parent();
                        }
                        InitEvents();

                        function InitEvents() {
                            component["siteheader"].common.LogoWidth();
                            ContainerWide();
                            HeaderStyle();
                            ArrangeItem();
                            ExtraSpace();
                            ExtraSpaceBelow();
                            StickyColor();
                            StickyImage();
                        }

                        function StickyImage() {
                            var logoSrc = $('.editor-site-header').find('#headerLogo').attr('data-stickyLogo');
                            if (logoSrc !== undefined && logoSrc.trim() !== "") {
                                $('#stickyLogo').attr("src", logoSrc);
                            }
                            $('#stickBGImage').on('click', function () {
                                var $this = $(this);
                                $this.SageMedia({
                                    userModuleID: webBuilderUserModuleID,
                                    onSelect: function (src, response, type, filename, extension) {
                                        src = src.replace(/\\/g, '/');
                                        //$this.attr('src', src);
                                        var $header = $('.editor-site-header').find('#headerLogo');
                                        $("#stickyLogo").attr('src', src);
                                        $header.attr('data-stickyLogo', src);
                                        //$parent.css({
                                        //    'background-image': 'url("' + src + '")'
                                        //});
                                    },
                                    mediaType: 'image'
                                });
                            });
                        }

                        function ContainerWide() {
                            var $container = $parent.find('div.editor-row-container');
                            if ($container.length > 0) {
                                $('#menuContainer').prop('checked', true);
                                $('#additionalMenuContainer').show(400);
                                var conClass = $container.attr('class').replace('editor-row-container', '').trim();
                                $('#menuContainerWidth').val(conClass);
                            } else {
                                $('#menuContainer').prop('checked', false);
                            }
                            $('#menuContainer').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    var containerDiv = divStart('editor-row-container container-medium') + divEnd;
                                    var $appendElem = '';
                                    $appendElem = $parent.find('.cGrid');
                                    $parent.append(containerDiv);
                                    $parent.find('.editor-row-container').append($appendElem);
                                    $('#menuContainerWidth').val('container-medium');
                                    $('#additionalMenuContainer').fadeIn(400);
                                } else {
                                    var appendElem = $parent.find('.editor-row-container').children();
                                    $parent.append(appendElem);
                                    $parent.find('.editor-row-container').remove();
                                    $('#additionalMenuContainer').fadeOut(400);
                                }
                            });

                            $('#menuContainerWidth').off().on('change', function () {
                                var containWidth = $(this).val();
                                var $container = $parent.find('.editor-row-container');
                                $container.removeClass('container-small').removeClass('container-medium').removeClass('container-large').removeClass('container-extralarge').removeClass('container-fluid');
                                $container.addClass(containWidth);
                            });
                        }

                        function HeaderStyle() {
                            var parentClasses = $('.site-body').attr('class').match(/hdr-[a-z]{1,20}/g);
                            var headerEffect = 'hdr-nml';
                            if (parentClasses !== null) {
                                headerEffect = parentClasses[0];
                            }
                            $('#menuHeaderStyle').find('i').removeClass('selected');
                            $('#menuHeaderStyle').find('i[data-class="' + headerEffect + '"]').addClass('selected');
                            if (headerEffect === "hdr-stky")
                                $('.StickyOptions').show();
                            else
                                $('.StickyOptions').hide();
                            $('#menuHeaderStyle > i').on('click', function () {
                                var parentClasses_ = $('.site-body').attr('class').match(/hdr-[a-z]{1,20}/g);
                                if (parentClasses_ !== null) {
                                    $('.site-body').removeClass(parentClasses_[0]);
                                }
                                var menuStyle = $(this).attr('data-class');
                                $('.site-body').addClass(menuStyle);
                                $('#menuHeaderStyle').find('i').removeClass('selected');
                                $('#menuHeaderStyle').find('i[data-class="' + menuStyle + '"]').addClass('selected');
                                webBuilderSettings.SiteHeaderEffect = menuStyle;
                                switch (menuStyle) {
                                    case 'hdr-fxd':
                                        //var containerWidth = $('.editor-componentWrapper').css('width');
                                        //$('.editor-site-header').css('width', containerWidth);
                                        $('.StickyOptions').hide();
                                        $('.edit-area').removeClass('stick');
                                        break;
                                    case 'hdr-stky':
                                        //$('.editor-site-header').css('width', '');
                                        $('.StickyOptions').show();
                                        $('.edit-area').removeClass('stick');
                                        break;
                                    case 'hdr-abs':
                                        //$('.editor-site-header').css('width', '');
                                        $('.StickyOptions').hide();
                                        $('.edit-area').removeClass('stick');
                                        break;
                                    default:
                                        $('.editor-site-header > .cRow').removeClass('stick');
                                        $('.editor-componentWrapper').css('padding-top', '');
                                        $('.StickyOptions').hide();
                                        $('.editor-site-header').css('width', '');
                                        break;
                                }
                                // HeaderTopPadding();
                            });
                        }

                        function StickyColor() {
                            var $header = $('.editor-site-header > .cRow');
                            var $headerColor = $header.attr('data-mbgcolor');
                            if (typeof $headerColor !== "undefined") {
                                $('#chooseBGColorMenumove').css('background-color', $headerColor);
                            }
                            $headerColor = $header.attr('data-mcolor');
                            if (typeof $headerColor !== "undefined") {
                                $('#chooseColorMenumove').css('background-color', $headerColor);
                            }
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    var colorPickerID = $elm.attr('id');
                                    switch (colorPickerID) {
                                        case 'chooseBGColorMenumove':
                                            $header.attr('data-mbgcolor', objColor.bgColor);
                                            break;
                                        case 'chooseColorMenumove':
                                            $header.attr('data-mcolor', objColor.bgColor);
                                            break;
                                    }
                                }
                            });
                            $('.chooseHeadMenuColor').colorPicker(colorPickerOption);
                        }

                        function ArrangeItem() {
                            var headerType = $parent.attr("data-headertype");
                            $('.menuHeaderLogoStyle').find('i').removeClass('selected');
                            $('.menuHeaderLogoStyle').find('i[data-class="' + headerType + '"]').addClass('selected');
                            $('.menuHeaderLogoStyle > i').on('click', function () {
                                // var $logo = $parent.find('#headerLogo').parent().parent();
                                // var $menu = $parent.find('div.menuHeader').parent();                                                              
                                var value = $(this).attr('data-class');
                                $('.menuHeaderLogoStyle').find('i').removeClass('selected');
                                $('.menuHeaderLogoStyle').find('i[data-class="' + value + '"]').addClass('selected');
                                switch (value) {
                                    case 'lLogo':
                                    case 'lMenu':
                                        $('#menuwidth').show();
                                        break;
                                    case 'logotop':
                                        $('#menuwidth').hide();
                                        break;
                                }
                                // if (value == "lLogo")
                                // {
                                //     $logo.insertBefore($menu);
                                //     $logo.hasClass('sfCol_100')
                                //     {
                                //         $logo.removeClass('sfCol_100');
                                //         $logo.addClass('sfCol_20');
                                //     }
                                //     $menu.hasClass('sfCol_100')
                                //     {
                                //         $menu.removeClass('sfCol_100');
                                //         $menu.addClass('sfCol_80');
                                //     }                                    

                                // } else if (value == "lMenu") {
                                //     $menu.insertBefore($logo);
                                //     $logo.hasClass('sfCol_100')
                                //     {
                                //         $logo.removeClass('sfCol_100');
                                //         $logo.addClass('sfCol_20');
                                //     }
                                //     $menu.hasClass('sfCol_100')
                                //     {
                                //         $menu.removeClass('sfCol_100');
                                //         $menu.addClass('sfCol_80');
                                //     }
                                // }
                                // else if (value == "logotop") {
                                //     $logo.insertBefore($menu);
                                //     $logo.removeClass('sfCol_20');
                                //     $logo.addClass('sfCol_100');
                                //     $menu.addClass('sfCol_100');
                                // }
                                $parent.attr("data-headertype", value);

                            });
                        }


                        //function ArrangeItem() {
                        //    var $menuPosition = $parent.find('div.editor-col').eq(0).find('.editor-component.menuHeader');
                        //    var menu = DOMCreate('span', 'Menu', 'menuSwiper', 'menuSwiper');
                        //    var logo = DOMCreate('span', 'Logo', 'logoSwiper', 'logoSwiper');

                        //    var lefticon = DOMCreate('i', '', 'fa fa-arrow-left');
                        //    var righticon = DOMCreate('i', '', 'fa fa-arrow-right');
                        //    var swiper = DOMCreate('span', lefticon + 'Swipe' + righticon, 'logoMenuSwiper', 'logoMenuSwiper')
                        //    var $swiper = '';
                        //    if ($menuPosition.length == 0) {
                        //        $swiper = logo + swiper + menu;
                        //    } else {
                        //        $swiper = menu + swiper + logo;
                        //    }
                        //    $('#menuSwiperWrapper').html($swiper);
                        //    HeaderSwiperEvents();
                        //}

                        //function HeaderSwiperEvents() {
                        //    $('#logoMenuSwiper').off().on('click', function () {
                        //        var $menuPosition = $parent.find('div.editor-col').eq(0).find('.editor-component.menuHeader');
                        //        var $menu = $parent.find('div.editor-col').find('.editor-component.menuHeader');
                        //        if ($menuPosition.length == 0) {
                        //            $parent.find('.colWrapper').prepend($menu.parent());
                        //        } else {
                        //            $parent.find('.colWrapper').append($menu.parent());
                        //        }
                        //        ArrangeItem();
                        //    });
                        //}

                        function ExtraSpace() {
                            if ($('.editor-site-header').find('.rowaboveheader').length === 1) {
                                $('#menuUpperContainer').prop('checked', true);
                            } else {
                                $('#menuUpperContainer').prop('checked', false);
                            }
                            $('#menuUpperContainer').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    var $rowAbove = _this.DOMS.onecol;
                                    $rowAbove.insertBefore($parent);
                                    SettingEvents();
                                    DeleteComponent();
                                    DraggableSortable();
                                    RowEvents();
                                    DeleteComponent();
                                    SettingEvents();
                                    $rowAbove.addClass('rowaboveheader');
                                    $rowAbove.find('.drag').remove();
                                    $rowAbove.find('.copyRow').remove();
                                    $rowAbove.find('.dltRw').remove();
                                    $rowAbove.find('.mvDn').remove();
                                    BindColumnEvents($rowAbove);
                                } else {
                                    $('.rowaboveheader').remove();
                                }
                            });
                        }

                        function ExtraSpaceBelow() {
                            if ($('.editor-site-header').find('.rowbelowheader').length === 1) {
                                $('#menuBelowContainer').prop('checked', true);
                            } else {
                                $('#menuBelowContainer').prop('checked', false);
                            }
                            $('#menuBelowContainer').off().on('click', function () {
                                if ($(this).is(':checked')) {
                                    var $rowAbove = _this.DOMS.onecol2;
                                    $rowAbove.insertAfter($parent);
                                    SettingEvents();
                                    DeleteComponent();
                                    DraggableSortable();
                                    RowEvents();
                                    DeleteComponent();
                                    SettingEvents();
                                    $rowAbove.addClass('rowbelowheader');
                                    $rowAbove.find('.drag').remove();
                                    $rowAbove.find('.copyRow').remove();
                                    $rowAbove.find('.dltRw').remove();
                                    $rowAbove.find('.mvDn').remove();
                                    BindColumnEvents($rowAbove);
                                } else {
                                    $('.rowbelowheader').remove();
                                }
                            });
                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="siteHeaderMSpacing"></div><div id="siteHeaderPSpacing"></div></div>',
                    onload: function () {
                        component["siteheader"].common.spacing();
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="siteHeaderAlign"></div></div>',
                    "onload": function ($item) {
                        component["siteheader"].common.alignment();
                    }
                }
            },
            "selectLayer": function ($elem) {
                var $parent = $activeDOM;
                return $parent;
            }
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["image", "color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"]
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 50,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow": {
                    "options": {},
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                }
            },
            "selectLayer": function ($elem) {
                var $parent = $activeDOM;
                return $parent;
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "ordering": {},
                        "logowidth": {
                            "prepend": "true",
                            "DOM": "<div id='menuwidth'></div>",
                            "onload": function ($item) {
                                component["siteheader"].common.LogoWidth();
                            }
                        },
                        "Height": {}
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="siteHeaderMSpacing"></div><div id="siteHeaderPSpacing"></div></div>',
                    onload: function () {
                        component["siteheader"].common.spacing();
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="siteHeaderAlign"></div></div>',
                    "onload": function ($item) {
                        component["siteheader"].common.alignment();
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "common": {
            "LogoWidth": function () {
                var $imageCol = $activeDOM.find('#headerLogo').parent().parent().parent();
                $("#menuwidth").AdvanceDimension({
                    type: 'sfwidth',
                    targetParent: $imageCol,
                    targetElem: $imageCol,
                    label: 'Logo Width',
                    defaultValue: 100,
                    callback: function (width) {
                        $holder = $activeDOM.find('.menuHeader').parent();
                        ReplaceClassByPattern($holder, 'sfCol_[0-9]{1,3}', 'sfCol_' + (100 - parseInt(width)));
                    }
                });
            },
            "spacing": function () {
                $("#siteHeaderMSpacing,#siteHeaderPSpacing").html('');
                $("#siteHeaderMSpacing").AdvanceSpacing({
                    targetParent: $activeDOM,
                    targetElem: $activeDOM,
                    options: {
                        "margin": {
                            "max": 40,
                            "min": -40,
                            "times": 5,
                            "position": ["all", "top", "bottom", "left", "right"]
                        }
                    }
                });
                $("#siteHeaderPSpacing").AdvanceSpacing({
                    targetParent: $activeDOM,
                    targetElem: $activeDOM,
                    options: {
                        "padding": {
                            "max": 40,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "bottom", "left", "right"]
                        }
                    }
                });
            },
            "alignment": function () {
                $('#siteHeaderAlign').html('');
                $("#siteHeaderAlign").AdvanceAlignment({
                    targetParent: $activeDOM.parent(),
                    targetElem: $activeDOM
                });
            }
        },
        "remove": function ($view) {
            $view.find(".plusBtn").remove();
        }
    }
,    "siteheadermenu": {
        "componentname": "siteheadermenu",
        "category": "basic",
        "icon": "icon-icon-row",
        "row": false,
        "hidden": true,
        "collection": false,
        "type": "hidden",
        "defaultdata": "",
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {

        },
        "loadSetting": function ($item) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("sitemenubasic"),
                    "onload": function ($item) {
                        var $parent = $activeDOM;
                        var $text = $parent.find('.pageName');
                        var $nav = $parent.find('nav');
                        InitEvents();

                        function InitEvents() {
                            $('#menuTextColor').css('background-color', $parent.find('.pagelink').not('.active-page').find('.pageName').eq(0).css('color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.pagelink').not('.active-page').find('.pageName').css('color', objColor.bgColor);
                                    $parent.find('.eb-menu').attr('data-textcolor', objColor.bgColor);
                                }
                            });
                            $('#menuTextColor').colorPicker(colorPickerOption);
                            fontSize();
                            letterSpacing();
                            TextTranformCheck();
                            MenuStyle();
                            LoadFontFamily();
                        }

                        function fontSize() {
                            var fontsize = $text.css('font-size');
                            if (typeof fontsize === 'undefined') {
                                fontsize = minFontSize;
                            }
                            fontsize = parseInt(fontsize.replace('px', ''));

                            function FontSize(space) {
                                $text.css('font-size', space + 'px');
                            }
                            AdvanceSageSlider($('#menuFontSLider'), $('#menuFontHandle'), minFontSize, maxFontsize, fontsize, FontSize, $parent, 'px');
                        }

                        function letterSpacing() {

                            var letteSpace = 0;
                            var removeClass = '';
                            if (typeof $text.attr('class') !== 'undefined') {
                                var letterSpacingNegClass = $text.attr('class').match(/LtrSpc-n-[0-9]{1,2}/g);
                                if (letterSpacingNegClass !== null) {
                                    removeClass = letterSpacingNegClass[0].trim();
                                    letteSpace = parseInt(removeClass.replace('LtrSpc-n-', ''));
                                } else {
                                    var letterSpacingPosClass = $text.attr('class').match(/LtrSpc-[0-9]{1,2}/g);
                                    if (letterSpacingPosClass !== null) {
                                        removeClass = letterSpacingPosClass[0].trim();
                                        letteSpace = parseInt(removeClass.replace('LtrSpc-', ''));
                                    }
                                }
                            }

                            function LetteSpaceChange(space) {
                                var addClass = '';
                                var removeClass = '';
                                if (typeof $text.attr('class') !== 'undefined') {
                                    var negClass = $text.attr('class').match(/LtrSpc-n-[0-9]{1,2}/g);
                                    if (negClass !== null) {
                                        removeClass = negClass[0].trim();
                                    } else {
                                        var posClass = $text.attr('class').match(/LtrSpc-[0-9]{1,2}/g);
                                        if (posClass !== null) {
                                            removeClass = posClass[0].trim();
                                        }
                                    }
                                }
                                if (space >= 0) {
                                    addClass = 'LtrSpc-' + space;
                                } else {
                                    space = Math.abs(space);
                                    addClass = 'LtrSpc-n-' + space;
                                }
                                $text.removeClass(removeClass).addClass(addClass);
                            }
                            AdvanceSageSlider($('#menuletterSpacingSlider'), $('#menuletterSpacingHandle'), -10, 10, letteSpace, LetteSpaceChange, $parent, 'px');
                        }

                        function TextTranformCheck() {
                            var trasformValue = '';
                            if ($text.hasClass('editor-text-transform-uppercase')) {
                                trasformValue = 'editor-text-transform-uppercase';
                            } else if ($text.hasClass('editor-text-transform-lowercase')) {
                                trasformValue = 'editor-text-transform-lowercase';
                            }
                            $('#menutextTransform').val(trasformValue);
                            $('#menutextTransform').on('change', function () {
                                var tranformCase = $(this).val();
                                switch (tranformCase) {
                                    case 'editor-text-transform-uppercase':
                                        $text.removeClass('editor-text-transform-lowercase').addClass('editor-text-transform-uppercase');
                                        break;
                                    case 'editor-text-transform-lowercase':
                                        $text.removeClass('editor-text-transform-uppercase').addClass('editor-text-transform-lowercase');
                                        break;
                                    case '':
                                        $text.removeClass('editor-text-transform-uppercase').removeClass('editor-text-transform-lowercase');
                                        break;
                                }
                            });
                        }

                        function MenuStyle() {
                            var navClass = 'nav-style-none';
                            var navStyleClasses = $nav.attr('class').match(/nav-style-[a-z]{1,20}/g);
                            if (navStyleClasses !== null) {
                                navClass = navStyleClasses[0];
                            }
                            $('#menuStyle').val(navClass);
                            $('#menuStyle').on('change', function () {
                                var navStyleClasses = $nav.attr('class').match(/nav-style-[a-z]{1,20}/g);
                                if (navStyleClasses !== null) {
                                    $nav.removeClass(navStyleClasses[0]);
                                }
                                var style = $(this).val().trim();
                                $nav.addClass(style);
                                MenuChangeInstant($nav.find('.eb-menu'), webBuilderSettings.primaryColor, webBuilderSettings.secondaryColor, style);
                            });
                        }

                        function LoadFontFamily() {
                            $('#fontfamilymenu').html(DOMFontAdvanceCollection());
                            var defaultFontFamily = 'montserrat';
                            var classesList = $text.eq(0).attr('class');
                            if (typeof classesList !== "undefined") {
                                var fontClasses = classesList.match(/ff-(\w+)/g);
                                if (fontClasses !== null) {
                                    defaultFontFamily = fontClasses[0].replace('ff-', '');
                                }
                            }
                            $('#fontfamilymenu').val(defaultFontFamily);
                            fontWeight(defaultFontFamily);
                            if (typeof classesList !== "undefined") {
                                var weightClasses = classesList.match(/f-weight-[0-9]{0,3}/g);
                                if (weightClasses !== null) {
                                    $('#fontWeightmenu').val(weightClasses[0].replace('f-weight-', ''));
                                }
                            }
                            $('#fontWeightmenu').on('change', function () {
                                var classList = $text.eq(0).attr('class');
                                if (typeof classesList !== "undefined") {
                                    var familyClass = classList.match(/f-weight-[0-9]{0,3}/g);
                                    if (familyClass !== null) {
                                        $text.removeClass(familyClass[0]);
                                    }
                                }
                                $text.addClass('f-weight-' + $(this).val());
                            });

                            $('#fontfamilymenu').on('change', function () {
                                var classList = $text.eq(0).attr('class');
                                if (typeof classesList !== "undefined") {
                                    var fontClass = classList.match(/ff-(\w+)/g);
                                    if (fontClass !== null) {
                                        $text.removeClass(fontClass[0]);
                                    }
                                }
                                $text.addClass('ff-' + $(this).val());
                                fontWeight($(this).val());
                                $('#fontWeightmenu').trigger('change');
                            });

                            function fontWeight(fontName) {
                                var fontDOM = DOMFontWeight(fontName);
                                if (fontDOM.length > 0) {
                                    $('#fontWeightmenu').html(fontDOM);
                                }
                            }
                        }
                    }
                },

                "Background": {
                    "options": ["image", "color"]
                },
                "Spacing": {
                    "options": {
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": ["left", "center", "right"]
                }
            },
            "selectLayer": function ($elem) {
                var $parent = $activeDOM;
                $('.editor-component').find('.activeSetting').removeClass('activeSetting');
                $('.editor-component.activeSetting').removeClass('activeSetting');
                $parent.addClass('activeSetting');
                return $parent;
            }
        }
    }
,    "skill bar": {
        "componentname": "skill bar",
        "category": "advance",
        "icon": "fa fa-bars",
        "row": false,
        "hidden": false,
        "type": "element",
        "collection": false,
        "bucket": true,
        "defaultdata": EasyLibrary.ReadDOM('skillbar/skillbarviewdom'),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {
        },
        "pageload": function () {
            component["skill bar"].view.library.initAnimation();
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            component["skill bar"].view.library.initAnimation();
        },
        "onsort": function (ui) {
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": '<div id="sperow"></div><h4 style="font-size: 12px;">Gutter Spacing</h4><div id="gutterDOM"></div><h4 style="font-size: 12px;">Text</h4><div id="txtbasictab"></div>',
                    "onload": function ($elem) {
                        let SkillContainer = $elem.closest('.skillBar');
                        let SkillItem = SkillContainer.find('.skill-ltem');
                        $("#sperow").AdvanceItemsPerRow({
                            targetParent: SkillContainer,
                            targetElem: SkillItem,
                            label: 'Skill Bars Per Row',
                            callback: function (itemperrow) {
                                callGutter(itemperrow);
                            }
                        });

                        $("#txtbasictab").AdvanceTextSetting({
                            targetParent: SkillContainer,
                            targetElem: '.barlabel'
                        });

                        let itemperrow = $('#sperow').find('select option:selected').text();
                        callGutter(itemperrow);
                        function callGutter(itemperrow) {
                                $('#gutterDOM').AdvanceGutterSpace({
                                    targetParent: SkillContainer,
                                    targetElem: SkillItem,
                                    itemsperrow: itemperrow
                                });
                                if (itemperrow < 2) {
                                    $('#gutterDOM').children('div').first().hide();
                                }
                        }
                    }
                },
                "Data": {
                    "DOM": EasyLibrary.ReadDOM('skillbar/skillbarbasicsetting'),
                    "onload": function ($item) {
                        var SkillBar = {
                            settingButton: $item,
                            SkillContainer: $item.parent().parent().parent().parent(),
                            init: function () {
                                var attr = $('#hdnSkillSettingAttr').data('attribute');
                                if (attr != '') {
                                    $('#popupModel').attrs(attr);
                                    $('#hdnSkillSettingAttr').data('attribute', '');
                                }
                                var SkillItem = SkillBar.SkillContainer.find('.skill-ltem');
                                var html = '';
                                var count = SkillItem.length;
                                SkillItem.each(function () {
                                    let $this = $(this);
                                    let $field = $this.children('.bar-label').find('p').text();
                                    let $skill = $this.find('.bar-element').attr('data-skill');
                                    let $barColor = $this.find('.bar-element').css('background-color');
                                    html += '<div class="field-row  data-row item">';
                                    html += '<div class="field-row stElWrap  col100">';
                                    html += '<span class="fcol cPointer sfCol_6"><i class="fa fa-arrows-v barSort"></i></span>';
                                    html += '<span class="fcol pkrWrp sfCol_6">';
                                    html += '<span class="color-picker-holder skillColors" style="background-color:' + $barColor + '"></span>';
                                    html += '</span>';
                                    html += '<span class="sfCol_40 Ml-5 cb_input">';
                                    html += '<input type="text"  value="' + $field + '"  class="skillInput skLabel" aria-invalid="false">';
                                    html += '</span>';
                                    html += '<span class="sfCol_35 Ml-5 cb_input">';
                                    html += '<input type="text"  maxlength="3"  data-class="skData" value="' + $skill + '" class="skillInput skData xsml-box" aria-invalid="false">';
                                    html += '</span>';
                                    html += '<span class="sfCol_4 Ml-10">';
                                    if (count > 1)
                                        html += '<i class="in-form-icon fa fa-trash delete-icon deleteBar" aria-hidden="true"></i>';
                                    html += '</span>';
                                    html += '</div>';
                                    html += '</div>';
                                });
                                $('.skillsList').html(html);
                                SkillBar.SkillDynamicEvents();
                            },
                            SkillDynamicEvents: function () {


                                $('.addSkill').off().on('click', function () {
                                    let $BarItem = SkillBar.SkillContainer.find('.skill-ltem').last();
                                    var NewDom = document.createElement("div");
                                    $(NewDom).attrs($BarItem.attrs());
                                    $(NewDom).html($BarItem.html());
                                    $BarContainer = SkillBar.SkillContainer.find('.skillBar-wrap');
                                    $BarContainer.prepend(NewDom);
                                    $(NewDom).find('.bar-element').width('0');
                                    SkillBar.animateBar($(NewDom).find('.bar-element'));
                                    $('#hdnSkillSettingAttr').data('attribute', $('#popupModel').attrs());
                                    SkillBar.settingButton.trigger('click');
                                });
                                $('.deleteBar').off().on('click', function () {
                                    let $this = $(this);
                                    let $pos = $('.skillsList .item').index($this.parents('.item'));
                                    let $text = SkillBar.SkillContainer.find('.skill-ltem').eq($pos);
                                    SkillBar.SkillContainer.find('.skill-ltem').eq($pos).remove();
                                    SkillBar.init();
                                });
                                var colorPickerOption = ColorPickerOption({
                                    renderCallback: function ($elm, toggled) {
                                        var objColor = RenderCallBackColor(this);
                                        let $pos = $('.skillsList .item').index($elm.parents('.item'));
                                        var SkItem = SkillBar.SkillContainer.find('.skill-ltem').eq($pos);
                                        $barItem = SkItem.find('.bar-element');
                                        $barItem.css('background-color', objColor.bgColor);
                                    }
                                });
                                $('.skillColors').colorPicker(colorPickerOption);
                                $('.skillInput').off().on('keyup', function () {
                                    let $this = $(this);
                                    let $Val = $this.val();
                                    let $pos = $('.skillsList .item').index($this.closest('.item'));
                                    var SkItem = SkillBar.SkillContainer.find('.skill-ltem').eq($pos);

                                    if ($this.hasClass('skLabel')) {
                                        SkItem.find('p').text($Val);
                                    }

                                    if ($this.hasClass('skData')) {
                                        if ($Val == '')
                                            $Val = 0;
                                        if ($Val >= 0 && $Val <= 100) {
                                            $('#SkillErrorMessage').hide();
                                            let $barItem = SkItem.find('.bar-element');
                                            $barItem.attr('data-skill', $Val);
                                            $barItem.width(0);
                                            SkillBar.animateBar($barItem);
                                        } else {
                                            let $value = $(this).val();
                                            let $val = $value.substring(0, 2);
                                            $(this).val($val);
                                            $('#SkillErrorMessage').show();
                                            $('#SkillErrorMessage').text('Enter Number 0-100 Only');
                                        }
                                    }
                                });
                            },
                            animateBar: function ($barItem) {
                                let $skill = $barItem.attr('data-skill');
                                $barItem.next().text($skill + " %");
                                $barItem.animate({
                                    'width': $skill + '%'
                                });
                            }
                        };
                        SkillBar.init();
                        //----------------------------------------- sortable------                    
                        var $parent = $item.closest('.editor-component');
                        $(".skillsList").AdvanceSorting({
                            targetParent: $parent,
                            targetElem: '.skill-ltem',
                            sortableOptions: {
                                items: "div.data-row",
                                handle: ".barSort",
                                containment: 'div.skillsList'
                            }
                        });
                        //------------------sortable---------------------
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },

                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    },
                    "selectLayer": function ($elem) {
                        var $parent = $elem.closest('.skillBar').find('.skillBar-wrap');
                        return $parent;
                    }
                }
            },
            "selectLayer": function ($elem) {
                var $parent = $elem.parents().parent().parent().parent().find('.skillBar-wrap');
                return $parent;
            }
        },
        "styleDOMs": {
            "tabs": {
                "Color": {
                    "DOM": EasyLibrary.ReadDOM('skillbar/skillbarbackgroundsetting'),
                    "onload": function ($item) {
                        let $parent = $item.parent().parent().parent().parent();

                        var $barpercent = $item.parent().parent().parent().parent().find('.bar-progress span');
                        $('.barPercentColor').css('background-color', $barpercent.first().css('color'));
                        var colorPickerOption = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                var objColor = RenderCallBackColor(this);
                                $barpercent.css('color', objColor.bgColor);
                            }
                        });
                        $('.barPercentColor').colorPicker(colorPickerOption);
                        function loadColorPicker($parent) {
                            $('#barlabelColorPic').css('background-color', $parent.find('.bar-label').css('background-color'));
                            var colorPickerOption1 = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.bar-label').css('background-color', objColor.bgColor);
                                }
                            });
                            $('#barlabelColorPic').colorPicker(colorPickerOption1);
                            $('#barItemColorPic').css('background-color', $parent.find('.bar-progress').css('background-color'));
                            var colorPickerOption2 = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.bar-progress').css('background-color', objColor.bgColor);
                                }
                            });
                            $('#barItemColorPic').colorPicker(colorPickerOption2);
                        }
                        loadColorPicker($parent);
                    }
                },

                "Size": {
                    "DOM": EasyLibrary.ReadDOM('skillbar/skillbarpercentsetting'),
                    "onload": function ($this) {
                        component["skill bar"].barLib.barpercentfontsize();
                        component["skill bar"].barLib.barheight();
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 50,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    },
                    "selectLayer": function ($elem) {
                        var $parent = $elem.closest('.skillBar').find('.bar-progress');
                        return $parent;
                    }
                },

                "Box Shadow": {
                    "options": {},
                    "selectLayer": function ($elem) {
                        var $parent = $elem.closest('.skillBar').find('.bar-progress');
                        return $parent;
                    }
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Font Size": {
                            "DOM": CreateSliderDOM('barPercentSlider', 'barPercentHandle', '%-Size'),
                            "prepend": "true",
                            "onload": function () {
                                component["skill bar"].barLib.barpercentfontsize();
                            }
                        },

                        "Bar Heading": {
                            "DOM": CreateSliderDOM('barHeadingSlider', 'barHeadingHandle', 'Heading-Size'),
                            "prepend": "true",
                            "onload": function () {
                                component["skill bar"].barLib.barheadingfontsize();
                            }
                        },
                        "Bar Height": {
                            "DOM": CreateSliderDOM('barHeightSlider', 'barHeightHandle', 'Bar-Height'),
                            "prepend": "true",
                            "onload": function () {
                                component["skill bar"].barLib.barheight();
                            }
                        },
                        "lineheight": {
                            "selectLayer": function () {
                                return $activeDOM.find('.editor-para');
                            }
                        },
                        "labelWidth": {
                            "DOM": `<div id="respLabelWidth"></div>`,
                            "prepend": true,
                            "onload": function () {
                                $('#respLabelWidth').AdvanceTextSetting({
                                    targetParent: $activeDOM,
                                    targetElem: $activeDOM.find('.barlabel'),
                                    options: {
                                        size: false,
                                        width: true,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: true,
                                        lineheight: false
                                    }
                                });
                            }
                        },
                        "Visibility": {}
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "left", "right"]
                        }
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div id="barAlignment"></div><div id="titleAlignment"></div>',
                    "onload": function ($item) {
                        $('#barAlignment').AdvanceAlignment({
                            targetParent: $item,
                            targetElem: '.barlabel',
                            labels: {
                                'horizontal': 'Bar Heading'
                            }
                        });
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "remove": function ($view) {
            $view.find('.bar-label p').attr('contenteditable', false);
            $view.find('.bar-element').width('0');
        },
        "removeedit": function ($editDOM) {
            $editDOM.find('.bar-element').width('0');
        },
        "revertedit": function () {
            component["skill bar"].view.library.initAnimation();
        },

        //-------------------------------------------
        "barLib": {
            "barheadingfontsize": function () {
                let $parent = $activeDOM;
                let $barheadingfontsize = $parent.find('.barlabel');
                function barheadingfontsize(space) {
                    ReplaceClassByPattern($barheadingfontsize, 'Fs-[0-9]{1,4}', 'Fs-' + space);
                }
                AdvanceSageSlider($('#barHeadingSlider'), $('#barHeadingHandle'), 5, 40, GetValueByClassName($barheadingfontsize, 'Fs-[0-9]{1,4}', 'Fs-'), barheadingfontsize, $parent, 'px');
            },

            "barpercentfontsize": function () {
                let $parent = $activeDOM;
                let $barpercentfontsize = $parent.find('.bar-progress span');
                function barpercentfontsize(space) {
                    ReplaceClassByPattern($barpercentfontsize, 'Fs-[0-9]{1,4}', 'Fs-' + space);
                }
                AdvanceSageSlider($('#barPercentSlider'), $('#barPercentHandle'), 5, 40, GetValueByClassName($barpercentfontsize, 'Fs-[0-9]{1,4}', 'Fs-'), barpercentfontsize, $parent, 'px');
            },

            "barheight": function () {
                let $parent = $activeDOM;
                let $skillbar = $parent.find('.bar-progress');
                function BarHeightChange(space) {
                    ReplaceClassByPattern($skillbar, 'H-[0-9]{1,4}', 'H-' + space);
                }
                AdvanceSageSlider($('#barHeightSlider'), $('#barHeightHandle'), 5, 40, GetValueByClassName($skillbar, 'H-[0-9]{1,4}', 'H-'), BarHeightChange, $parent, 'px');
            }
        },

        "view": {
            "view": function () {
                this.library.initAnimation();
            },
            "library": {
                "animateSkillBar": function () {
                    $('.skillBar-wrap').each(function () {
                        let $SkillWrap = $(this);
                        if ($SkillWrap.attr('data-animate') == 0 && IsInVisibleSection($SkillWrap)) {
                            $SkillWrap.attr('data-animate', 1);
                            let $barElement = $SkillWrap.find('.bar-element');
                            $barElement.each(function () {
                                let $this = $(this);
                                let $skill = $this.data('skill');
                                $this.next().text($skill + " %");
                                $this.animate({
                                    'width': $skill + '%'
                                }, 3000);
                            });
                        }
                    });
                    function IsInVisibleSection($SkillComponent) {
                        let winHeight = $(window).height() - 80;
                        let winScroll = $(window).scrollTop();
                        let $SkillComPos = $SkillComponent.offset().top - winScroll;
                        if (0 <= $SkillComPos && $SkillComPos < winHeight)
                            return true;
                        else
                            return false;
                    }
                },
                "initAnimation": function () {
                    $('.skillBar-wrap').attr('data-animate', 0);
                    let animateSkillbar = this.animateSkillBar;
                    $(window).scroll(function () {
                        animateSkillbar();
                    });
                    animateSkillbar();
                }
            }
        }
    }
,    "social link": {
        "componentname": "social link",
        "category": "advance",
        "icon": "fa fa-share-alt",
        "row": false,
        "hidden": false,
        "collection": true,
        "bucket": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("sociallinkcom"),
        "beforeDrop": function ($this) { },
        "afterdrop": function ($appendLayer) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("sociallinkbasic"),
                    "DOMS": {
                        socialicon: EasyLibrary.ReadDOM("socialfontIconList")
                    },
                    "onload": function ($item) {
                        let _this = this;
                        var $ele = '';
                        var $parent = $item.closest('.sociallink');
                        var eleClasses = '';
                        var eleIndex = -1;
                        InitEvent();
                        function InitEvent() {
                            LoadSettings();
                            Events();
                            FontIcon();
                            SearchFontIcon();
                        }

                        function LoadSettings() {
                            var html = '';
                            $(".sociallinkWrapper").html('');
                            let count = $parent.find('.socialAchor').length;
                            $parent.find(".socialAchor").each(function (index, item) {
                                var className = $(this).attr('data-class');
                                var href = $(this).attr('data-href');
                                var iconClass = $(this).find('i').attr('class');
                                html += '<div class="field-row data-row item">';
                                html += '<div class="field-row stElWrap col100">';
                                html += '<span class="fcol sfCol_8"><i class="fa fa-arrows-v Ml-5 SocialLinkSort"></i></span>';
                                html += '<span class="fcol sfCol_8">';
                                html += '<div class="socialLinkIcon" data-class="' + className + '">';
                                let $fonticon = "fa " + className + " onhovercolor font-icon";
                                html += '<i class="' + $fonticon + '"></i>';
                                html += '</div>';
                                html += '</span>';
                                html += '<span class="sfCol_70 Ml-5 cb_input">';
                                html += '<input type="text"  value="' + href + '"  class="sociallinkHrefText">';
                                html += '</span>';
                                if (count > 1) {
                                    html += '<span class="sfCol_6 Ml-10">';
                                    html += '<i class="in-form-icon fa fa-trash delete-icon deleteSocialLink" aria-hidden="true"></i>';
                                    html += '</span>';
                                }
                                html += '</div>';
                                html += '</div>';
                            });
                            $(".sociallinkWrapper").html(html);
                            FormEvent();
                            //-------------------------------sortable----------                          
                            $(".sociallinkWrapper").AdvanceSorting({
                                targetParent: $parent,
                                targetElem: '.fonticon',
                                sortableOptions: {
                                    items: "div.data-row",
                                    handle: ".SocialLinkSort",
                                    containment: 'div.sociallinkWrapper'
                                }
                            });
                        }
                        function FormEvent() {
                            $(".deleteSocialLink").off().on("click", function () {
                                var dataClass = $(this).parent().find('.socialLinkIcon').attr('data-class');
                                var index = $('.sociallinkWrapper .item').index($(this).parents('.item'));
                                $parent.find(".socialLink").children().eq(index).remove();
                                $(this).parent().parent().parent().remove();
                                LoadSettings();
                            });
                            $(".socialLinkIcon").off().on("click", function () {
                                var $iconParent = $(this).parent().parent().parent().parent();
                                eleIndex = $iconParent.find('.socialLinkIcon').index($(this));
                                eleClasses = $(this).attr('data-class');
                                var $iconListHolder = $(this).closest('.data-row');
                                if ($iconListHolder.find(".socialLinkIconList").length == 0) {
                                    var fontHtml = '';
                                    fontHtml += '<div class="socialLinkIconList col100">';
                                    fontHtml += _this.DOMS.socialicon;
                                    fontHtml += '</div>';
                                    $iconListHolder.after(fontHtml);
                                }
                                FontIcon();
                                $('#SocialLinkSearchIcon').find('li').removeClass('selected');
                                $('#SocialLinkSearchIcon').find('li i[data-class="' + eleClasses + '"]').parent().addClass('selected');
                            });

                            $(".sociallinkHrefText").off().on("keyup", function () {
                                var value = $(this).val().trim();
                                if (value == "") {
                                    value = "#";
                                }
                                var textBoxIndex = $(".sociallinkHrefText").index(this);
                                var $socilLink = $parent.find('.fonticon').eq(textBoxIndex);
                                $socilLink.find(".socialAchor").attr("data-href", value);
                            });
                        }

                        function Events() {
                            $("#btnAddMore").on("click", function () {
                                $(".hideSocialIcon").trigger("click");
                                var html = '';
                                var iconClass = 'fa fa-navicon';
                                var dataClass = 'fa-navicon';
                                let $parent = $item.closest('.sociallink');
                                let $lastItem = $parent.find('.fonticon').last();
                                let $fontIcon = $lastItem.find('.font-icon');
                                html += '<div class="field-row data-row item">';
                                html += '<div class="field-row stElWrap col100">';
                                html += '<span class="fcol sfCol_8"><i class="fa fa-arrows-v SocialLinkSort"></i></span>';
                                html += '<span class="fcol sfCol_8">';
                                html += '<div class="socialLinkIcon" data-class="' + dataClass + '">';
                                html += '<i class="' + iconClass + '" style="color: rgb(255, 255, 255);" ></i>';
                                html += '</div>';
                                html += '</span>';
                                html += '<span class="sfCol_70 Ml-5 cb_input">';
                                html += '<input type="text"  value="#"  data-href="#"  class="sociallinkHrefText">';
                                html += '</span>';
                                html += '<span class="sfCol_6 Ml-10">';
                                //if (count > 1)
                                html += '<i class="in-form-icon fa fa-trash delete-icon deleteSocialLink" aria-hidden="true"></i>';
                                html += '</span>';
                                html += '</div>';
                                html += '</div>';
                                $(this).parent().parent().find(".sociallinkWrapper").prepend(html);
                                var comHtml = '';
                                var addedsociallink = $parent.find('.fonticon').eq(0).attr('class');
                                // comHtml += '<div class="editor-component groupSetting fonticon Dib  tH-50 mH-40 tW-50 mW-40  H-60 W-60  tMt-5 tMr-5 tMb-5 tMl-5 tPt-5 tPr-5 tPb-5 tPl-5 mMt-5 mMr-5 mMb-5 mMl-5 mPt-5 mPr-5 mPb-5 mPl-5   Mt-10 Mr-10 Mb-10 Ml-10 Pt-10 Pr-10 Pb-10 Pl-10" style="height: 50px; width: 50px; color: rgb(221, 221, 221); background-color: rgba(7, 104, 217, 0.918); border-radius: 61px;" data-backgroundcolor="color" data-backgroundimage="" data-id="17" data-type="font icon">';
                                comHtml += '<div class="' + addedsociallink + '" style="height: 50px; width: 50px; color: rgb(221, 221, 221); background-color: ' + $lastItem.css('backgroundColor') + '; border-radius: 61px;" data-backgroundcolor="color" data-backgroundimage="" data-id="17" data-type="font icon">';
                                //comHtml += '<div class="' + addedsociallink + '" style="height: 50px; width: 50px; color: ' + $lastItem.css('backgroundColor'); + '; background-color: rgba(7, 104, 217, 0.918); border-radius: 61px;" data-backgroundcolor="color" data-backgroundimage="" data-id="17" data-type="font icon">';
                                comHtml += '<div class="SetHdlr no-drag">';
                                comHtml += '<span class="stng">';
                                comHtml += '<i class="cb-stng" title="Settings" data-title="Social Link"></i>';
                                comHtml += '<ul class="setDrp no_txt" style="display: none;">';
                                comHtml += '<li class="com-settings" data-type="font icon" data-title="Social Link">';
                                comHtml += '<span class="text-wrp">Settings</span>';
                                comHtml += '<i class="cb-mxr" title="Settings"></i>';
                                comHtml += '</li>';
                                comHtml += '<li class="s-style" data-type="font icon" data-title="Social Link">';
                                comHtml += ' <span class="text-wrp">Style</span>';
                                comHtml += '<i class="cb-stl" title="Styles"></i>';
                                comHtml += '</li>';
                                comHtml += '</ul>';
                                comHtml += '</span>';
                                comHtml += '</div>';
                                comHtml += '<a class="socialAchor Dfx TxAl-c tTxAl-c mTxAl-c TxAl-m tTxAl-c mTxAl-c H-f" data-class="fa-navicon"  href="javascript:void(0)" data-href="#">';
                                //let regString = '\\bFs-[0-9]{1,2}\\b';
                                //let regx = new RegExp(regString, 'gi');
                                //let fontSize = $fontIcon.attr('class').match(regx);
                                let parentClasses = $fontIcon.attr('class');
                                let dAlpha = DeviceAlphaSpace();
                                let regex = new RegExp(dAlpha + 'Fs-[0-9]{1,4}', 'g');
                                let fontSizeClass = parentClasses.match(regex);
                                let fontSize = 0;
                                if (fontSizeClass !== null) {
                                    fontSize = fontSizeClass[0].replace(dAlpha + 'Fs-', '');
                                }

                                //  comHtml += '<i class="fa fa-navicon Fs-40 tFs-30 mFs-25 onhovercolor font-icon" style="color: rgb(255, 255, 255); font-size: 35px;"></i>';
                                comHtml += '<i class= "per ' + dAlpha + 'Fs-' + fontSize + ' tFs-30 mFs-25  fa fa-navicon  onhovercolor font-icon" style="color: ' + $fontIcon.css('color') + '; font-size: 35px;"></i>';
                                comHtml += '</a>';
                                comHtml += '</div>';
                                $parent.find(".socialLink").prepend(comHtml);
                                LoadSettings();
                                FormEvent();
                                SettingEvents();
                            });
                        }
                        function FontIcon() {
                            $('.fontIconCollection').html(EasyLibrary.FontCollectionList());
                            SearchFontIcon();
                        }
                        function SearchFontIcon() {
                            $('#SocialLinkSearchIcon').on('keyup', function () {
                                var searchVal = $(this).val();
                                $('#socialfontIconCollection').find('li').each(function () {
                                    var $this = $(this);
                                    var dataClass = $this.find('i').attr('data-class');
                                    var pos = dataClass.indexOf(searchVal);
                                    if (pos < 0) {
                                        $this.addClass('Dn');
                                    } else {
                                        $this.removeClass('Dn');
                                    }
                                });
                            });
                            $(".hideSocialIcon").on("click", function () {
                                $(this).closest(".socialLinkIconList").remove();
                            });
                            $('#socialfontIconCollection').find('li').on('click', function () {
                                var chooseClass = $(this).find('i').attr('data-class');
                                var $achorIcon = $parent.find('.socialAchor').eq(eleIndex);
                                var $editIcon = $('.sociallinkWrapper .item').eq(eleIndex).find('.socialLinkIcon');
                                $editIcon.attr('data-class', chooseClass);
                                $editIcon.find("i").eq(0).attr('class', 'fa ' + chooseClass);
                                $achorIcon.attr('data-class', chooseClass);
                                //$achorIcon.find("i").attr('class', 'fa ' + chooseClass);
                               //$achorIcon.find("i").attr('class', 'fa ' + chooseClass + ' onhovercolor' + ' font-icon');
                                $i = $achorIcon.find("i");
                                $i.remove('fa');
                                let faRegex = new RegExp('fa(-[a-z]{1,20}){0,6}', 'g');
                                let faClass = $i.attr('class').match(faRegex);
                                if (faClass !== null) {
                                    $(faClass).each(function (i, v) {
                                        $i.removeClass(v);
                                    });
                                }
                                $i.addClass('fa ' + chooseClass);
                                $('#socialfontIconCollection').find('li').removeClass('selected');
                                $(this).addClass('selected');
                                eleClasses = chooseClass;
                                $(".hideSocialIcon").trigger("click");
                            });
                        }
                    }
                },
                "Size": {
                    "DOM": EasyLibrary.ReadDOM("sociallinksize"),
                    "onload": function ($this) {
                        component["social link"].fontwrapper();
                        component["social link"].fontsize();
                    }
                },
                "Color": {
                    "DOM": EasyLibrary.ReadDOM('sociallinkcolor'),
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        var $backgroundcolor = $parent.find('.socialLink');
                        function loadColorPicker($parent) {
                            $('.backgroundcolor').css('background-color', $parent.css('background-color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.css('background-color', objColor.bgColor);
                                }
                            });
                            $('.backgroundcolor').colorPicker(colorPickerOption);
                            $('.wrapperbackgroundcolor').css('background-color', $parent.find('.fonticon').css('background-color'));
                            var colorPickerOption1 = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.fonticon').css('background-color', objColor.bgColor);
                                }
                            });
                            $('.wrapperbackgroundcolor').colorPicker(colorPickerOption1);
                            $('.fontcolor').css('background-color', $parent.find('.font-icon').css('color'));
                            var colorPickerOption2 = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $parent.find('.font-icon').css('color', objColor.bgColor);
                                }
                            });
                            $('.fontcolor').colorPicker(colorPickerOption2);
                        }
                        loadColorPicker($parent);
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='marginForContainer'></div><div id='marginForIcons'></div>",
                    "onload": function ($item) {
                        let $parent = $item.closest('.SetHdlr').parent();
                        $("#marginForContainer").AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.socialLink',
                            options: {
                                "margin": {
                                    "label": "Container Margin",
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        $("#marginForIcons").AdvanceSpacing({
                            targetParent: $parent,
                            targetElem: '.groupSetting',
                            options: {
                                "margin": {
                                    "label": "Icons Gotter Spacing",
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["left", "right"]
                                }
                            }
                        });
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },

        "styleDOMs": {
            "tabs": {
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all"]
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 200,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow":
                {
                    "options": {}
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },

        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "fontwrapper": {
                            "DOM": CreateSliderDOM('fontIconbackHeightSlider', 'fontIconbackHeightHandle', 'font-wrapper'),
                            "prepend": "true",
                            "onload": function () {
                                component["social link"].fontwrapper();
                            }
                        },
                        "Font Size": {
                            "DOM": CreateSliderDOM('fontIconHeightSlider', 'fontIconHeightHandle', 'font-size'),
                            "prepend": "true",
                            "onload": function () {
                                component["social link"].fontsize();
                            }
                        },
                        "Visibility": {}
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='marginForContainer'></div><div id='marginForIcons'></div>",
                    "onload": function ($item) {
                        $("#marginForContainer").AdvanceSpacing({
                            targetParent: $item,
                            targetElem: '.socialLink',
                            options: {
                                "margin": {
                                    "label": "Container Margin",
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                        $("#marginForIcons").AdvanceSpacing({
                            targetParent: $item,
                            targetElem: '.groupSetting',
                            options: {
                                "margin": {
                                    "label": "Icons Gotter Spacing",
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["left", "right"]
                                }
                            }
                        });
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "fontsize": function () {
            let $parent = $activeDOM;
            let $icon = $parent.find('.font-icon');
            function LineHeightChange(space) {
                $icon = $parent.find('.font-icon');
                ReplaceClassByPattern($icon, 'Fs-[0-9]{1,4}', 'Fs-' + space);
            }
            AdvanceSageSlider($('#fontIconHeightSlider'), $('#fontIconHeightHandle'), 5, 1080, GetValueByClassName($icon, 'Fs-[0-9]{1,4}', 'Fs-'), LineHeightChange, $parent, 'px');
        },
        "fontwrapper": function () {
            let $parent = $activeDOM;
            let fonticon = $parent.find('.fonticon');
            function LineHeightChange(space) {
                fonticon = $parent.find('.fonticon');
                ReplaceClassByPattern(fonticon, 'H-[0-9]{1,4}', 'H-' + space);
                ReplaceClassByPattern(fonticon, 'W-[0-9]{1,4}', 'W-' + space);
            }
            AdvanceSageSlider($('#fontIconbackHeightSlider'), $('#fontIconbackHeightHandle'), 5, 1080, GetValueByClassName(fonticon, 'H-[0-9]{1,4}', 'H-'), LineHeightChange, fonticon, 'px');
        },
        "remove": function ($cloneDOM) {
            $cloneDOM.find('div[data-type="font icon"] .socialAchor').each(function () {
                $(this).attr("href", $(this).attr("data-href"));
            });
        }
    }
,    "SoundCloudPlayer": {
        "componentname": "SoundCloudPlayer",
        "category": "advance",
        "icon": "fa fa-play-circle-o",
        "row": false,
        "bucket": true,
        "type": "sound",
        "defaultdata": EasyLibrary.ReadDOM('soundcloudplayer/soundCloudView'),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
        },
        "onsort": function (ui) {
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('soundcloudplayer/SoundCloudBasic') + EasyLibrary.ReadDOM("youtubeheight"),
                    "onload": function ($item) {
                        const regex = /src="[\s\S]*"/g;
                        var SoundCloud = {

                            container: $item.parents('.component-sound-cloud'),
                            init: function () {
                                var temp = ' <iframe class="cloud-iframe" width="100%" height="150" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/53187186&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=false&amp;show_user=false&amp;show_reposts=false&amp;visual=true"></iframe>';
                                $('#txtScloudLink').val(temp);
                                $('.sCloudColorPicker').css('background-color', SoundCloud.container.attr('data-background'));
                                $('.sCloudColorPicker').attr('data-bgcolor', SoundCloud.container.attr('data-background'));
                                var currentIframe = SoundCloud.container.find('.cloud-iframe');

                                $('#refresSoundHgt').on('click', function () {
                                    ReplaceClassByPattern($('iframe'), 'H-[0-9]{1,4}', 'H-' + 200);
                                    ChangeSliderValue($('#iframeHeightSlider'), 200);
                                });
                                $('#txtScloudLink').off().on('blur', function () {
                                    var autoplay = $('#chkScAutoplay').prop('checked');
                                    var IFsrc = $('#txtScloudLink').val();
                                    IFsrc = IFsrc.match(regex);
                                    if (typeof (IFsrc) != 'undefined' && IFsrc != null) {
                                        IFsrc = IFsrc[0];
                                        IFsrc = IFsrc.match(/"[\s\S]*"/g)[0];
                                        IFsrc = IFsrc.replace(/\"/g, '');
                                        IFsrc = IFsrc.replace(/auto_play=[\s\S]*&/g, 'auto_play=' + autoplay + '&');
                                        currentIframe.attr('src', IFsrc);

                                    }
                                });
                                component['youtube video'].HeightSlider($activeDOM);
                            }
                            
                        };
                        SoundCloud.init();
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "min": "-40",
                            "max": "40",
                            "times": "5",
                            "position": ["all", "top", "left", "right", "bottom"]
                        },
                        "padding": {
                            "min": "0",
                            "max": "40",
                            "times": "5",
                            "position": ["all", "top", "left", "right", "bottom"]
                        }
                    },
                    "selectLayer": function () {
                        return $activeDOM;
                    }
                },
                "Help": {
                    "DOM": EasyLibrary.ReadDOM('soundcloudplayer/SoundCloudHelp'),
                    "onload": function ($item) {
                    }
                }
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "visibility": {},
                        "Heighty": {
                            "custom": true,
                            "DOM": EasyLibrary.ReadDOM("youtubeheight"),
                            "onload": function () {
                                component['youtube video'].HeightSlider($activeDOM);
                            }
                        }
                    }
                }
            }
        },
        "view": {
            "view": function () {
                this.library.myfunction();
            },
            "library": {
                "myfunction": function () {
                    var value = "abed";
                }
            }
        },
        "remove": function ($viewDom) {
        }
    }
,    "subscribe": {
        "componentname": "subscribe",
        "category": "advance",
        "icon": "fa fa-envelope-square",
        "dependent": ["form"],
        "inheritform": function () {
            let myComp = this;
            let formComp = component['form'];
            let mySetting = myComp.settingDOMs.tabs;
            let styles = formComp.styleDOMs.tabs;
            myComp.styleDOMs['tabs'] = $.extend(styles, myComp.extend);
            myComp['responsiveDOMs'] = formComp.responsiveDOMs;
            mySetting['Spacing'] = formComp.settingDOMs.tabs.Spacing;
            mySetting['Text'] = formComp.settingDOMs.tabs.Text;
            mySetting['Alignment'] = formComp.settingDOMs.tabs.Alignment;
            mySetting['Size'] = formComp.settingDOMs.tabs.Size;
            mySetting['Help'] = myComp.Help;
        },
        "Help": {
            "DOM": EasyLibrary.ReadDOM('newsletter/help', false),
            "onload": function ($item) { }
        },


        "pageload": function () {
            this.library.subscribePopup();
        },
        "extend": {
            "Popup": {
                "custom": true,
                "DOM": '<div class="popupBGColor"></div><div id="selpopBG"></div>',
                "onload": function ($item) {
                    let id = 'li[data-tabs="' + $('.popupBGColor').parent().attr('id') + '"]';
                    let $parent = $activeDOM;
                    if ($parent.find('.subscribeForm-wrp').hasClass('enabled') || $parent.find('.formonly').hasClass('Dn')) {
                        $('#tabs').find(id).show();
                    } else {
                        $('#tabs').find(id).hide();
                    }
                    initBGClr();

                    function initBGClr() {
                        $("#selpopBG").AdvanceBackground({
                            targetParent: $parent,
                            targetElem: $parent.find('.popup-window'),
                            options: ["color"]
                        });
                    }
                }
            }
        },
        "collection": false,
        "defaultdata": EasyLibrary.ReadDOM("newsletter/viewDOM", false),
        "afterdrop": function ($appendedlayer, $appendlayer, dropped) {
            let _this = this;
            if (dropped) {
                if ($('div[data-type="subscribe"]').length > 1) {
                    $appendlayer.remove();
                    SageAlertDialog('Subscribe Component is already Dropped');
                } else {
                    _this.library.subscribePopup();
                }
                let data = _this.view.library.getInterest();
                if (!data) {
                    $appendlayer.find('.subscribeForm-wrp').removeClass('enabled');
                }
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("newsletter/basic"),
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        let data = component['subscribe'].view.library.CheckInterest();
                        if (!data)
                            $parent.find('.subscribeForm-wrp').removeClass('enabled');
                        let $text = $parent.find('.subscribe-button.btnFmSave');
                        $('#basicStngField').find('.field-row').css('border', '0 none');
                        $('#basicStngField').find('.sortHandle').css('width', '100%');

                        $('.fmFldRequired').each(function () {
                            let data_target = $(this).attr('data-targetEle');
                            let data_class = $(this).attr('class');
                            if (typeof ($parent.find(data_target).find('input').attr('name')) !== "undefined") {
                                $(this).css('color', 'rgb(243, 11, 11');
                            }
                        });
                        let basicSetting = {
                            Init: function () {
                                basic();

                                function basic() {
                                    $activeDOM.find('.com-ele').each(function (item, val) {
                                        let $this = $(this);
                                        let dataName = $this.attr('data-name');
                                        let dataTitle = $this.attr('data-title');
                                        let datatargetEle = $(this).attr('data-targetEle');
                                        $('#basicStngField').find('.itemname').eq(item).text(dataTitle);
                                        $('#basicStngField').find('.fmFldRequired').eq(item).attr('data-targetEle', datatargetEle);
                                        $('#basicStngField').find('.toggleItem').eq(item).find('input').attr('id', 'btnShow' + dataName);
                                        $('#basicStngField').find('.toggleItem').eq(item).find('label').attr('for', 'btnShow' + dataName);
                                    });
                                    $('#btnShowemail').closest('.toggletter').remove();
                                    $('.fmFldRequired').each(function () {
                                        let data_target = $(this).attr('data-targetEle');
                                        let data_class = $(this).attr('class');
                                        if (typeof ($parent.find(data_target).find('input').attr('name')) !== "undefined") {
                                            $(this).css('color', 'rgb(243, 11, 11');
                                        } else {
                                            $(this).css('color', 'rgb(255, 0, 0)');
                                        }
                                    });
                                }
                                loadsetting();
                                changeEvent();

                                function loadsetting() {
                                    checkAttr('#btnShowfName', '.ns-fname');
                                    checkAttr('#btnShowlName', '.ns-lname');
                                    checkAttr('#btnShowgender', '.ns-gender-wrp');
                                    checknext('#enablePlacehoder', '.fmLbl');
                                    checknext('#enablePopupform', '.formonly');

                                    function checknext(ID, DClass) {
                                        if ($parent.find(DClass).hasClass('Dn')) {
                                            $(ID).prop('checked', true);
                                        } else {
                                            $('#enablePopupform').prop('checked', false);
                                        }
                                    }

                                    function checkAttr(ID, DOMClass) {
                                        if ($parent.find(DOMClass).hasClass('Dn')) {
                                            $(ID).prop('checked', false);
                                            $(ID).closest('.field-row').find('.fmFldRequired ').addClass('Dn');
                                        } else {
                                            $(ID).prop('checked', true);
                                            $(ID).closest('.field-row').find('.fmFldRequired ').removeClass('Dn');
                                        }
                                    }
                                    if ($parent.find('.subscribeForm-wrp').hasClass('enabled') && data) {
                                        $('#enablePopup').prop('checked', true);
                                        $('.interestlist').show();
                                    } else {
                                        $('#enablePopup').prop('checked', false);
                                        $('.interestlist').hide();
                                    }
                                    checkAsterik();

                                    function checkAsterik() {
                                        $('#basicStngField').find('.fmFldRequired ').each(function () {
                                            let $this = $(this);
                                            let target = $this.attr('data-targetele');
                                            if ($parent.find(target).find('input').attr('name') === "value")
                                                $this.css('color', 'rgb(175, 172, 172)');
                                            else
                                                $this.css('color', 'rgb(243, 11, 11)');
                                        });
                                    }
                                }

                                function changeEvent() {
                                    changeAttr('#btnShowfName', '.ns-fname', 'activefName');
                                    changeAttr('#btnShowlName', '.ns-lname', 'activelName');
                                    changeAttr('#btnShowgender', '.ns-gender-wrp', 'activeGender');

                                    function changeAttr(ID, DOMClass, activeClass) {
                                        $(ID).off().on('click', function () {
                                            let $this = $(this);
                                            if ($(this).is(':checked')) {
                                                $parent.find(DOMClass).removeClass('Dn').addClass(activeClass + " Dfx");
                                                $this.closest('.field-row').find('.fmFldRequired ').removeClass('Dn');
                                            } else {
                                                $parent.find(DOMClass).addClass('Dn').removeClass(activeClass + " Dfx");
                                                $this.closest('.field-row').find('.fmFldRequired ').addClass('Dn');
                                            }
                                        });
                                    }
                                    placeHolder();

                                    function placeHolder() {
                                        $('#enablePlacehoder').off().on('click', function () {
                                            if ($(this).is(':checked')) {
                                                $activeDOM.find('.fmLbl').addClass('Dn');
                                                $activeDOM.find('.fmLbl label').each(function () {
                                                    let text = $(this).text();
                                                    $(this).closest('.fmFld').find('input').attr('placeholder', text);
                                                });
                                            } else {
                                                $activeDOM.find('.fmLbl').removeClass('Dn');
                                                $parent.find('input').attr('placeholder', '');
                                            }
                                        });
                                    }
                                    if (typeof ($parent.find('.ns-gender-wrp').find('input')) !== "undefined") {
                                        $('#asterik-gender').css('position', 'right');
                                    }
                                    required();

                                    function required() {
                                        $('.fmFldRequired').off().on('click', function () {
                                            let $this = $(this);
                                            let target = $parent.find($this.attr('data-targetEle'));
                                            if ($(this).attr('data-targetEle') === ".ns-gender-wrp") {
                                                let attr = target.find('.fmInp').attr('name');
                                                let name = 'value';
                                                if (attr !== "value") {
                                                    target.find('.fmInp').attr('name', name);
                                                } else {
                                                    target.find('.fmInp').attr('name', target.find('.fmInp').attr('data-title'));
                                                }
                                            }
                                            target.find('input').each(function () {
                                                let attr = $(this).attr('name');
                                                let name = "value";
                                                if (attr !== "value") {
                                                    $(this).attr('name', name);
                                                    $this.css('color', 'rgb(175, 172, 172)');

                                                } else {
                                                    $(this).attr('name', $(this).attr('data-name'));
                                                    $this.css('color', 'rgb(255, 0, 0)');
                                                }
                                            });
                                        });
                                    }
                                    $('#enablePopupform').off('click').on('click', function () {
                                        if ($(this).is(':checked')) {
                                            $parent.find('.formonly').removeClass("Dfx").addClass('Dn');
                                        } else {
                                            $parent.find('.formonly').removeClass('Dn').addClass("Dfx");
                                        }
                                    });
                                    $('#enablePopup').off().on('click', function () {
                                        let $this = $(this);
                                        if ($this.is(':checked')) {
                                            if (!data) {
                                                $("#message").html('');
                                                $this.prop('checked', false);
                                                $parent.find('.subscribeForm-wrp').removeClass('enabled').removeClass('Dn');
                                                $this.closest('.field-row').after('<div id="message" class="field-row stElWrap col100" style="color: #f00;opacity: 1;margin: 0;padding: 0;border: 0 none;min-height: 0;"><label class="fCol">*** Interest Unavailable ***</label><div></div></div>');
                                                $("#message").fadeIn('slow').animate({
                                                    opacity: 1.0
                                                }, 1500).effect("pulsate", {
                                                    times: 1
                                                }, 800).fadeOut('slow');
                                            } else {
                                                $parent.find('.subscribeForm-wrp').addClass('enabled');
                                                loadsetting();
                                            }
                                        } else {
                                            $parent.find('.subscribeForm-wrp').removeClass('enabled');
                                        }
                                    });
                                }
                                SortItem();

                                function SortItem() {
                                    $("#basicStngField").AdvanceSorting({
                                        targetParent: $parent.find('.formWrap'),
                                        targetElem: '.com-ele',
                                        sortableOptions: {
                                            items: ".settingitem",
                                            handle: ".sortHandle",
                                            containment: '#basicStngField'
                                        }
                                    });
                                }
                                ButtonText();

                                function ButtonText() {
                                    var text = $text.text();
                                    $('#subscribeText').val(text);
                                    $('#subscribeText').off().on("change keyup paste click", function () {
                                        let $this = $(this);
                                        text = $this.val();
                                        $text.text(text);
                                        $this.val(text);
                                    });
                                    $('#subscribeText').on('blur', function () {
                                        if (text.trim() === "") {
                                            text = 'Enter Text';
                                            $text.text(text);
                                            $(this).val(text);
                                        }
                                    });
                                }
                            }
                        };
                        basicSetting.Init();
                    }
                },

            }
        },
        "styleDOMs": {},
        "view": {
            "view": function () {
                component['subscribe'].library.subscribePopup();

            },
            "library": {
                "viewEvents": function () { },
                "clearForm": function () {
                    $('input[type=text]').val('');
                    $('input[type=email]').val('');
                    $('#fName-error').remove();
                    $('#lName-error').remove();
                    $('#email-error').remove();
                    $("input[name='gender']:checked").prop('checked', false);
                },
                "getInterest": function () {
                    let responseData;
                    let config = {
                        url: SageFrameHostURL + "/NewsLetter/GetUserInterest",
                        data: { SiteID: parseInt(GetSiteID) },
                        success: function (data) {
                            responseData = data;
                        }
                    }
                    SecureAjaxCall.Call(config);
                    return responseData;
                },
                "CheckInterest": function () {
                    let responseData = false;
                    let config = {
                        url: SageFrameHostURL + "/NewsLetter/GetUserInterest",
                        data: { SiteID: parseInt(GetSiteID) },
                        success: function (data) {
                            if (data.length > 0) {
                                responseData = true;
                            } else {
                                responseData = false;
                            }
                        }
                    }
                    SecureAjaxCall.Call(config);
                    return responseData;
                },
                "addSubscriber": function (email, firstName, lastName, gender, interest, isAll) {
                    let _this = this;
                    if (typeof gender === "undefined" || gender === '') {
                        gender = 2;
                    }
                    let config = {
                        url: SageFrameHostURL + "/NewsLetter/AddSubscribeUser",
                        data: {
                            Email: email,
                            FName: firstName,
                            Lname: lastName,
                            Location: "",
                            Gender: gender,
                            InterestInAll: isAll,
                            Interest: interest
                        },
                        success: function (data) {
                            $('#nsSuccess').remove();
                            if (data.d === 1) {
                                $('.subscribe-button').after('<div class="Mt-10 Mb-10" id="nsSuccess" style="color: rgb(51, 204, 51);">Subscribed Sucessfully</div>');
                                $("#nsSuccess").fadeIn('slow').animate({
                                    opacity: 1.0
                                }, 1500).effect("pulsate", {
                                    times: 1
                                }, 800).fadeOut('slow');
                            } else {
                                $('.subscribe-button').after('<div class="Mt-10 Mb-10" id="nsSuccess" style="color: rgb(51, 204, 51);">Subscription Updated Sucessfully</div>');
                                $("#nsSuccess").fadeIn('slow').animate({
                                    opacity: 1.0
                                }, 1500).effect("pulsate", {
                                    times: 1
                                }, 800).fadeOut('slow');
                            }
                            _this.clearForm();
                        }
                    }
                    SecureAjaxCall.Call(config);
                }
            }
        },
        "library": {
            "popupDOM": EasyLibrary.ReadDOM("newsletter/popupView"),
            "interest": function ($parent) {
                let self = component["subscribe"];
                let data = self.view.library.getInterest();
                let windowColor = $parent.find('.popup-window').css('background-color');
                let buttonColor = $parent.find('.btn-popup').css('background-color');
                let buttonText = $parent.find('.subscribe-button').css('color');
                let len;
                let header = "Choose your interest";
                if (typeof data !== "undefined") {
                    len = data.length;
                } else {
                    $('.interestlist').addClass('Dn');
                }
                if ($parent.find('.formonly').hasClass('Dn')) {
                    header = 'Subscribe us';
                }
                let htmlDOM = '';
                let option = {
                    heading: header,
                    data: self.library.popupDOM,
                    showheading: true,
                    width: "50%",
                    advance: false,
                    onappend: function ($wrap) {
                        let submitButton = $parent.find('.btn-submit').get(0).outerHTML;
                        $wrap.find('.btn_subscribe').replaceWith(submitButton);
                        $wrap.find('.btn-submit').removeClass('Dn')
                            .find('button').text('Submit');
                        $('.fullpagepopupWrapper .fullpage-popup-header').css({
                            'background-color': windowColor,
                            'color': buttonText
                        });
                        if ($parent.find('.formonly').hasClass('Dn')) {
                            let formDOM = $parent.find('.formonly').html();
                            $wrap.find('.nsletter-popup').prepend(formDOM);
                        }

                        let IconClassReg = /fa-\w+(\-*\w*)*/g;
                        let $proFltWrp = $('.editor-component.subscribe');
                        let inactiveClr = webBuilderSettings.secondaryColor;//$proFltWrp.attr('data-inactclr');
                        let unchkdIconClass = $proFltWrp.attr('data-unchkdIconClass');

                        let html = '';
                        html += `<div class="selectAll sfCol_33 Dib Mb-15">
                             
                            <input class="checkAll Dn" type="checkbox" id="lg0">
                            <i class="fa chk-icn-all Mr-5 mFs-19 Fs-20 Lh-20 tFs-20 tLh-30 tMr-5 mMr-5 ${unchkdIconClass}" style="color: ${inactiveClr}"></i>
                               <label class ="chkLabelAll  ff-poppins txC tFs-14 tLh-15 mFs-12 mLh-15 cPointer f-weight-200 Lh-21 Fs-16"" style="color:#000" for="lg0">All</label>
                                </div>`;
                        if (len > 0) {

                            let appName = '';

                            for (let i = 0; i < len; i++) {

                                let interest = data[i];
                                let keywords = interest.KeyWordList;

                                if (interest.AppName !== appName) {

                                    if (appName !== '')
                                        htmlDOM += '</div>';
                                    htmlDOM += `<div class="app Mb-15" style="border:1px solid rgb(208, 208, 208)"> 
                                           <div class="sfCol_100 Pt-10 Pr-15 Pb-10 Pl-15 tPt-10 tPr-15 tPb-10 tPl-15 mPt-10 mPr-15 mPb-10 mPl-15" style="background-color: #e1e1e1;">
                                           <i class="fa fa-angle-right Fs-16 Lh-24 tFs-16 tLh-24 mFs-16 mLh-24" style="color: rgb(153, 153, 153); cursor: pointer;"></i>
                                           <span class="ff-poppins txC Lh-24 f-weight-400 Fs-14 Ml-5 tMl-5 mMl-5" style="color:#111;cursor: pointer;"> ${interest.AppName}</span>
                                           </div>`;
                                    appName = interest.AppName;
                                }
                                htmlDOM += `<div class="category" style="display:none">
                                               <div class="sfCol_100 Pt-10 Pr-15 Pb-10 Pl-30 tPt-10 tPr-15 tPb-10 tPl-30 mPt-10 mPr-15 mPb-10 mPl-30" style="background-color:rgb(244, 246, 246);border-top:1px solid rgb(208, 208, 208);">
                                               <i class="fa fa-angle-right Fs-16 Lh-24 tFs-16 tLh-24  mFs-16 mLh-24" style="color: rgb(153, 153, 153); cursor: pointer;"></i>
                                               <span class="ff-poppins txC Lh-24 f-weight-400 Fs-14 Ml-5 tMl-5 mMl-5" style="color:#111;cursor: pointer;"> ${interest.CategoryName} </span></div>`;

                                htmlDOM += '<div class="sfCol_100 category-content Pt-15 Pr-15 Pb-15 Pl-50 tPt-15 tPr-15 tPb-15 tPl-50 mPt-15 mPr-15 mPb-15 mPl-50" style="display:none;background-color:rgb(244, 246, 246);border-top:1px solid rgb(208, 208, 208);">';
                                for (k = 0; k < keywords.length; k++) {
                                    //debugger;
                                    htmlDOM += `<div class="sfCol_33 item Dib Mb-10 tMb-10 mMb-5">
                                            <input class ="checkInterest Dn" type="checkbox" data-value="${appName + '$' + interest.CategoryName + '$' + keywords[k]}" id="lg${appName + '$' + interest.CategoryName + '$' + keywords[k]}">
                                            <i class="fa chk-icn Mr-5 Fs-18 tFs-18 mFs-18 Lh-20 tFs-20 tLh-30 tMr-5 mMr-5 ${unchkdIconClass}" style="color: ${inactiveClr}"></i>

                                            <label class ="chkLabel ff-poppins txC tFs-14 tLh-20 mFs-14 mLh-20 cPointer f-weight-400 Lh-20 Fs-14" style="color:#000" for="lg${appName + '$' + interest.CategoryName + '$' + keywords[k]}">
                                            ${keywords[k]}
                                            </label>
                                            </div>`;
                                }

                                htmlDOM += `</div>`;
                                htmlDOM += `</div>`;
                            }
                            htmlDOM += '</div>';

                            if ($parent.find('.formMainWrap').hasClass('enabled')) {
                                $wrap.find('.btn-submit').before('<div class="interestlist Mt-25 Db"><div class="itemList">' + html + htmlDOM + '</div></div>');
                            }
                        }

                        if (SageFrameUserName !== 'anonymoususer') {
                            $wrap.find('.ns-email-wrp').find('.value').val(SageFrameUserName);
                            //$('.ns-email-wrp').find('.value').prop('text', SageFrameUserName);
                        }

                        $('.chkLabelAll,.chk-icn-all').off('click').on('click', function () {
                            //if ($(this).hasClass('chkLabel')) { e.preventDefault(); }
                            let $this = $(this).parent().find('.chk-icn-all');
                            let $checkInp = $(this).parent().find('.checkAll');
                            if (!$this.hasClass('checked')) {
                                self.library.ChangeIcon($this, true);
                                $checkInp.attr('checked', true);
                            } else {
                                self.library.ChangeIcon($this, false);
                                $checkInp.attr('checked', false);
                            }

                            if ($checkInp.is(':checked')) {
                                $('input.checkInterest').prop('checked', true);
                                //$('input[class=checkAll]').prop('checked', true);
                                $wrap.find('.interest-error').remove();
                                $wrap.find('.app').addClass('Dn');
                            } else {
                                $('input.checkInterest').prop('checked', false);
                                //$('input[class=checkInterest]').prop('checked', false);
                                //$('input[class=checkAll]').prop('checked', false);
                                $wrap.find('.app').removeClass('Dn');
                            }
                        });
                        $('.checkInterest').off('click').on('click', function (e) {
                            e.stopPropagation();
                            if ($('input.checkInterest:checked').length >= 1) {
                                $wrap.find('.interest-error').remove();
                                if ($('input.checkInterest:unchecked').length === 0) {
                                    $('input.checkAll').prop('checked', true);
                                }
                            } else {
                                $('input.checkAll').prop('checked', false);
                            }
                        });

                        $('.chkLabel,.chk-icn').off('click').on('click', function (e) {
                            if ($(this).hasClass('chkLabel')) { e.preventDefault(); }

                            e.stopPropagation();

                            let $checkInp = $(this).parent().find('.checkInterest');
                            let $this = $(this).parent().find('.chk-icn');
                            if (!$this.hasClass('checked')) {
                                self.library.ChangeIcon($this, true);
                                $checkInp.prop('checked', true);
                            } else {
                                self.library.ChangeIcon($this, false);
                                $checkInp.prop('checked', false);
                            }
                            // if (ViewDeviceAlpha() == '') { library.filterProduct(); }
                        });

                        $('.category').off('click').on('click', function (event) {

                            let $this = $(this);

                            //debugger;
                            event.stopPropagation();
                            if ($this.hasClass('active')) {
                                $this.removeClass('active');
                                $this.find('.category-content').slideUp(400);
                            }
                            else {
                                let siblings = $(this).siblings();
                                $(this).find('.category-content').slideDown(400);
                                siblings.find('.category-content').slideUp(400);
                                if (siblings.hasClass('active')) siblings.removeClass('active');
                                $this.addClass('active');
                            }


                            //event.stopPropagation();


                        });

                        $('.app').off('click').on('click', function () {

                            let $this = $(this);
                            if ($this.hasClass('active')) {
                                if ($this.find('.category').hasClass('active')) $this.find('.category').removeClass('active');
                                $this.find('.category').slideUp(400);
                                $this.find('.category-content').slideUp(400);
                                $this.removeClass('active');
                            }
                            else {
                                $(this).find('.category').slideDown(100);
                                $(this).find('.category').first().trigger('click');

                                let siblings = $(this).siblings();
                                if (siblings.hasClass('active')) siblings.removeClass('active');
                                siblings.find('.category').slideUp(400).prev();

                                if (siblings.find('.category').hasClass('active')) siblings.find('.category').removeClass('active');

                                siblings.find('.category-content').slideUp(400).prev();
                                $this.addClass('active');
                            }


                        });

                        $wrap.find('.category-content').off('click').on('click', function (e) {
                            e.stopPropagation();
                        });

                        $wrap.find('.app').first().trigger('click');


                        onSubmit();

                        function onSubmit() {
                            $wrap.find('.btnSubmitnsletter').off('click').on('click', function () {
                                let $validator = $('#subscribeform').validate({
                                    ignore: ":hidden",
                                    rules: {
                                        fName: {
                                            required: true
                                        },
                                        lName: {
                                            required: true
                                        },
                                        email: {
                                            required: true,
                                            email: true
                                        },
                                        gender: {
                                            required: true
                                        }
                                    },
                                    messages: {
                                        fName: {
                                            required: "First name is Required!!!"
                                        },
                                        lName: {
                                            required: "Last name is Required"
                                        },
                                        email: {
                                            required: "Email is Required!!!",
                                            email: "Please Enter valid email"
                                        },
                                        gender: {
                                            required: "Gender is Required!!!"
                                        }
                                    },
                                    errorPlacement: function (error, element) {
                                        if (element.is(":radio")) {
                                            error.appendTo(element.parents('.ns-gender-wrp'));
                                        } else {
                                            /* This is the default behavior */
                                            error.insertAfter(element);
                                        }
                                    }
                                });
                                let email = '';
                                let firstName = '';
                                let lastName = '';
                                let gender = '';
                                email = self.library.data($parent, $wrap, '.ns-email-wrp', '.activeEmail .inpWrp .value');
                                firstName = self.library.data($parent, $wrap, '.ns-fname', '.activefName .inpWrp .value ');
                                lastName = self.library.data($parent, $wrap, '.ns-lname', '.activelName  .inpWrp .value');
                                gender = self.library.data($parent, $wrap, '.ns-gender-wrp', 'input[data-name=gender]:checked');
                                let interestList = $('input.checkInterest:checked').map(function () {
                                    return $(this).attr('data-value');
                                }).get().join(',');
                                let interestAll = isInterestAll();

                                function isInterestAll() {
                                    if ($('input[class=checkAll]').prop("checked")) {
                                        return true;
                                    } else {
                                        return false;
                                    }
                                }
                                if (interestAll === 'true') {
                                    interestList = '';
                                }
                                if ($parent.find('.formonly').hasClass('Dn')) {
                                    if ($validator.form()) {
                                        add();
                                    }
                                } else {
                                    add();
                                }

                                function add() {
                                    if ($parent.find('.subscribeForm-wrp').hasClass('enabled')) {
                                        if ($('input.checkInterest:checked').length >= 1) {
                                            self.view.library.addSubscriber(email, firstName, lastName, gender, interestList, interestAll);
                                            CloseFullPagePopup();
                                        } else {
                                            $wrap.find('.interest-error').remove();
                                            $wrap.find('.interestlist').before('<label class="interest-error" style="color: rgb(243, 6, 6);"> Please Select Interest from Interest List</label>');
                                        }
                                    } else {
                                        self.view.library.addSubscriber(email, firstName, lastName, gender, '', true);
                                        CloseFullPagePopup();
                                    }
                                }
                            });
                        }
                        $wrap.find('#nsSuccess').remove();
                        /*call Mouse hover effect on full popup*/
                        ViewMouseOverEffect();
                    },
                    onclose: function ($wrap) { }
                };



                FullPagePopup(option);
            },
            "subscribePopup": function () {
                let self = component["subscribe"];
                if (EditorMode)
                    self.inheritform();
                self.view.library.clearForm();
                //debugger;
                $('.ns-email-wrp').find('.value').val(SageFrameUserName);
                let $validator = $('.subscribe').validate({
                    ignore: ":hidden",
                    rules: {
                        fName: {
                            required: true,
                        },
                        lName: {
                            required: true
                        },
                        email: {
                            required: true,
                            email: true
                        },
                        gender: {
                            required: true,
                        }
                    },
                    messages: {
                        fName: {
                            required: "First name is Required!!!"
                        },
                        lName: {
                            required: "Last name is Required"
                        },
                        email: {
                            required: "Email is Required!!!",
                            email: "Please Enter valid email"
                        },
                        gender: {
                            required: "Gender is Required!!!"
                        }
                    },
                });
                $validator = $('.subscribe').validate({
                    errorPlacement: function (error, element) {
                        if (element.is(":radio")) {
                            error.appendTo(element.parents('.ns-gender-wrp'));
                        } else {
                            /* This is the default behavior */
                            error.insertAfter(element);
                        }
                    }
                });
                if (EditorMode) {
                    $('.btn_subscribe').off().on('click', function () {
                        let $this = $(this).closest('.subscribe');
                        let _this = $this.find('.subscribeForm-wrp ');
                        if (_this.hasClass('enabled') || _this.find('.formonly').hasClass('Dn')) {
                            if (_this.find('.formonly').hasClass('Dn')) {
                                $validator.resetForm();
                                self.library.interest($this);
                            } else {
                                if ($validator.form()) {
                                    self.library.interest($this);
                                }
                            }
                        } else {
                            let email = self.library.data($this, $this, '.ns-email-wrp', '.activeEmail .inpWrp .value');
                            let firstName = self.library.data($this, $this, '.ns-fname', '.activefName .inpWrp .value ');
                            let lastName = self.library.data($this, $this, '.ns-lname', '.activelName .inpWrp .value');
                            let gender = '';
                            if (!$this.find('.formonly').hasClass('Dn') && !$this.find('.ns-gender-wrp').hasClass('Dn')) {
                                gender = $this.find("input[data-name='gender']:checked").val();
                            }
                            if ($validator.form()) {
                                self.view.library.addSubscriber(email, firstName, lastName, gender, '', true);
                            }
                        }
                    });
                }

                //if (SageFrameUserName !== 'anonymoususer') {
                // $('.ns-email-wrp').find('.value').val(SageFrameUserName);
                //}
            },
            "data": function ($parent, $wrap, checkClass, inputClass) {
                let value = '';
                if (!$parent.find('.formonly').hasClass('Dn') && !$parent.find(checkClass).hasClass('Dn')) {
                    value = $parent.find(inputClass).val();
                } else if ($parent.find('.formonly').hasClass('Dn') && !$parent.find(checkClass).hasClass('Dn')) {
                    value = $wrap.find(inputClass).val();
                } else {
                    value = '';
                }
                return value;
            },
            "ChangeIcon": function (target, checked) {
                let IconClassReg = /fa-\w+(\-*\w*)*/g;
                let $proFltWrp = $('.editor-component.subscribe');
                let activeClr = webBuilderSettings.secondaryColor;//$proFltWrp.attr('data-actclr');
                let inactiveClr = webBuilderSettings.secondaryColor;//$proFltWrp.attr('data-inactclr');
                let unchkdIconClass = $proFltWrp.attr('data-unchkdIconClass');
                let chkdIconClass = $proFltWrp.attr('data-chkdIconClass');
                if (checked) {
                    let $Icon = target.attr('class').match(IconClassReg);
                    if ($Icon != null) {
                        target.css('color', activeClr);
                        target.removeClass($Icon[0]).addClass(chkdIconClass)
                            .addClass('checked');
                    }
                } else {
                    let $Icon = target.attr('class').match(IconClassReg);
                    if ($Icon != null) {
                        target.css('color', inactiveClr);
                        target.removeClass($Icon[0]).addClass(unchkdIconClass)
                            .removeClass('checked');
                    }
                }
            }
        },
        "remove": function ($item) {
            $('[data-type="subscribe"]').find('#message').remove();
            $('label.sfError').remove();
        },
    }
,    "forgot password": {
        "componentname": "forgot password",
        "category": "basic",
        "icon": "fa fa-lock",
        "row": false,
        "hidden": false,
        "collection": false,

        "defaultdata": EasyLibrary.ReadDOM('SystemPages/forgotpassword', false),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
           
            this.responsiveDOMs = this.settingDOMs;
            if ($appendedParent.find('.comp-forgotpassword').length > 1) {
                SageAlertDialog("Only one login form component is allowed");
                $appendLayer.remove();
            }
            this.view.initCaptcha($('.comp-forgotpassword'));
        },
        "onsort": function (ui) {
            //$('.deletehelper,.dltRw').show();
            //$('.comp-forgotpassword').parents('.cRow').find('.dltRw').hide();
            //$('.comp-forgotpassword').parents('.editor-col').find('>.SetHdlr .deletehelper').hide();
            //$('.comp-forgotpassword').parents('.container').find('>.SetHdlr .deletehelper').hide();
        },
        "optionsDom": {
            'getDom': '',
            'createOptions': function ($slcID) {
                let html = `<option class="size" data-wrap=".comp-forgotpassword" value=".comp-forgotpassword">Component</option>       
                        <option class="size text"  data-wrap=".fmHFld" value=".heading">Heading</option >
                        <option class="size"  data-wrap=".fmFld" value = ".fmFld">Field</option >
                        <option class="size"  data-wrap=".btn-wrap" value=".btn-wrap">Button Field</option>
                        <option class="size text"  data-wrap=".fmLbl" value=".fmLbl label">Label</option>                                                                                         
                        <option class="text" data-wrap=".fmInp" value=".cbvInpTxt">Input Box</option>                        
                        <option class="text" data-wrap=".btn-wrap" value=".btnRecoveredPass">Button</option>
                        <option class="size"  data-wrap=".imgCaptcha" value=".imgCaptcha">Captcha Image</option>
                        <option class="size"  data-wrap=".captchaField" value=".captchaField">Captcha Field</option>
                        <option class="text" data-wrap=".btn-wrap" value=".btnRefreshCapcha">Refresh Captcha</option>
                        <option class="text size"  data-wrap=".msg" value=".msg">Success Message</option>
                        <option class="text size"  data-wrap=".ErrorMsg" value=".ErrorMsg">Error Message</option>`
                $slcID.html(html);

                this.getDom = $slcID.html();
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "custom": true,
                    "DOM": `<h4>Hide Show Field For Design</h4>
                        <span class="info">In Implementation these field are automatically hide/show by the system.</span>
                        <div class="field-row" id="divEnDnField"></div>`,
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        let html = '';
                        $parent.find('.fldEnDn').each(function (i, v) {
                            let $thisEle = $(this);
                            html += `<div class="field-row stElWrap col50-50">
                            <label class="fCol">${$thisEle.attr('data-name')}</label>
                            <div class="fCol TxAl-r Dfx">
                                <div class="sfCol_80">
                                <span class="toggle_btn">
                                    <input type="checkbox" data-targetele=".fldEnDn[data-name='${$thisEle.attr('data-name')}']" class="chkEnDnEle" id="toggleBtn${i}">
                                    <label for="toggleButtonLabel" class="tgl_slider"></label>
                                 </span>
                                 </div>                            
                            </div>
                            </div>`
                        });
                        $('#divEnDnField').html(html);
                        $('input.chkEnDnEle').off('change').on('change', function () {
                            let $this = $(this);
                            let $target = $parent.find($this.attr('data-targetele'));
                            if ($this.prop('checked')) {
                                $target.removeClass('Dn');
                                $activeDOM.find($target.attr('data-alterfld')).addClass('Dn');
                                $activeDOM.find($target.attr('data-samefld')).removeClass('Dn');
                            }
                            else {
                                $target.addClass('Dn');
                            }
                            checkState()
                        });
                        function checkState() {
                            $('input.chkEnDnEle').each(function () {
                                let $this = $(this);
                                $this.prop('checked', $($this.attr('data-targetele')).is(":visible"))
                            });
                        }
                        checkState();
                    },

                },
                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Spacing on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSpcSettingAplyOn">                                                                                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divSpcSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['forgot password'].optionsDom.createOptions($('#slcSpcSettingAplyOn'));
                        $('#slcSpcSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == '.comp-forgotpassword') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }

                            InitSpacing(target);
                        });
                        function InitSpacing(target) {
                            $("#divSpcSetting").AdvanceSpacing({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSpcSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSpcSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Text Setting on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcTxtSettingAplyOn">                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divTxtSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcTxtSettingAplyOn').html(component['forgot password'].optionsDom.getDom);
                        $('#slcTxtSettingAplyOn option').not('.text').remove();

                        $('#slcTxtSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $activeDOM.find(target).addClass('actEle');
                            InitTextSetting(target);
                        });
                        function InitTextSetting(target) {
                            $("#divTxtSetting").AdvanceTextSetting({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    size: true,
                                    lineheight: true,
                                    width: false,
                                    spacing: true,
                                    transform: true,
                                    family: true,
                                    weight: true,
                                    color: true
                                },
                            });
                        }
                    },
                    "active": function () {
                        $('#slcTxtSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcTxtSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Alignment on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcAignmentAplyOn">                                                                                                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divAlignSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcAignmentAplyOn').html(component['forgot password'].optionsDom.getDom);
                        $('#slcAignmentAplyOn option').not('.size').remove();

                        $('#slcAignmentAplyOn').off('change').on('change', function () {
                            let target = $('#slcAignmentAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target == '.comp-forgotpassword') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            initAlignment(target);
                        });
                        function initAlignment(target) {
                            $('#divAlignSetting').AdvanceAlignment({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"],

                                }
                            });

                        }

                    },
                    "active": function () {
                        $('#slcAignmentAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAignmentAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply width on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSizeSettingAplyOn">        
                                     </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divWidthSetting"></div>
                            </div>                                       
                                `,
                    "onload": function ($item) {
                        $('#slcSizeSettingAplyOn').html(component['forgot password'].optionsDom.getDom);
                        $('#slcSizeSettingAplyOn option').not('.size').remove();

                        $('#slcSizeSettingAplyOn').off('change').on('change', function () {
                            let target = $('#slcSizeSettingAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target == '.comp-forgotpassword') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            init(target);
                        });
                        function init(target) {
                            $("#divWidthSetting").AdvanceWidthSlider({
                                targetParent: $activeDOM,
                                targetElem: target,
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSizeSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSizeSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Background on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBgAplyOn">                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBgSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['forgot password'].optionsDom.createOptions($('#slcBgAplyOn'));

                        $('#slcBgAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == '.comp-forgotpassword') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            InitBackground(target);
                        });
                        function InitBackground(target) {

                            $("#divBgSetting").AdvanceBackground({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: ["color"]
                            });
                        }
                    },
                    "active": function () {

                        $('#slcBgAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBgAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBdrAplyOn">                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBdrSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBdrAplyOn').html(component['forgot password'].optionsDom.getDom);

                        $('#slcBdrAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == '.comp-forgotpassword') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBdrSetting").AdvanceBorder({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBdrAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBdrAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxRdsAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxRdsSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxRdsAplyOn').html(component['forgot password'].optionsDom.getDom);

                        $('#slcBxRdsAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == '.comp-forgotpassword') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {

                            $("#divBxRdsSetting").AdvanceBoxRadius({
                                targetParent: $activeDOM,
                                targetElem: target,
                                "options": {
                                    "max": 200,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBxRdsAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxRdsAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Box Shadow on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxSdoAplyOn">
                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxSdoSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxSdoAplyOn').html(component['forgot password'].optionsDom.getDom);

                        $('#slcBxSdoAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target == '.comp-forgotpassword') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBxSdoSetting").AdvanceBoxShadow({
                                targetParent: $activeDOM,
                                targetElem: target,

                            });
                        }

                    },
                    "active": function () {

                        $('#slcBxSdoAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxSdoAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Hover Effect on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcHoverEftAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divHoverEftAplyOn"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcHoverEftAplyOn').html(component['forgot password'].optionsDom.getDom);
                        $('#slcHoverEftAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-forgotpassword') {
                                target = $activeDOM;
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divHoverEftAplyOn").AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "color": ["all", "background", "text"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        }
                    },
                    "active": function () {

                        $('#slcHoverEftAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcHoverEftAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "removeEdit": function ($editDOM) {
            $editDOM.find('#ForgotPasswordCaptcha').html('');
        },
        "remove": function ($viewDOM) {
            $viewDOM.find('#ForgotPasswordCaptcha').html('');
            $viewDOM.find('#divForgotPasswordForm').removeClass('Dn mDn tDn');
            $viewDOM.find('#divStatusMessage,#divErrorMessage').addClass('Dn');
        },
        view: {
            view: function () {
                var $pr = $('.comp-forgotpassword');
                this.evntListen($pr);
                this.validation($pr);
                this.initCaptcha($pr);
            },
            validation: function ($pr) {
                var self = this;
                $pr.find('.requiredFld').on('keyup', function () {
                    let $this = $(this);
                    $this.next('.sfError').remove();
                    if ($this.val() === '') {
                        $this.after('<span class="sfError">Required Field</span>');
                    }
                    else if ($this.attr('data-email') === 'true' && !self.validEmail($this.val())) {
                        $this.after('<span class="sfError">Invalid Email</span>');
                    } else {
                        $this.next('.sfError').remove();
                    }
                });
            },
            validEmail: function (email) {
                const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(String(email).toLowerCase());
            },
            validateForm: function ($pr) {
                var self = this;
                $pr.find('.sfError').remove();
                var valid = true;
                $pr.find('.requiredFld').each(function () {
                    var $inp = $(this);
                    if ($inp.val() === '') {
                        $inp.after('<span class="sfError">Required Field</span>');
                        valid = false;
                    } else if ($inp.attr('data-email') === 'true' && !self.validEmail($inp.val())) {
                        $inp.after('<span class="sfError">Invalid Email</span>');
                        valid = false;
                    }
                });
                return valid;
            },
            evntListen: function ($pr) {
                var self = this;
                $('#btnRecoverPassword').off('click').on('click', function () {
                    if (self.validateForm($pr))
                    self.sendRequest($pr);
                });
            },
            sendRequest: function ($pr) { 
                var self = this;
                let config = {
                    url: '/account/forgotpassword',
                    data: JSON.stringify({
                        UserName: $('#txtUserEmail').val(),
                        CaptchaValue: $('#txtCaptchaValue').val(),
                        CaptchaResponse: $pr.find('input[name="cbuildercaptcharesponse"]').val()
                    }),
                    success: function (data) {
                        if (data.IsSuccess) {
                            $pr.find('#divStatusMessage').text(data.Message).removeClass('Dn');
                            $pr.find('#divForgotPasswordForm,#divErrorMessage').addClass('Dn');
                        } else {
                            $pr.find('#divErrorMessage').text(data.Message).removeClass('Dn');
                            $pr.find('#divForgotPasswordForm').removeClass('Dn');
                            $pr.find('#divStatusMessage').addClass('Dn');
                            self.initCaptcha($pr);
                        }
                    },
                }
                SecureAjaxCall.PassObject(config);
            },
            initCaptcha: function ($pr) {
                    $('#ForgotPasswordCaptcha').contentdercaptcha({
                        type: 'number',
                        siteKey: SitePublicKey,
                        secretKey: 'ss'
                    });
            }

        }

    }
,    "login form": {
        "componentname": "login form",
        "category": "basic",
        "icon": "fa fa-sign-in",
        "row": false,
        "hidden": false,
        "collection": false,
        "defaultdata": EasyLibrary.ReadDOM('SystemPages/loginform', false),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {

            if (dropped && $appendedParent.find('.comp-loginform').length > 1) {
                SageAlertDialog("Only one login form component is allowed");
                $appendLayer.remove();
            }
            this.view.initCaptcha({ captcha: 'true', type: 'number' });
            this.view.getExternalLogin();
        },
        "onsort": function (ui) {

        },
        "optionsDom": {
            'getDom': '',
            'createOptions': function ($slcID) {
                let html = `<option class="size" data-wrap=".comp-loginform" value=".comp-loginform">Component</option>
                        <option class="size" data-wrap=".formMainWrap" value=".formMainWrap">Login Form</option>                       
                        <option class="size text"  data-wrap=".fmHFld" value=".heading">Heading</option >
                        <option class="size"  data-wrap=".fmFld" value = ".fmFld">Field</option >
                        <option class="size"  data-wrap=".btn-wrap" value=".btn-wrap">Button Field</option>
                        <option class="size text"  data-wrap=".fmLbl" value=".fmLbl label">Label</option>   
                        <option class="text" data-wrap=".fmInp" value=".cbvInpTxt">Input Box</option>                        
                        <option class="text" data-wrap=".btn-wrap" value=".btnLogin">Login button</option>
                        <option class="size"  data-wrap=".imgCaptcha" value=".imgCaptcha">Captcha Image</option>
                        <option class="size"  data-wrap=".captchaField" value=".captchaField">Captcha Field</option>
                        <option class="text" data-wrap=".btn-wrap" value=".btnRefreshCapcha">Refresh Captcha</option>
                        <option class="text size"  data-wrap=".errorMsg" value=".errorMsg">Error Message</option>
                        <option class="size text"  data-wrap=".fldPassForgot" value=".lnkPassForgot">Forgot Password</option>
                        <option class="size"  data-wrap=".fldOID" value=".fldOID">OpenID Field</option>
                        <option class="text size"  data-wrap=".fldOIDTxt" value=".fldOIDTxt">OpenID Label</option>
                        <option class="size btnOID"  data-wrap=".oIdBtn" value=".oIdBtn">OpenID Button</option>
                        <option class="size"  data-wrap=".FldAlreadyLogin" value=".FldAlreadyLogin">Already Login Field</option>
                        <option class="text"  data-wrap=".loginStatMsg" value=".loginStatMsg">Already Login Text</option>
                        <option class="size"  data-wrap=".alrdyLogBtn" value=".alrdyLogBtn">Logged in Button Field</option>
                        <option class="size text"  data-wrap=".alrdyLogBtn" value=".lnkCountinue">Contiue Button</option>
                        <option class="text"  data-wrap=".alrdyLogBtn" value=".logOutBtn">Logout Button</option>`
                $slcID.html(html);
                if ($slcID.attr('id') === 'slcBgAplyOn')
                    $slcID.find('.btnOID').remove();
                this.getDom = $slcID.html();
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "custom": true,
                    "DOM": `<h4>Hide Show Field For Design</h4>
                        <span class="info">In view page these field are automatically hide/show by the system.</span>
                        <div class="field-row" id="divEnDnField"></div>`,
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        let html = '';
                        $parent.find('.fldEnDn').each(function (i, v) {
                            let $thisEle = $(this);
                            html += `<div class="field-row stElWrap col50-50">
                            <label class="fCol">${$thisEle.attr('data-name')}</label>
                            <div class="fCol TxAl-r Dfx">
                                <div class="sfCol_80">
                                <span class="toggle_btn">
                                    <input type="checkbox" data-name="${$thisEle.attr('data-name')}" data-targetele=".fldEnDn[data-name='${$thisEle.attr('data-name')}']" class="chkEnDnEle" id="toggleBtn${i}">
                                    <label for="toggleButtonLabel" class="tgl_slider"></label>
                                 </span>
                                 </div>                            
                            </div>
                            </div>`
                        });
                        $('#divEnDnField').html(html);
                        $('input.chkEnDnEle').off('change').on('change', function () {
                            let $this = $(this);
                            let $target = $parent.find($this.attr('data-targetele'));
                            let name = $this.attr('data-name');
                            if ($this.prop('checked')) {
                                if (name === 'Login Form' || name === "Error Message") {
                                    $('.FldAlreadyLogin').addClass('Dn');
                                    $('input.chkEnDnEle[data-name="Already Login Status"]').prop('checked', false);
                                } else if (name === 'Already Login Status') {
                                    $('#divLoginMainForm').addClass('Dn');
                                    $('#divLoginErrorMsg').addClass('Dn');
                                    $('input.chkEnDnEle[data-name="Login Form"]').prop('checked', false);
                                    $('input.chkEnDnEle[data-name="Error Message"]').prop('checked', false);
                                }
                                $target.removeClass('Dn');
                            }
                            else {
                                $target.addClass('Dn');
                            }

                        });
                        $('input.chkEnDnEle').each(function () {
                            let $this = $(this);
                            $this.prop('checked', $($this.attr('data-targetele')).is(":visible"))
                        });
                    },

                },

                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Spacing on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSpcSettingAplyOn">                                                                                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divSpcSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['login form'].optionsDom.createOptions($('#slcSpcSettingAplyOn'));
                        let $parent = $activeDOM;
                        $('#slcSpcSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                $parent.addClass('actEle');
                                target = $parent;
                            } else {
                                $parent.find(target).addClass('actEle');
                            }

                            InitSpacing(target);
                        });
                        function InitSpacing(target) {
                            $("#divSpcSetting").AdvanceSpacing({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSpcSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSpcSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Text Setting on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcTxtSettingAplyOn">                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divTxtSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcTxtSettingAplyOn').html(component['login form'].optionsDom.getDom);
                        $('#slcTxtSettingAplyOn option').not('.text').remove();
                        let $parent = $activeDOM;
                        $('#slcTxtSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $parent.find(target).addClass('actEle');
                            InitTextSetting(target);
                        });
                        function InitTextSetting(target) {

                            $("#divTxtSetting").AdvanceTextSetting({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    size: true,
                                    lineheight: true,
                                    width: false,
                                    spacing: true,
                                    transform: true,
                                    family: true,
                                    weight: true,
                                    color: true
                                },
                            });
                        }
                    },
                    "active": function () {
                        $('#slcTxtSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcTxtSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Alignment on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcAignmentAplyOn">                                                                                                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divAlignSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcAignmentAplyOn').html(component['login form'].optionsDom.getDom);
                        $('#slcAignmentAplyOn option').not('.size').remove();

                        let $parent = $activeDOM;
                        $('#slcAignmentAplyOn').off('change').on('change', function () {
                            let target = $('#slcAignmentAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                $parent.addClass('actEle');
                                target = $parent;
                            } else {
                                $parent.find(target).addClass('actEle');
                            }
                            initAlignment(target);
                        });
                        function initAlignment(target) {
                            $('#divAlignSetting').AdvanceAlignment({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"],

                                }
                            });

                        }

                    },
                    "active": function () {
                        $('#slcAignmentAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAignmentAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply width on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSizeSettingAplyOn">        
                                     </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divWidthSetting"></div>
                            </div>                                       
                                `,
                    "onload": function ($item) {
                        $('#slcSizeSettingAplyOn').html(component['login form'].optionsDom.getDom);
                        $('#slcSizeSettingAplyOn option').not('.size').remove();
                        let $parent = $activeDOM;
                        $('#slcSizeSettingAplyOn').off('change').on('change', function () {
                            let target = $('#slcSizeSettingAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                $parent.addClass('actEle');
                                target = $parent;
                            } else {
                                $parent.find(target).addClass('actEle');
                            }
                            init(target);
                        });
                        function init(target) {
                            $("#divWidthSetting").AdvanceWidthSlider({
                                targetParent: $parent,
                                targetElem: target,
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSizeSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSizeSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Background on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBgAplyOn">                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBgSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['login form'].optionsDom.createOptions($('#slcBgAplyOn'));

                        let $parent = $activeDOM;
                        $('#slcBgAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                $parent.addClass('actEle');
                                target = $parent;
                            } else {
                                $parent.find(target).addClass('actEle');
                            }
                            InitBackground(target);
                        });
                        function InitBackground(target) {

                            $("#divBgSetting").AdvanceBackground({
                                targetParent: $parent,
                                targetElem: target,
                                options: ["color"]
                            });
                        }
                    },
                    "active": function () {

                        $('#slcBgAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBgAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBdrAplyOn">                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBdrSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBdrAplyOn').html(component['login form'].optionsDom.getDom);
                        let $parent = $activeDOM;
                        $('#slcBdrAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                $parent.addClass('actEle');
                                target = $parent;
                            } else {
                                $parent.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBdrSetting").AdvanceBorder({
                                targetParent: $parent,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBdrAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBdrAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxRdsAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxRdsSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxRdsAplyOn').html(component['login form'].optionsDom.getDom);
                        let $parent = $activeDOM;
                        $('#slcBxRdsAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                $parent.addClass('actEle');
                                target = $parent;
                            } else {
                                $parent.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {

                            $("#divBxRdsSetting").AdvanceBoxRadius({
                                targetParent: $parent,
                                targetElem: target,
                                "options": {
                                    "max": 200,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBxRdsAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxRdsAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Box Shadow on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxSdoAplyOn">
                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxSdoSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxSdoAplyOn').html(component['login form'].optionsDom.getDom);
                        let $parent = $activeDOM;
                        $('#slcBxSdoAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                $parent.addClass('actEle');
                                target = $parent;
                            } else {
                                $parent.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBxSdoSetting").AdvanceBoxShadow({
                                targetParent: $parent,
                                targetElem: target,

                            });
                        }

                    },
                    "active": function () {

                        $('#slcBxSdoAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxSdoAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Hover Effect on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcHoverEftAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divHoverEftAplyOn"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcHoverEftAplyOn').html(component['login form'].optionsDom.getDom);
                        $('#slcHoverEftAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-loginform') {
                                target = $activeDOM;
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divHoverEftAplyOn").AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "color": ["all", "background", "text"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        }
                    },
                    "active": function () {

                        $('#slcHoverEftAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcHoverEftAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "complete": function () {
            this.responsiveDOMs = this.settingDOMs;
        },
        "removeEdit": function ($editDOM) {
            $editDOM.find('#LoginCaptcha').html('');
        },
        "remove": function ($viewDOM) {
            $viewDOM.find('#btnSignIn').attr('type', 'submit');
            $viewDOM.find('#btnLogOutFrmSystem').attr('type', 'submit');
            $viewDOM.find('#lnkForgotPassword').attr('href', '/forgotpassword');
            $viewDOM.find('#LoginCaptchaWrap').addClass('Dn');
            $('.FldAlreadyLogin ').addClass('Dn');
            $('.login-form').removeClass('Dn');
            $viewDOM.find('#LoginCaptcha').html('');

        },
        "view": {
            view: function () {
                var $form = $('#divLoginMainForm');
                if (SageFrameUserName === '') {
                    $form.removeClass('Dn tDn mDn');
                }
                else {
                    $form.addClass('Dn tDn mDn');
                    $('#divAlreadyLogin').removeClass('Dn mDn tDn');
                }
                var objUrl = GetSearchQuery();
                $('#divReqVerToken').html($('input:hidden[name="__RequestVerificationToken"]')[0].outerHTML);

                $('#hdnReturnURL').val(objUrl.returnurl);
                this.getExternalLogin();
                this.eventListener($form);
                this.validation($form);
                this.initCaptcha(objUrl);
            },
            getExternalLogin: function () {
                var conf = {
                    type: 'GET',
                    async: true,
                    url: '/account/GetExternalLogin',
                    success: function (data) {
                        var btnOID = $('#dvOpenIDField').find('.oIdBtn')[0].outerHTML;
                        var btnHTML = '';
                        if (data.length > 0) {
                            var rtnURL = $('#hdnReturnURL').val();
                            $('#dvOpenIDField').removeClass('Dn tDn mDn');
                            $.each(data, function (i, v) {
                                var $btnOID = $(btnOID);
                                $btnOID.attr('data-provider', v.LoginProvider);
                                $btnOID.find('img').attr('src', v.ProviderLogo);
                                if (!EditorMode) {
                                    var url = '/account/externallogin?provider=' + v.LoginProvider + '&returnurl='+rtnURL 
                                    $btnOID.attr('href', url);
                                }
                                btnHTML += $btnOID[0].outerHTML;
                            });
                            $('#divOpenIDBtnWrp').html(btnHTML);
                        }
                    }
                }
                SecureAjaxCall.Call(conf);
            },
            validation: function ($pr) {
                var self = this;
                $pr.find('.requiredFld').on('keyup', function () {
                    let $this = $(this);
                    $this.next('.sfError').remove();
                    if ($this.val() === '') {
                        $this.after('<span class="sfError">Required Field</span>');
                    }
                    else if ($this.attr('data-email') === 'true' && !self.validEmail($this.val())) {
                        $this.after('<span class="sfError">Invalid Email</span>');
                    } else {
                        $this.next('.sfError').remove();
                    }
                });
            },
            validEmail: function (email) {
                var reg = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return reg.test(email);
            },
            validateForm: function ($pr) {
                var self = this;
                $pr.find('.sfError').remove();
                var valid = true;
                $pr.find('.requiredFld:visible').each(function () {
                    var $inp = $(this);

                    if ($inp.val() === '') {
                        $inp.after('<span class="sfError">Required Field</span>');
                        valid = false;
                    } else if ($inp.attr('data-email') === 'true' && !self.validEmail($inp.val())) {
                        $inp.after('<span class="sfError">Invalid Email</span>');
                        valid = false;
                    }

                });
                return valid;
            },
            eventListener: function ($pr) {
                var self = this;
                $pr.find('#btnSignIn').off('click').on('click', function (e) {
                    if (!self.validateForm($pr)) {
                        e.preventDefault();
                    }
                });
                $('#hypLnkCountinue').off('click').on('click', function (e) {
                    window.history.back();
                });
               
            },
            initCaptcha: function (p) {
                if (p.captcha === 'true') {
                    try {
                        $('#LoginCaptchaWrap').removeClass('Dn');
                        $('#LoginCaptcha').contentdercaptcha({
                            type: p.type,
                            siteKey: SitePublicKey,
                            secretKey: 'ss'
                        });
                    } catch{
                        console.error('Captcha not working');
                    }
                }
            }
        }

    }
,    "password recover": {
        "componentname": "password recover",
        "category": "basic",
        "icon": "fa fa-undo",
        "row": false,
        "hidden": false,
        "collection": false,
        "defaultdata": EasyLibrary.ReadDOM('systempages/passwordrecoverview', false),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            this.responsiveDOMs = this.settingDOMs;
            if ($appendedParent.find('.comp-passwordrecover').length > 1) {
                SageAlertDialog("Only one password recover component is allowed");
                $appendLayer.remove();
            }
            this.view.view();
        },
        "onsort": function (ui) {

        },
        "optionsDom": {
            'getDom': '',
            'createOptions': function ($slcID) {
                let html = `<option class="size" data-wrap=".comp-passwordrecover" value=".comp-passwordrecover">Component</option>       
                        <option class="size text"  data-wrap=".fmHFld" value=".heading">Heading</option >
                        <option class="size"  data-wrap=".fmFld" value = ".fmFld">Field</option >           
                        <option class="size text"  data-wrap=".fmLbl" value=".fmLbl label">Label</option>                                                                                         
                        <option class="text" data-wrap=".fmInp" value=".cbvInpTxt">Input Box</option>                        
                        <option class="text size" data-wrap=".btn-wrap" value=".btnResetPassword">Change Password Button</option>
                     `
                $slcID.html(html);
                this.getDom = $slcID.html();
            }
        },
        "settingDOMs": {
            "tabs": {
                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Spacing on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSpcSettingAplyOn">                                                                                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divSpcSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['password recover'].optionsDom.createOptions($('#slcSpcSettingAplyOn'));

                        $('#slcSpcSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }

                            InitSpacing(target);
                        });
                        function InitSpacing(target) {
                            $("#divSpcSetting").AdvanceSpacing({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSpcSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSpcSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Text Setting on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcTxtSettingAplyOn">                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divTxtSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcTxtSettingAplyOn').html(component['password recover'].optionsDom.getDom);
                        $('#slcTxtSettingAplyOn option').not('.text').remove();

                        $('#slcTxtSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $activeDOM.find(target).addClass('actEle');
                            InitTextSetting(target);
                        });
                        function InitTextSetting(target) {

                            $("#divTxtSetting").AdvanceTextSetting({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    size: true,
                                    lineheight: true,
                                    width: false,
                                    spacing: true,
                                    transform: true,
                                    family: true,
                                    weight: true,
                                    color: true
                                },
                            });
                        }
                    },
                    "active": function () {
                        $('#slcTxtSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcTxtSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Alignment on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcAignmentAplyOn">                                                                                                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divAlignSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcAignmentAplyOn').html(component['password recover'].optionsDom.getDom);
                        $('#slcAignmentAplyOn option').not('.size').remove();


                        $('#slcAignmentAplyOn').off('change').on('change', function () {
                            let target = $('#slcAignmentAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            initAlignment(target);
                        });
                        function initAlignment(target) {
                            $('#divAlignSetting').AdvanceAlignment({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"],

                                }
                            });

                        }

                    },
                    "active": function () {
                        $('#slcAignmentAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAignmentAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply width on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSizeSettingAplyOn">        
                                     </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divWidthSetting"></div>
                            </div>                                       
                                `,
                    "onload": function ($item) {
                        $('#slcSizeSettingAplyOn').html(component['password recover'].optionsDom.getDom);
                        $('#slcSizeSettingAplyOn option').not('.size').remove();

                        $('#slcSizeSettingAplyOn').off('change').on('change', function () {
                            let target = $('#slcSizeSettingAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            init(target);
                        });
                        function init(target) {
                            $("#divWidthSetting").AdvanceWidthSlider({
                                targetParent: $activeDOM,
                                targetElem: target,
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSizeSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSizeSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Background on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBgAplyOn">                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBgSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['password recover'].optionsDom.createOptions($('#slcBgAplyOn'));


                        $('#slcBgAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            InitBackground(target);
                        });
                        function InitBackground(target) {

                            $("#divBgSetting").AdvanceBackground({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: ["color"]
                            });
                        }
                    },
                    "active": function () {

                        $('#slcBgAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBgAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBdrAplyOn">                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBdrSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBdrAplyOn').html(component['password recover'].optionsDom.getDom);

                        $('#slcBdrAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBdrSetting").AdvanceBorder({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBdrAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBdrAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxRdsAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxRdsSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxRdsAplyOn').html(component['password recover'].optionsDom.getDom);

                        $('#slcBxRdsAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {

                            $("#divBxRdsSetting").AdvanceBoxRadius({
                                targetParent: $activeDOM,
                                targetElem: target,
                                "options": {
                                    "max": 200,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBxRdsAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxRdsAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Box Shadow on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxSdoAplyOn">
                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxSdoSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxSdoAplyOn').html(component['password recover'].optionsDom.getDom);

                        $('#slcBxSdoAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBxSdoSetting").AdvanceBoxShadow({
                                targetParent: $activeDOM,
                                targetElem: target,

                            });
                        }

                    },
                    "active": function () {

                        $('#slcBxSdoAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxSdoAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Hover Effect on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcHoverEftAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divHoverEftAplyOn"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcHoverEftAplyOn').html(component['password recover'].optionsDom.getDom);
                        $('#slcHoverEftAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-passwordrecover') {
                                target = $activeDOM;
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divHoverEftAplyOn").AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "color": ["all", "background", "text"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        }
                    },
                    "active": function () {

                        $('#slcHoverEftAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcHoverEftAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "remove": function ($viewDOM) {
            $viewDOM.find('#btnResetPassword').attr('type', 'submit');
        },
        "view": {
            "view": function () {
                var $pr = $('.comp-passwordrecover');
                $('#divReqVerToken').html($('input:hidden[name="__RequestVerificationToken"]')[0].outerHTML);
                $('#hdnRecoveryCode').val(GetSearchQuery().code);
                this.event($pr);
            },
            "validate": function ($pr) {
                var valid = true;
                $pr.find('.sfError').remove();
                $pr.find('.requiredFld').each(function () {
                    var $this = $(this);
                    if ($this.val() === '') {
                        valid = false;
                        $this.after('<span class="sfError">Required Field</span>');
                    }
                    else if ($this.attr('id') === 'txtConfirmPassword' && $this.val() !== $('#txtNewPassword').val()) {
                        valid = false;
                        $this.after('<span class="sfError">Password Mismatch</span>');
                    }
                });
                return valid;
            },
            "event": function ($pr) {
                var _this = this;
                $pr.find('.requiredFld').off('keyup').on('keyup', function () {
                    var $ths = $(this);
                    $ths.next('.sfError').remove();
                    if ($ths.val() === '')
                        $ths.after('<span class="sfError">Required Field</span>');
                });
                $('#btnResetPassword').off('click').on('click', function (e) {
                    if (!_this.validate($pr))
                        e.preventDefault();
                });
            }
        }

    }
,
    "user registration": {
        "componentname": "user registration",
        "category": "basic",
        "icon": "fa fa-user-plus",
        "row": false,
        "hidden": false,
        "collection": false,
        "allowedpages": ['login', 'register'],
        "applicationName": "webbuilder",
        "defaultdata": EasyLibrary.ReadDOM("systempages/registerview"),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped && $('.comp-registration').length > 1) {
                $appendLayer.remove();
                SageAlertDialog("Only one registration form component is allowed");
            } else if (typeof this.responsiveDOMs.tabs.Spacing === 'undefined') {
                this.responsiveDOMs.tabs.Spacing = this.settingDOMs.tabs.Spacing;
                this.responsiveDOMs.tabs.Text = this.settingDOMs.tabs.Text;
                this.responsiveDOMs.tabs.Alignment = this.settingDOMs.tabs.Alignment;
                this.responsiveDOMs.tabs.Size = this.settingDOMs.tabs.Size;
            }
            this.view.initCaptcha($('.comp-registration'));
        },
        "onsort": function (ui) { },

        "optionsDom": {
            'getDom': '',
            'createOptions': function ($slcID) {
                let html = `<option class="size" data-wrap=".comp-registration" value=".comp-registration">Component</option>
                        <option class="size text"  data-wrap=".fmHFld" value=".fmHFld  .heading">Form Heading</option>'
                        <option class="size"  data-wrap=".formWrp" value = ".formWrp">Form</option>
                        <option class="size"  data-wrap=".fmFld" value = ".fmFld">Fields</option>
                        <option class="size"  data-wrap=".btn-wrap" value=".btn-wrap">Button Field</option>
                        <option class="size text"  data-wrap=".fmLbl" value=".fmLbl label">Label</option>                         
                        <option class="text"  data-wrap="" value=".chkLabel">Checkbox</option>                         
                        <option class="text"  data-wrap="" value=".rdoLabel">Radio Button</option>                         
                        <option class="text" data-wrap=".fmInp" value=".cbvInpTxt">Input Box</option>
                        <option class="text" data-wrap=".fmInp" value=".cbvInpSlc">Select Box</option>
                        <option class="text" data-wrap=".fmInp" value=".cbvTxtArea">Text Area Box</option>
                        <option class="size" data-wrap=".fmInp" value=".fmInp">Input Section</option>
                        <option class="size"  data-wrap=".capImgFld" value=".capImgFld">Captcha Field</option>
                        <option class="text size" data-wrap=".CaptchaInp" value="#txtRegCaptchaValue">Captcha Input</option>     
                        <option class="size" data-wrap=".fldGetNewsLetter" value=".fldGetNewsLetter">Get Newsletter</option>
                        <option class="text" data-wrap=".btn-wrap" value=".btnSave ">Create button</option>`

                $slcID.html(html);

                this.getDom = $slcID.html();
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": '<span class="info">In email verification,the user can login when he/she activate his account via verification email which is sent from the system.</span><div class="field-row" id="divEnDnField"></div>',
                    "settingKeys": [{ target: 'RegistrationEmailVerification', name: 'Email Verification', noUI: true }, { target: 'RegistrationCaptcha', name: '', noUI: false }],
                    "onload": function ($item) {
                        var _This = (this);
                        function GetSettingsEnDnDOM() {
                            var html = '';
                            _This.settingKeys.forEach(function (v, i) {
                                if (v.noUI)
                                    html += `<div class="field-row stElWrap col50-50">
                                         <label class="fCol">${v.name}</label>
                                             <div class="fCol TxAl-r">
                                                <span class="toggle_btn">
                                                    <input type="checkbox" data-db="true" data-name="${v.name}" data-key="${v.target}" class="chkEnDnEle" id="toggleMsgBtn${i}">
                                                    <label for="toggleMsgBtn${i}" class="tgl_slider"></label>
                                                 </span>
                                             </div>
                                         </div>`;
                            });
                            return html;
                        };
                        function EnableDisable() {
                            let html = '<h4>Form Fields</h4><div class="field-row" id="divEnDnFmFld">';
                            $activeDOM.find('.fldRegSrt').each(function (i, v) {
                                let $thisEle = $(this);
                                var name = $thisEle.attr('data-name');
                                html += `<div class="field-row stElWrap stSort">
                            <span class="sfCol_10 cPointer Mb-10 TxAl-c"><i class="fa fa-arrows-v regFormSort"></i></span>
                            <label class="sfCol_50">${name}</label><div class="sfCol_40 TxAl-r Dfx">`
                                if ($thisEle.hasClass('fldRegEnDn')) {
                                    html += `<div class="sfCol_80">
                                    <span class="toggle_btn">
                                        <input type="checkbox" data-name='${name}' data-key='Registration${name}' data-db='${$thisEle.attr('data-db')}' data-targetele=".fmFld[data-name='${name}']" class="chkEnDnEle" id="toggleBtn${i}">
                                        <label for="toggleButtonLabel" class="tgl_slider"></label>
                                     </span>
                                    </div>`
                                }
                                if ($thisEle.hasClass('req')) {
                                    html += `<span class="sfCol_20 Mr-5 TxAl-r"><span data-targetele=".fmFld[data-name='${$thisEle.attr('data-name')}']" class="cPointer fmFldRequired asterisk ${$thisEle.attr('data-required')}" style="color:rgb(175, 172, 172)" title="Turn On Required/ Off Required"><i class="fa fa-asterisk"></i></span></span>`;
                                } else {
                                    html += '<span class="sfCol_20 Mr-5 TxAl-r"></span>';
                                }
                                html += '</div></div>'
                            });
                            html += '</div>';
                            html = GetSettingsEnDnDOM() + html;
                            $('#divEnDnField').html(html);
                            $('input.chkEnDnEle').off('change').on('change', function () {
                                let $this = $(this);
                                let target = $this.attr('data-targetele');
                                if ($this.prop('checked')) {
                                    $activeDOM.find(target).removeClass('Dn');
                                }
                                else {
                                    $activeDOM.find(target).addClass('Dn');
                                }
                                if ($this.attr('data-db') === 'true') {
                                    var stng = JSON.parse($activeDOM.attr('data-setting'));
                                    stng[$this.attr('data-key')] = $this.prop('checked').toString();
                                    $activeDOM.attr('data-setting', JSON.stringify(stng))
                                }
                            });
                            $('input.chkEnDnEle').each(function () {
                                let $this = $(this);
                                $this.prop('checked', $($this.attr('data-targetele')).is(":visible"))
                            });
                            $('.fmFldRequired.required').css('color', 'rgb(255, 0, 0)');
                            $('.fmFldRequired').off('click').on('click', function () {
                                let $this = $(this);
                                let $target = $activeDOM.find($this.attr('data-targetele'));
                                let $input = $target.find('input,select,textarea');
                                if ($this.hasClass('required')) {
                                    $input.removeClass("reg_required");
                                    $target.find('.fmLbl span').remove();
                                    $this.css('color', 'rgb(175, 172, 172)');
                                    $this.removeClass('required');
                                } else {
                                    $input.addClass("reg_required");
                                    $this.addClass('required');
                                    $target.find('.fmLbl label').append('<span>*<span>');

                                    $this.css('color', 'rgb(255, 0, 0)');
                                }
                            });
                        }
                        function SortField() {
                            $("#divEnDnFmFld").AdvanceSorting({
                                targetParent: $activeDOM.find('.regFldWrap'),
                                targetElem: '.fldRegSrt',
                                sortableOptions: {
                                    items: ".stSort",
                                    handle: ".regFormSort",
                                    containment: '#divEnDnFmFld'
                                }
                            });
                        }
                        EnableDisable();
                        SortField();
                        _This.getSettings();
                    },
                    "getSettings": function () {
                        var keys = this.settingKeys.map(a => a.target).join(',')
                        var config = {
                            type: 'POST',
                            data: { 'keys': keys },
                            url: SageFrameHostURL + '/dashboard/adminsetting/GetSettingByKeys',
                            success: function (data) {
                                if (data !== null) {
                                    $.each(data, function (i, v) {

                                        $('input.chkEnDnEle[data-key="' + v.Key + '"]').prop('checked', v.Value === 'true');
                                    });
                                }
                            },
                        };
                        SecureAjaxCall.Call(config);
                    },

                    "active": function () {
                        $('.actEle').removeClass('actEle');
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Spacing on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSpcSettingAplyOn">                                                                                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divSpcSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['user registration'].optionsDom.createOptions($('#slcSpcSettingAplyOn'));

                        $('#slcSpcSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }

                            InitSpacing(target);
                        });
                        function InitSpacing(target) {
                            $("#divSpcSetting").AdvanceSpacing({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "margin": {
                                        "max": 40,
                                        "min": -40,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                    "padding": {
                                        "max": 40,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "bottom", "left", "right"]
                                    },
                                }
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSpcSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSpcSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Text Setting on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcTxtSettingAplyOn">                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divTxtSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcTxtSettingAplyOn').html(component['user registration'].optionsDom.getDom);
                        $('#slcTxtSettingAplyOn option').not('.text').remove();

                        $('#slcTxtSettingAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            $activeDOM.find(target).addClass('actEle');
                            InitTextSetting(target);
                        });
                        function InitTextSetting(target) {

                            $("#divTxtSetting").AdvanceTextSetting({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    size: true,
                                    lineheight: true,
                                    width: false,
                                    spacing: true,
                                    transform: true,
                                    family: true,
                                    weight: true,
                                    color: true
                                },
                            });
                        }
                    },
                    "active": function () {
                        $('#slcTxtSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcTxtSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Alignment on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcAignmentAplyOn">                                                                                                                                             
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divAlignSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcAignmentAplyOn').html(component['user registration'].optionsDom.getDom);
                        $('#slcAignmentAplyOn option').not('.size').remove();


                        $('#slcAignmentAplyOn').off('change').on('change', function () {
                            let target = $('#slcAignmentAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            initAlignment(target);
                        });
                        function initAlignment(target) {
                            $('#divAlignSetting').AdvanceAlignment({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    'horizontal': ["left", "center", "right"],
                                    'vertical': ["top", "middle", "bottom"],

                                }
                            });

                        }

                    },
                    "active": function () {
                        $('#slcAignmentAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAignmentAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply width on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcSizeSettingAplyOn">        
                                     </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divWidthSetting"></div>
                            </div>                                       
                                `,
                    "onload": function ($item) {
                        $('#slcSizeSettingAplyOn').html(component['user registration'].optionsDom.getDom);
                        $('#slcSizeSettingAplyOn option').not('.size').remove();

                        $('#slcSizeSettingAplyOn').off('change').on('change', function () {
                            let target = $('#slcSizeSettingAplyOn option:selected').attr('data-wrap');
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            init(target);
                        });
                        function init(target) {
                            $("#divWidthSetting").AdvanceWidthSlider({
                                targetParent: $activeDOM,
                                targetElem: target,
                            });
                        }
                    },
                    "active": function () {
                        $('#slcSizeSettingAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSizeSettingAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Background on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBgAplyOn">                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBgSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        component['user registration'].optionsDom.createOptions($('#slcBgAplyOn'));


                        $('#slcBgAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            InitBackground(target);
                        });
                        function InitBackground(target) {

                            $("#divBgSetting").AdvanceBackground({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: ["color"]
                            });
                        }
                    },
                    "active": function () {

                        $('#slcBgAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBgAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Border": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBdrAplyOn">                                       
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBdrSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBdrAplyOn').html(component['user registration'].optionsDom.getDom);

                        $('#slcBdrAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBdrSetting").AdvanceBorder({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "max": 20,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top", "right", "bottom", "left"],
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBdrAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBdrAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Radius": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Border on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxRdsAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxRdsSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxRdsAplyOn').html(component['user registration'].optionsDom.getDom);

                        $('#slcBxRdsAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {

                            $("#divBxRdsSetting").AdvanceBoxRadius({
                                targetParent: $activeDOM,
                                targetElem: target,
                                "options": {
                                    "max": 200,
                                    "min": 0,
                                    "times": 1,
                                    "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                                }
                            });

                        }

                    },
                    "active": function () {

                        $('#slcBxRdsAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxRdsAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Box Shadow on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcBxSdoAplyOn">
                                    
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divBxSdoSetting"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcBxSdoAplyOn').html(component['user registration'].optionsDom.getDom);

                        $('#slcBxSdoAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                $activeDOM.addClass('actEle');
                                target = $activeDOM;
                            } else {
                                $activeDOM.find(target).addClass('actEle');
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divBxSdoSetting").AdvanceBoxShadow({
                                targetParent: $activeDOM,
                                targetElem: target,

                            });
                        }

                    },
                    "active": function () {

                        $('#slcBxSdoAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBxSdoAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Hover Effect": {
                    "custom": true,
                    "DOM": `<div class="field-row stElWrap col50-50">
                                <label class="fCol">Apply Hover Effect on </label>
                                <span class="fCol TxAl-r select__box">
                                    <select id="slcHoverEftAplyOn">
                                    </select>
                                </span>
                            </div>
                            <div class="field-row">
                                <div id="divHoverEftAplyOn"></div>
                            </div>`,
                    "onload": function ($item) {
                        $('#slcHoverEftAplyOn').html(component['user registration'].optionsDom.getDom);
                        $('#slcHoverEftAplyOn').off('change').on('change', function () {
                            let target = $(this).val();
                            $('.actEle').removeClass('actEle');
                            if (target === '.comp-registration') {
                                target = $activeDOM;
                            }
                            Init(target);
                        });
                        function Init(target) {
                            $("#divHoverEftAplyOn").AdvanceHoverEffect({
                                targetParent: $activeDOM,
                                targetElem: target,
                                options: {
                                    "color": ["all", "background", "text"],
                                    "shadow": "on",
                                    "border": {
                                        "max": 20,
                                        "min": 0,
                                        "times": 1,
                                        "position": ["all", "top", "right", "bottom", "left"]
                                    }
                                }
                            });
                        }
                    },
                    "active": function () {

                        $('#slcHoverEftAplyOn').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcHoverEftAplyOn').trigger('change').addClass('slcActiveEleSetting');
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {}
        },
        "saveSettings": function ($pr) {
            var settings = new Array();
            var stng = JSON.parse($pr.attr('data-setting'))
            Object.keys(stng).forEach(function (v, i) {
                if (v!=='CaptchaType')
                settings.push({
                    'Key': v,
                    'Value': stng[v],
                    "Type": '0'
                });
            });
            var config = {
                type: 'POST',
                data: JSON.stringify(settings),
                url: SageFrameHostURL + '/dashboard/adminsetting/AddUpdate',
                success: function (data) {
                    console.log('registration setting saved');
                },
            };
            SecureAjaxCall.PassObject(config);
        },
        "removeEdit": function ($editDOM) {
            $editDOM.find('#RegisterCaptcha').html('');
        },
        "remove": function ($viewDom) {
            this.saveSettings($viewDom.find('#divUserRegComponent'));
            $viewDom.find('#btnRegCreateUser').attr('type', 'submit');
            $viewDom.find('#RegisterCaptcha').html('');
        },
        "view": {
            view: function () {
                $('#divReqVerToken').html($('input:hidden[name="__RequestVerificationToken"]')[0].outerHTML);
                var $pr = $('.comp-registration');
                this.initCaptcha($pr);
                this.eventListener($pr);
            },
            validator: {

                init: function ($pr) {
                    var _ThisLib = this;
                    $pr.find('.reg_required').off().on('keyup', function () {
                        var $this = $(this);
                        $this.next('.sfError').remove();
                        if ($this.val() === '') {
                            $this.after('<span class="sfError">Required Field</span>');
                        } else {
                            if ($this.attr('id') === "txtRegUserEmail") {
                                if (!_ThisLib.validemail($this.val())) {
                                    $this.after('<span class="sfError">Invalid Email</span>');
                                }
                            }
                        }
                    });
                },
                validemail: function (email) {
                    var reg = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    return reg.test(email)
                },
                form: function ($pr) {
                    var _ThisLib = this;
                    var valid = true;
                    $pr.find('.sfError').remove();
                    $pr.find('.reg_required:visible').each(function () {
                        var $this = $(this);
                        if ($this.val() === '') {
                            valid = false;
                            $this.after('<span class="sfError">Required Field</span>');
                        } else if ($this.attr('id') === "txtRegConfirmpassword" && $this.val() !== $('#txtRegUserPassword').val()) {
                            valid = false;
                            $this.after('<span class="sfError">Password Mismatch</span>');
                        }
                        else if ($this.attr('id') === "txtRegUserEmail" && !_ThisLib.validemail($this.val())) {
                            valid = false;
                            $this.after('<span class="sfError">Invalid Email</span>');
                        }
                    });
                    return valid;
                },
            },

            eventListener: function ($pr) {
                let _this = this;
                _this.validator.init($pr);
                $('#btnRegCreateUser').off('click').on('click', function (e) {
                    if (!_this.validator.form($pr)) {
                        e.preventDefault();
                    }
                });

            },

            initCaptcha: function ($pr) {
                var stng = JSON.parse($pr.attr('data-setting'));
                if (EditorMode || stng.RegistrationCaptcha === "true") {
                    $('#RegisterCaptcha').contentdercaptcha({
                        type: stng.CaptchaType,
                        siteKey: SitePublicKey,
                        secretKey: 'ss'
                    });
                }
            }

        }
    }

,    "tabs": {
        "componentname": "tabs",
        "category": "advance",
        "icon": "fa fa-th-list",
        "row": false,
        "hidden": false,
        "collection": false,
        "bucket": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM('tab/tabview'),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) {

        },
        "afterdrop": function ($appendedParent, TabsViewDom, dropped) {
            if ($(document).find('#hdnTabSettingAttr').length <= 0)
                $('body').append('<div data-attribute="" style="display: none;" id="hdnTabSettingAttr"></div>');
            $(".tabsDiv .tabs li").click(function () {
                let tabContainer = $(this).parents('.tabsDiv');
                tabContainer.find(".tabs li").removeClass("selected");
                $(this).toggleClass("selected");
                let pos = tabContainer.find(".tabs li.selected").index();
                let obj = tabContainer.find(".tab-content-wrapper > .container:eq( " + pos + " )");
                tabContainer.find(".tab-content-wrapper > .container").hide();
                $(obj).css('display', 'block');
                let tabColor = $(this).parents('.customTab').attr('data-activecolor');
                let tabActiveTxtColor = $(this).parents('.customTab').attr('data-txtactivehovercolor');
                tabContainer.find(".tabs li").css("background-color", $(this).parents('.customTab').attr('data-backgroundcolor'));
                tabContainer.parents('.customTab').find('.tab-nav > .tabs > li.selected').css("background-color", tabColor);

                tabContainer.find(".tabs li").not('.selected').find('span').css("color", $(this).parents('.customTab').attr('data-txtcolor'));
                tabContainer.find(".tabs li.selected").find('span').css("color", tabActiveTxtColor);
            });

            $(".tab-nav .tabs").each(function () {
                $(this).find("li:first").click();
            });
            $(".tab-nav > .tabs > li").unbind("mouseover mouseout");
            $('.tab-nav > .tabs > li').on('mouseover mouseout', function (evt) {

                if (!$(this).hasClass('selected')) {
                    let masterContainer = $(this).parents('.customTab');
                    let hoverColor = masterContainer.attr('data-hovercolor');
                    let basicColor = masterContainer.attr('data-backgroundcolor');
                    let txtHoverColor = masterContainer.attr('data-txthovercolor');
                    let txtBasicColor = masterContainer.attr('data-txtcolor');

                    evt.type === 'mouseover' ? $(this).css("background-color", hoverColor) : $(this).css("background-color", basicColor);
                    evt.type === 'mouseover' ? $(this).find('span').css("color", txtHoverColor) : $(this).find('span').css("color", txtBasicColor);

                }
            });
            this.resize();
        },
        "onsort": function (ui) {

        },
        "resize": function (from, to) {
            let device = ViewDeviceAlpha();
            if (EditorMode && typeof from !== 'undefined' && (from == 'm' || from == 't')) {
                let self = this;
                let $tabsCmp = $('.customTab');
                $tabsCmp.each(function (i, t) {
                    self.view.library.syncTabsWithAccordion(t);
                });
            }
            if (device.length > 0 && (device == 't' || device == 'm')) {
                this.view.library.convertTabsToAccordion();
                $('.tabsAsAccordion').removeClass('Dn');
                $('.tabsAsTab').addClass('Dn');
            } else {
                this.view.library.initTab();
                $('.tabsAsAccordion').addClass('Dn');
                $('.tabsAsTab').removeClass('Dn');
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic":
                {
                    "DOM": EasyLibrary.ReadDOM('tab/tabbasicsetting'),
                    "onload": function ($item) {
                        let CustomTab = {
                            parent: $item.closest('.SetHdlr').parent(),

                            init: function () {
                                let attr = $('#hdnTabSettingAttr').data('attribute');
                                if (attr != '') {
                                    $('#popupModel').attrs(attr);
                                    $('#hdnTabSettingAttr').data('attribute', '');
                                }
                                let tabs = CustomTab.parent.find('.tabs li.tabItem');
                                let tabLength = tabs.length;
                                let html = '';
                                $(tabs).each(function (index, element) {
                                    let TabName = $(this).find('span.tabItemTitle').text();
                                    html += '<div class="item field-row stElWrap col100">';
                                    html += '<span class="sfCol_10 cPointer TxAl-c"><i class="fa fa-arrows-v tabSort"></i></span>';
                                    html += '<span class="sfCol_80 TxAl-l cb_input"><input type="text" class="tabsTabName" value="' + TabName + '"></span>';
                                    if (tabLength != 1)
                                        html += '<span class="sfCol_10 TxAl-r"><i title="Delete" class="deleteTab fa fa-trash in-form-icon delete-icon"></i></span>';
                                    html += '</div>';
                                });
                                $('.tabListEdit').html(html);

                                if (CustomTab.parent.find('.tabsDiv').hasClass('hr-tab-mode')) {
                                    $("#tabMode").val(1);
                                }
                                else {
                                    $("#tabMode").val(2);
                                }
                                CustomTab.UIevent();
                            },
                            UIevent: function () {
                                //sorting
                                $(".tabListEdit").AdvanceSorting({
                                    targetParent: CustomTab.parent.find('.tabsDiv'),
                                    targetElem: ['.tabItem', '.tab-content-wrapper > .container'],
                                    sortableOptions: {
                                        items: "div.item",
                                        handle: ".tabSort",
                                        containment: 'div.tabListEdit'
                                    }
                                });
                                //tab name change
                                $('.tabsTabName').off().on('blur keyup', function () {
                                    let $pos = $('.tabListEdit .item').index($(this).closest('.item'));
                                    CustomTab.parent.find('.tabsDiv .tabs li.tabItem').eq($pos).find('span.tabItemTitle').text($(this).val());
                                });
                                $('.deleteTab').off().on("click", function (index, item) {
                                    let $this = $(this).parents('.item');
                                    let pos = $('.tabListEdit .item').index($(this).parents('.item'));
                                    CustomTab.parent.find('.tabsDiv .tab-content-wrapper > .container').eq(pos).remove();
                                    CustomTab.parent.find('.tabsDiv .tabs li.tabItem').eq(pos).remove();
                                    CustomTab.init();
                                });
                                $('.sfAddTab').off().on("click", function (index, item) {
                                    let lastTab = CustomTab.parent.find('.tabsDiv .tabs li.tabItem').last();
                                    let tab = document.createElement("li");
                                    $(tab).attrs(lastTab.attrs());
                                    $(tab).html(lastTab.html());
                                    let tabContainer = CustomTab.parent.find('.tabsDiv .tabs');
                                    tabContainer.prepend(tab);
                                    let lastContainer = CustomTab.parent.find('.tabsDiv .tab-content-wrapper > .container').last();
                                    let container = document.createElement("div");
                                    $(container).attrs(lastContainer.attrs());
                                    $(container).html(lastContainer.html());
                                    lastContainer.parent().prepend(container);
                                    component["tabs"].afterdrop();
                                    $('#hdnTabSettingAttr').data('attribute', $('#popupModel').attrs());
                                    SettingEvents();
                                    $item.trigger('click');
                                });
                                //display mode
                                $('#tabMode').on('change', function () {
                                    let tabContainer = CustomTab.parent;
                                    if (this.value === '1') {
                                        tabContainer.find('.tabsDiv').removeClass('vr-tab-mode').addClass('hr-tab-mode');
                                        tabContainer.find('.tabsDiv > .tab-nav > ul').removeClass('li-float-none').addClass('li-float-left');
                                    } else {
                                        tabContainer.find('.tabsDiv').removeClass('hr-tab-mode').addClass('vr-tab-mode');
                                        tabContainer.find('.tabsDiv > .tab-nav > ul').removeClass('li-float-left').addClass('li-float-none');
                                    }

                                });
                            }
                        };
                        CustomTab.init();
                    }
                },
                "Text": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('tab/tabtextsetting'),
                    "onload": function ($item) {
                        $('#settingsFor').off('change').on('change', function () {
                            let selected = $(this).val();
                            $('#titleSetting').addClass('Dn');
                            $('#headingSetting').addClass('Dn');
                            $('#contentSetting').addClass('Dn');
                            $(`#${selected}Setting`).removeClass('Dn');
                        });
                        $("#tabTitleSet").AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: '.tabItemTitle',
                            options: {
                                color: false,
                                width: false,
                            }
                        });
                        $("#tabHeadingSet").AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: 'h1.editor-para',
                            options: {
                                width: false,
                            }
                        });
                        $("#tabContentSet").AdvanceTextSetting({
                            targetParent: $activeDOM,
                            targetElem: 'p.editor-para',
                            options: {
                                width: false,
                            }
                        });
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": '<div id="tabMarginSet"></div><div id="tabPaddingSet"></div>',
                    "onload": function ($item) {
                        $('#tabMarginSet').AdvanceSpacing({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM,
                            "options": {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                            },
                        });
                        $('#tabPaddingSet').AdvanceSpacing({
                            targetParent: $activeDOM,
                            targetElem: 'li.tabItem',
                            saveClasses: true,
                            "options": {
                                "padding": {
                                    "max": 80,
                                    "min": 0,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                }
                            }
                        });
                    },
                },
                "Alignment":
                {
                    "custom": true,
                    "DOM": '<div id="titleAlign"></div><div id="headAlign"></div><div id="contentAlign"></div>',
                    "onload": function ($item) {
                        $('#titleAlign').AdvanceAlignment({
                            targetParent: $activeDOM,
                            targetElem: 'li.tabItem',
                            labels: {
                                'horizontal': 'Title Alignment'
                            }
                        });
                        $('#headAlign').AdvanceAlignment({
                            targetParent: $activeDOM,
                            targetElem: '.com-heading',
                            labels: {
                                'horizontal': 'Heading Alignment'
                            }
                        });
                        $('#contentAlign').AdvanceAlignment({
                            targetParent: $activeDOM,
                            targetElem: '.paragraph',
                            labels: {
                                'horizontal': 'Content Alignment'
                            }
                        });
                    },
                },

                //"Display Mode": {
                //    "DOM": EasyLibrary.ReadDOM('tab/tabdisplaymode'),
                //    "onload": function ($elem) {
                //        $('input[type=radio][name=tabMode]').on('change', function () {
                //            let tabContainer = $elem.parents('.customTab');
                //            if (this.value === '1') {
                //                tabContainer.find('.tabsDiv').removeClass('vr-tab-mode').addClass('hr-tab-mode');
                //                tabContainer.find('.tabsDiv > .tab-nav > ul').removeClass('li-float-none').addClass('li-float-left');
                //            }
                //            else {

                //                tabContainer.find('.tabsDiv').removeClass('hr-tab-mode').addClass('vr-tab-mode');
                //                tabContainer.find('.tabsDiv > .tab-nav > ul').removeClass('li-float-left').addClass('li-float-none');
                //            }

                //        });
                //    }
                //},
            },
        },
        "styleDOMs": {
            "tabs": {
                "Color": {
                    "DOM": EasyLibrary.ReadDOM('tab/tabcolorsetting'),
                    "onload": function ($elem) {
                        let tabContainer = $elem.parents('.customTab');
                        $('.tabActiveClr').css('background-color', tabContainer.attr('data-activecolor'));
                        let colorPickerActive = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                let objColor = RenderCallBackColor(this);
                                tabContainer.attr('data-activecolor', objColor.bgColor);
                                tabContainer.find('.tab-nav > .tabs > li.selected').css("background-color", objColor.bgColor);

                            }
                        });
                        $('.tabActiveClr').colorPicker(colorPickerActive);

                        let colorPickerHover = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                let objColor = RenderCallBackColor(this);
                                tabContainer.attr('data-hovercolor', objColor.bgColor);
                            }
                        });
                        $('.tabHoverClr').css('background-color', tabContainer.attr('data-hovercolor'));
                        $('.tabHoverClr').colorPicker(colorPickerHover);

                        let colorPickerBg = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                let objColor = RenderCallBackColor(this);
                                tabContainer.attr('data-backgroundcolor', objColor.bgColor);
                                tabContainer.find('.tab-nav > .tabs > li:not(.selected)').css("background-color", objColor.bgColor);
                            }
                        });
                        $('.tabBgClr').css('background-color', tabContainer.attr('data-backgroundcolor'));
                        $('.tabBgClr').colorPicker(colorPickerBg);

                        let colorPickerTxtBasicColor = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                let objColor = RenderCallBackColor(this);
                                tabContainer.attr('data-txtcolor', objColor.bgColor);
                                tabContainer.find('.tab-nav > .tabs > li').not('.selected').find('span').css("color", objColor.bgColor);
                            }
                        });
                        $('.tabtxtBasicClr').css('background-color', tabContainer.attr('data-txtcolor'));
                        $('.tabtxtBasicClr').colorPicker(colorPickerTxtBasicColor);
                        let colorPickerTxtHover = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                let objColor = RenderCallBackColor(this);
                                tabContainer.attr('data-txthovercolor', objColor.bgColor);
                            }
                        });
                        $('.tabtxtHoverClr').css('background-color', tabContainer.attr('data-txthovercolor'));
                        $('.tabtxtHoverClr').colorPicker(colorPickerTxtHover);


                        let colorPickerActiveTxtHover = ColorPickerOption({
                            renderCallback: function ($elm, toggled) {
                                let objColor = RenderCallBackColor(this);
                                tabContainer.attr('data-txtactivehovercolor', objColor.bgColor);
                                tabContainer.find('.tab-nav > .tabs > li.selected >span').css("color", objColor.bgColor);
                            }
                        });
                        $('.tabActivetxtHoverClr').css('background-color', tabContainer.attr('data-txthovercolor'));
                        $('.tabActivetxtHoverClr').colorPicker(colorPickerActiveTxtHover);
                    }
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    },
                    "selectLayer": function ($elem) {
                        return $elem.parents('.customTab').find('.tabsDiv > .tab-nav > ul > li');
                    },
                },
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "title fontsize": {
                            "DOM": "<div class='field-row stElWrap'><label>Title</label></div><div id='resAccTitle'></div><div class='field-row stElWrap'><label>Heading</label></div><div id='resAccHead'></div><div class='field-row stElWrap'><label>Content</label></div><div id='resAccContent'></div>",
                            "prepend": true,
                            "onload": function ($item) {
                                $("#resAccTitle").AdvanceTextSetting({
                                    targetParent: $activeDOM,
                                    targetElem: '.tabItemTitle',
                                    options: {
                                        width: false,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: false
                                    }
                                });
                                $("#resAccHead").AdvanceTextSetting({
                                    targetParent: $activeDOM,
                                    targetElem: 'h1.editor-para',
                                    options: {
                                        width: false,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: false
                                    }
                                });
                                $("#resAccContent").AdvanceTextSetting({
                                    targetParent: $activeDOM,
                                    targetElem: 'p.editor-para',
                                    options: {
                                        width: false,
                                        spacing: false,
                                        transform: false,
                                        family: false,
                                        weight: false,
                                        color: false
                                    }
                                });
                            }
                        },
                        "visibility": {},
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": "<div id='accMarginSet'></div><div id='accPaddingSet'></div>",
                    "onload": function ($item) {
                        $('#accMarginSet').AdvanceSpacing({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM,
                            "options": {
                                "margin": {
                                    "max": 80,
                                    "min": -80,
                                    "times": 5,
                                    "position": ["all", "top", "left", "bottom", "right"]
                                },
                            },
                        });
                        setTimeout(function () {
                            $('#accPaddingSet').AdvanceSpacing({
                                targetParent: $activeDOM,
                                targetElem: '.tabsAsAccordion > .sfCol_100:not(.Dn) > .tab_acc_title, li.tabItem',
                                saveClasses: true,
                                "options": {
                                    "padding": {
                                        "max": 80,
                                        "min": 0,
                                        "times": 5,
                                        "position": ["all", "top", "left", "bottom", "right"]
                                    }
                                }
                            });
                        }, 100);
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div id="titleAlign"></div><div id="headingAlign"></div><div id="contentAlign"></div>',
                    "onload": function ($item) {
                        $('#titleAlign').AdvanceAlignment({
                            targetParent: $activeDOM,
                            targetElem: '.tabItem',
                            labels: {
                                'horizontal': 'Title Alignment'
                            }
                        });
                        $('#headingAlign').AdvanceAlignment({
                            targetParent: $activeDOM,
                            targetElem: '.com-heading',
                            labels: {
                                'horizontal': 'Heading Alignment'
                            }
                        });
                        $('#contentAlign').AdvanceAlignment({
                            targetParent: $activeDOM,
                            targetElem: '.paragraph',
                            labels: {
                                'horizontal': 'Content Alignment'
                            }
                        });
                    },
                },
            }
        },
        "remove": function($viewdom) {
            let device = ViewDeviceAlpha();
            if (device.length > 0 && (device == 't' || device == 'm')) {
                let self = component['tabs'];
                self.view.library.syncTabsWithAccordionBeforeSave($viewdom);
                $($viewdom).find('.tabsAsAccordion').addClass('Dn');
                $($viewdom).find('.tabsAsTab').removeClass('Dn');
            }
        },
        "removeedit": function ($editdom) {
            let device = ViewDeviceAlpha();
            if (device.length > 0 && (device == 't' || device == 'm')) {
                let self = component['tabs'];
                self.view.library.syncTabsWithAccordionBeforeSave($editdom);
                $($editdom).find('.tabsAsAccordion').addClass('Dn');
                $($editdom).find('.tabsAsTab').removeClass('Dn');
            }
        },
        "view": {
            "view": function () {
                let w = ScreenDimension().width;
                if (parseInt(w) <= 768) {
                    this.library.convertTabsToAccordion();
                    $('.tabsAsAccordion').removeClass('Dn');
                    $('.tabsAsTab').addClass('Dn');
                } else {
                    $('.tabsAsAccordion').addClass('Dn');
                    $('.tabsAsTab').removeClass('Dn');
                    this.library.initTab();
                }
            },
            "library":
            {
                syncTabsWithAccordionBeforeSave: function ($dom) {
                    let self = component['tabs'];
                    let $tabsCmp = $($dom).find('.customTab');
                    $tabsCmp.each(function (i, t) {
                        self.view.library.syncTabsWithAccordion(t);
                    });
                },
                "convertTabsToAccordion": function () {
                    let self = this;
                    $('.customTab').each(function (i, t) {
                        self._convertTabsToAccordion(t);
                    });
                },
                "_convertTabsToAccordion": function (TabsViewDom) {
                    let $tabsView = $(TabsViewDom).find('.tabsDiv');
                    let $tabsTitles = $tabsView.find('li.tabItem');
                    let $tabsContents = $tabsView.find('.tab-content-wrapper > .container');
                    let $tabAccTemplate = $(TabsViewDom).find('.tab_acc_tmp');
                    let $tabAccHolder = $(TabsViewDom).find('.tabsAsAccordion');
                    let $tabParent = $tabAccHolder.parent();
                    $tabAccHolder.find('>.sfCol_100:not(.Dn)').remove();
                    let $tmp, $tmpContainer, $titleHld, padclasses;
                    let $items = [];
                    $tabsTitles.each(function (i, t) {
                        $tmp = $tabAccTemplate.clone();
                        $tmp.removeClass('tab_acc_tmp Dn');
                        $titleHld = $tmp.find('.tab_acc_title');
                        $titleHld
                            .addClass($(t).attr('class'))
                            .removeClass('editor-component selected active')
                            .attr('style', $(t).attr('style'))
                            .css('background-color', $tabParent.attr('data-backgroundcolor'))
                            .html($(t).html());
                        $titleHld.find('span').css('color', $tabParent.attr('data-txtcolor'));
                        padclasses = $(TabsViewDom).attr('data-padclasses');
                        if (typeof padclasses != 'undefined' && padclasses) {
                            $titleHld.removeClass(function (i, cl) {
                                return (cl.match(/([a-z]?)P[a-z]-[0-9]{1,3}/g) || []).join(' ');
                            });
                            $titleHld.addClass(padclasses);
                        }
                        $tmp.find('.tab_acc_wrap')
                            .append($tabsContents.eq(i).find('> .editor-component').clone()
                                .removeClass('editor-component editor-col activeSetting ui-sortable ui-droppable'))
                            .css('display', 'none');
                        $items.push($tmp.wrapAll('<div />').parent().html());
                    });
                    $tabAccHolder.prepend($items.join(''));
                    if (typeof SettingEvents === 'function') {
                        SettingEvents($(TabsViewDom));
                    }
                    if (typeof MouseOverEffect === 'function') {
                        MouseOverEffect($(TabsViewDom));
                    }
                    //accordion events
                    let AccorSpeed = 500;
                    $('.tab_acc_title').off('click').on('click', function () {
                        let $this = $(this);
                        let $thisParent = $this.closest('.tabsAsAccordion').eq(0);
                        let AccorItems = $thisParent.find('>.sfCol_100:not(.Dn)');
                        let $currentActive = AccorItems.find('>.tab_acc_title.active');
                        $currentActive.next('.tab_acc_wrap').slideUp(AccorSpeed);
                        $currentActive.removeClass('active');
                        $currentActive.css('background-color', $thisParent.parent().attr('data-backgroundcolor'));
                        $currentActive.find('span').css('color', $thisParent.parent().attr('data-txtcolor'));
                        let activeAcor = $this.next('.tab_acc_wrap');
                        if (activeAcor.is(":hidden")) {
                            $this.addClass('active');
                            $this.css('background-color', $thisParent.parent().attr('data-activecolor'));
                            $this.find('span').css('color', $thisParent.parent().attr('data-txtactivehovercolor'));
                            activeAcor.slideDown(AccorSpeed);
                        } else {
                            $this.removeClass('active');
                            $this.css('background-color', $thisParent.parent().attr('data-backgroundcolor'));
                            $this.find('span').css('color', $thisParent.parent().attr('data-txtcolor'));
                            activeAcor.slideUp(AccorSpeed);
                        }
                    });
                    $('.tab_acc_title').off('mouseover mouseout').on('mouseover mouseout', function (evt) {
                        let $this = $(this);
                        let $thisParent = $this.closest('.tabsAsAccordion').eq(0).parent();
                        if (evt.type == 'mouseover') {
                            $this.find('span').css('color', $thisParent.attr('data-txthovercolor'));
                            $this.css('background-color', $thisParent.attr('data-hovercolor'));
                        } else if (evt.type == "mouseout") {
                            if ($this.hasClass('active')) {
                                $this.find('span').css('color', $thisParent.attr('data-txtactivehovercolor'));
                                $this.css('background-color', $thisParent.attr('data-activecolor'));

                            } else {
                                $this.find('span').css('color', $thisParent.attr('data-txtcolor'));
                                $this.css('background-color', $thisParent.attr('data-backgroundcolor'));
                            }
                        }
                    });
                    $tabAccHolder.find('>.sfCol_100:not(.Dn)').first().find('.tab_acc_title').trigger('click');
                },
                syncTabsWithAccordion: function(t) {
                    let $accItems = $(t).find('.tabsAsAccordion > .sfCol_100:not(.tab_acc_tmp)').find('.tab_acc_wrap > .holder');
                    if ($accItems.length == 0) {
                        return;
                    }
                    $accItems.each(function (i, v) {
                        let $tabContainer = $(t).find('.tab-content-wrapper > .container').eq(i);
                        let $tabHolder = $tabContainer.find('> .holder');
                        $tabHolder.attr('class', $(v).attr('class'));
                        $tabHolder.addClass('editor-component');
                        let $accCol = $(v).find('> .editor-col');
                        let $tabCol = $tabHolder.find('> .editor-col');
                        $tabCol.addClass($accCol.attr('class'));
                        $tabCol.html($accCol.html());
                    });
                    SettingEvents($(t));
                },
                "initTab": function () {
                    $(".tabsDiv .tabs li").click(function () {
                        let tabContainer = $(this).closest('.tabsDiv');
                        tabContainer.find(".tabs li").removeClass("selected");
                        $(this).toggleClass("selected");
                        let pos = tabContainer.find(".tabs li.selected").index();
                        let obj = tabContainer.find(".tab-content-wrapper > .container.container:eq( " + pos + " )");
                        tabContainer.find(".tab-content-wrapper > .container").hide();
                        $(obj).css('display', 'block');
                        let tabColor = $(this).parents('.customTab').attr('data-activecolor');
                        let tabActiveTxtColor = $(this).parents('.customTab').attr('data-txtactivehovercolor');
                        tabContainer.find(".tabs li").css("background-color", $(this).parents('.customTab').attr('data-backgroundcolor'));
                        tabContainer.parents('.customTab').find('.tab-nav > .tabs > li.selected').css("background-color", tabColor);

                        tabContainer.find(".tabs li").not('.selected').find('span').css("color", $(this).parents('.customTab').attr('data-txtcolor'));
                        tabContainer.find(".tabs li.selected").find('span').css("color", tabActiveTxtColor);
                    });

                    $(".tab-nav .tabs").each(function () {
                        $(this).find("li:first").click();
                    });
                    $(".tab-nav > .tabs > li").unbind("mouseover mouseout");
                    $('.tab-nav > .tabs > li').on('mouseover mouseout', function (evt) {

                        if (!$(this).hasClass('selected')) {
                            let masterContainer = $(this).parents('.customTab');
                            let hoverColor = masterContainer.attr('data-hovercolor');
                            let basicColor = masterContainer.attr('data-backgroundcolor');
                            let txtHoverColor = masterContainer.attr('data-txthovercolor');
                            let txtBasicColor = masterContainer.attr('data-txtcolor');
                            evt.type === 'mouseover' ? $(this).css("background-color", hoverColor) : $(this).css("background-color", basicColor);
                            evt.type === 'mouseover' ? $(this).find('span').css("color", txtHoverColor) : $(this).find('span').css("color", txtBasicColor);

                        }
                    });
                },

            }

        }
    }
,    "text link": {
        "componentname": "text link",
        "category": "basic",
        "icon": "icon-text-link",
        "row": false,
        "hidden": false,
        "type": "element",
        "bucket": true,
        "collection": true,
        "defaultdata": EasyLibrary.ReadDOM("anchordom"),
        "beforeDrop": function ($this) { },
        "afterdrop": function ($appendedParent, $appendLayer) {
            anylinkstop();
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("imageLink/imageLinkBasic"),
                    "onload": function ($this) {
                        //$('.linkSettingWrapper').prepend(`<div class="field-row stElWrap col20-80">
                        //                                    <label class="fCol">Link text</label>
                        //                                    <div class="fCol TxAl-l text__area">
                        //                                        <textarea id="txtAnchorHolder"></textarea>
                        //                                     </div>
                        //                                 </div>`);
                        var parent = $this.closest('.editor-component');
                        var anchor = parent.find('.anchorWrapper').find('a');
                        //var linkText = anchor.text().trim();
                        //var $anchorHolderInSet = $('#txtAnchorHolder');
                        //$anchorHolderInSet.text(linkText);
                        var link = anchor.attr('href');
                        if (link == '#') link = '';
                        var linkType = anchor.attr('data-link');
                        if (!linkType) linkType = 'external';
                        if (typeof linkType !== 'undefined') {
                            switch (linkType) {
                                case 'external':
                                    $('#selectLink').val('ext');
                                    $('#linkTextURL').removeClass('Dn');
                                    $('#linkTextURL').val(link);
                                    anchor.removeClass('anchorpage').removeClass("redirectLink");
                                    break;
                                case 'internal':
                                    $('#selectLink').val('int');
                                    GetPageList();
                                    anchor.addClass('anchorpage').addClass("redirectLink");
                                    $("#anchorPageList option").filter(function () {
                                        return this.text == link.replace(SageFrameHostURL + '/', '').replaceAll("-", " ");
                                    }).attr('selected', true);
                                    $('#anchorPageList').parent().removeClass('Dn');
                                    anchor.attr("data-pageName", $("#anchorPageList option:selected").text().trim());
                                    break;
                            }

                            let newOrSame = anchor.attr('target');
                            //if (!newOrSame) newOrSame = '_blank'
                            if (typeof (newOrSame) !== "undefined|" && newOrSame !== null)
                                $("#openInnewTab").val(newOrSame);

                            $("#openInnewTab").off().on('change', function () {
                                anchor.attr("target", $(this).val());
                            });

                            $('#selectLink').off().on('change', function () {
                                var selected = $(this).val();
                                if (selected == 'ext') {
                                    anchor.attr('data-link', 'external');
                                    $('#linkTextURL').removeClass('Dn');
                                    $('#anchorPageList').parent().addClass('Dn');
                                    $('#linkTextURL').val('').focus();
                                    anchor.removeClass('anchorpage').removeClass("redirectLink");
                                } else {
                                    ChnageMenulinkType();
                                    GetPageList();
                                    $('#messageContainer').html('');
                                    $('#linkTextURL').addClass('Dn');
                                    $('#anchorPageList').parent().removeClass('Dn');
                                    $('#anchorPageList').trigger('change');
                                    anchor.addClass("redirectLink");
                                    let pageName = $('#anchorPageList option:selected').val().replaceAll(" ", "-");
                                    anchor.attr('data-onepage', pageName);
                                    anchor.attr('data-pageName', $('#anchorPageList option:selected').text().trim());
                                }
                            });
                            $('#linkTextURL').on('blur', function () {
                                var $this = $(this);
                                var val = $this.val().trim();
                                var link = '#';
                                if (val.length > 0) {
                                    link = val;

                                    var protocol = /^(https?):\/\/[^\s\/$.?#]*.[^\s]*$/i;
                                    if (!protocol.test(val)) {
                                        $this.css('border-color', 'red');
                                        $('#messageContainer').html('Invalid url. <br />Example of valid url: <br />http://www.contentder.com/ <br />https://www.contentder.com/');
                                        link = '#';
                                    }
                                    else {

                                        $('#messageContainer').html('');
                                        $this.css('border-color', '');
                                    }
                                }
                                else
                                    $('#messageContainer').html('Enter a valid URL');
                                anchor.attr('href', link);
                            });
                            //$anchorHolderInSet.on('keyup', function () {
                            //    anchor.text($anchorHolderInSet.val());
                            //    if (anchor.text() == '') anchor.text('Insert some text in \'link Text\' and set it as a link to an internal or external page.');
                            //});
                            function ChnageMenulinkType() {
                                if ($('#chkOnePageMenu').is(':checked')) {
                                    anchor.attr('data-link', 'onepage');
                                    anchor.removeClass('anchorpage');
                                }
                                else {
                                    anchor.attr('data-link', 'internal');
                                    anchor.addClass('anchorpage');
                                }
                            }
                            function GetPageList() {
                                var options = '';
                                if ($('#chkOnePageMenu').is(':checked'))
                                    $('.menuHeader .onepagemenu  li').each(function (index, item) {
                                        var $item = $(this);
                                        options += '<option  value="' + $item.attr('data-opscroll') + '">' + $item.find(' > a > .pageName').text() + '</option>';
                                    });
                                else {
                                    options = EasyLibrary.GetPageOption();
                                }
                                $('#anchorPageList').html(options);

                                $('#anchorPageList').off().on('change', function () {
                                    var $this = $(this);
                                    var url = $('#anchorPageList option:selected').text().replaceAll(" ", "-");
                                    ChnageMenulinkType();
                                    if ($('#chkOnePageMenu').is(':checked')) {
                                        anchor.attr('href', $('#anchorPageList option:selected').val().replaceAll(" ", "-"));
                                        anchor.attr('data-onepage', $('#anchorPageList option:selected').val());
                                    }
                                    else
                                        anchor.attr('href', SageFrameHostURL + '/' + url);
                                });
                            }
                        }
                        component['text link'].common.textSetting();

                    },
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }

                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    },
                },
                "Hover Effect": {
                    "options": {
                        "color": ["text", "background"]
                    },
                    "selectLayer": function ($elem) {
                        //return $elem.closest('.editor-component').find('.anchorWrapper').find('a');
                        return $activeDOM;
                    }
                },
                "Scroll Effect": {
                    "options": []
                }
            },
            "selectLayer": function ($elem) {
                var $parent = $elem.closest('.editor-component');

                return $parent;
            },
        },
        "common": {
            "textSetting": function () {
                $("#textLinkSet").html('');
                $("#textLinkSet").AdvanceTextSetting({
                    targetParent: $activeDOM,
                    targetElem: '.anchorWrapper > a',
                    fontWidthTarget: $activeDOM
                });
            }
        },
        "styleDOMs": {
            "tabs": {
                "Background":
                {
                    "options": ["image", "color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius":
                {
                    "options": {
                        "max": 50,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow":
                {
                    "options": {

                    }
                },
            },
            "selectLayer": function ($elem) {
                return $elem.closest('.editor-component');
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": '<div id="textLinkSet"></div><div id="textLinkVisibility"></div>',
                    "custom": true,
                    "onload": function () {
                        component['text link'].common.textSetting();
                        IsVisible(true);
                        $("#textLinkVisibility").html('');
                        $('#textLinkVisibility').AdvanceVisibility({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM
                        });

                        $('#textLinkVisibility').off('change').on('change', function () {
                            let val = $(this).find('input').is(":checked");
                            IsVisible(val);
                        });
                        function IsVisible(checked) {
                            if ($activeDOM.hasClass(ViewDeviceAlpha() + 'Dn') || !checked)
                                $("#textLinkSet").addClass('Dn')
                            else $("#textLinkSet").removeClass('Dn');
                        }
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    },
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        }
    }
,    "text": {
        "componentname": "text",
        "category": "basic",
        "componentBlockDOM": "",
        "icon": "icon icon-text",
        "row": false,
        "hidden": false,
        "collection": true,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("starter/textdefaultdata"),
        "pageload": function () {
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (typeof ($appendLayer) !== "undefined" && dropped) {
                var $textChange = $appendLayer.children().not('div').eq(0);
                $textChange.addClass('ff-' + $('#basicFonts').val());
                $textChange.addClass('f-weight-400');
                $appendLayer.find('.editor-para').focus();
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "custom": true,
                    "DOM": "<div id='txtbasictab'></div>",
                    "onload": function ($item) {
                        let options = {
                            width: true,
                            spacing: true,
                            transform: true,
                            family: true,
                            weight: true,
                            color: true,
                            heading: true,
                            headingEle: {
                                "target": '.editor-para',
                                //"tag": ["h1","h2"]
                            }
                        }
                        component["text"].commonSetting.text(options);
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="textMSpacing"></div><div id="textPSpacing"></div></div>',
                    onload: function () {
                        component["text"].commonSetting.spacing();
                    },
                    "selectLayer": function ($elem) {
                        //var $parent = $elem.parents('.SetHdlr').parent();
                        //var $text = $parent.find('.editor-para');
                        return $activeDOM;
                    },

                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="textAlign"></div></div>',
                    "onload": function ($item) {
                        component["text"].commonSetting.alignment();
                    },
                },
                "Scroll Effect": {
                    "options": [],
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "styleDOMs": {
            "tabs": {
                "Background": {
                    "options": ["color"]
                },
                "Border": {
                    "options": {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                },
                "Box Radius": {
                    "options": {
                        "max": 200,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"]
                    }
                },
                "Box Shadow":
                {
                    "options": {

                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "custom": true,
                    "DOM": "<div id='txtbasictab'></div><div id='textVisibility'></div>",
                    "onload": function ($item) {
                        $("#textVisibility").html('');
                        $('#textVisibility').AdvanceVisibility({
                            targetParent: $activeDOM.parent(),
                            targetElem: $activeDOM
                        });
                        let options = {
                            width: true,
                            spacing: true,
                            transform: false,
                            family: false,
                            weight: false,
                            color: false,
                            style: false
                        }
                        component["text"].commonSetting.text(options);
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="textMSpacing"></div><div id="textPSpacing"></div></div>',
                    onload: function () {
                        component["text"].commonSetting.spacing();
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    },
                },
                "Alignment": {
                    "custom": true,
                    "DOM": '<div class="field-row"><div id="textAlign"></div></div>',
                    "onload": function ($item) {
                        component["text"].commonSetting.alignment();
                    },
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "commonSetting": {
            "text": function (options) {
                let $parent = $activeDOM;
                $("#txtbasictab").AdvanceTextSetting({
                    targetParent: $parent,
                    targetElem: '.editor-para',
                    options: options
                });
            },
            "spacing": function () {
                $("#textMSpacing,#textPSpacing").html('');
                $("#textMSpacing").AdvanceSpacing({
                    targetParent: $activeDOM,
                    targetElem: $activeDOM,
                    options: {
                        "margin": {
                            "max": 40,
                            "min": -40,
                            "times": 5,
                            "position": ["all", "top", "bottom", "left", "right"]
                        },
                    },
                });
                $("#textPSpacing").AdvanceSpacing({
                    targetParent: $activeDOM,
                    targetElem: $activeDOM,
                    options: {
                        "padding": {
                            "max": 40,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "bottom", "left", "right"]
                        }
                    },
                });
            },
            "alignment": function () {
                $('#textAlign').html('');
                $("#textAlign").AdvanceAlignment({
                    targetParent: $activeDOM.parent(),
                    targetElem: $activeDOM
                });
            }
        }
    }
,    "Text editor": {
        "componentname": "Text editor",
        "category": "advance",
        "icon": "fa fa-file-text",
        "row": false,
        "hidden": false,
        "type": "element",
        "defaultdata": EasyLibrary.ReadDOM("document editor/documenteditor"),
        "beforeDrop": function ($this) {
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            var _this = this;
            _this.common.mouseleave();
            var thisMain;
            var $parent = $appendLayer.find('.documenteditorWrap');
            if (dropped) {
                var TextEditor = MainFuntion($parent);
            }
            else {
                if ($appendLayer.hasClass('site-body')) {
                    $parent.each(function (index, value) {
                        var $thisMain = $(this);
                        thisMain = this;
                        var TextEditor = MainFuntion($thisMain);
                    });
                }
                else {
                    var $parent = $appendLayer.find('.documenteditorWrap');
                    $parent.each(function (index, value) {
                        var TextEditor = new MainFuntion($appendLayer);
                    });
                }

            }
            function MainFuntion($thisMain) {
                var $divCompForm = $thisMain.find('.divCompForm');
                var $documenttext = $thisMain.find('.documenttext');

                var flagb = isActiveFlag = false;
                var flagu = flagi = flagColor = flagfontFam = flagJustify = false;
                var fcolor = flagfontFamVal = flagJustifyValue = '';
                var FontUse = '14px';
                var arr = [];

                $(document).on('click', function (e) {
                    var $this = $(this);
                    if (!$(e.target).parents().hasClass('documenteditorWrap')) {
                        $('.text-deitor-toolsbar').hide();
                        $('.toobar-drop-element').css('display', 'none');
                    }
                });
                $(document).on('click', '.documenttext', function () {
                    $('.text-deitor-toolsbar').hide();
                    $('.toobar-drop-element').hide();
                    var $this = $(this);
                    $this.parent().find('.text-deitor-toolsbar').show();
                    range = saveSelection();
                });
                $(document).on('keyup', '.documenttext', function (event) {
                    range = saveSelection();

                    $('.text-deitor-toolsbar').hide();
                    $('.toobar-drop-element').hide();
                    var $this = $(this);
                    $this.parent().find('.text-deitor-toolsbar').show();
                    range = saveSelection();

                    var $this = $(this);
                    if (event.keyCode == 8 || event.keyCode == 46) {
                        $this.find('blockquote span').css('background-color', '');
                        $this.find('span').css('background-color', '');
                    }
                    if (range.startOffset == range.endOffset) {
                        var fontElements = document.getElementsByTagName("font");

                        for (var i = 0, len = fontElements.length; i < len; ++i) {
                            if (fontElements[i].size == "2") {
                                fontElements[i].removeAttribute("size");
                                fontElements[i].style.fontSize = $this.prev().find('.fontValueC').text();
                                fontElements[i].className = 'f-weight-' + $this.prev().find('.cFontWeight').val();
                                fontElements[i].style.fontFamily = $this.prev().find('.cFontFamily').val();
                            }
                        }
                    }
                });
                $thisMain.find('.text-deitor-toolsbar').on('click', function () {
                    $('.text-deitor-toolsbar').hide();
                    var $this = $(this);
                    $this.show();
                });
                $thisMain.find('.createlinkC').off().on('change', function () {

                    var $this = $(this);
                    restoreSelection(range);
                    var url = '';

                    url = $this.parent().find('.createlinkC').val();
                    if (url.includes('http://')) {
                        url = url.replace(/http:\/\/http:\/\//, "http://");
                    }
                    else if (url.includes('https://')) {
                        url = url.replace(/https:\/\/https:\/\//, "https://");
                    }
                    else {
                        url = "https://" + $this.parent().find('.createlinkC').val();
                    }
                    if (url == "http://" || url == "https://") {
                        SageAlertDialog('Please enter the link.');
                    }
                    else {
                        var selection = document.getSelection();
                        document.execCommand('createlink', false, url);
                        var $targetvalue = $this.parent().find('.targetTypeC  option:selected').attr('title');
                        selection.anchorNode.parentElement.target = $targetvalue;
                        $('.createlinkC').val('');
                        $('.dropElement').hide();
                        $this.parent().prev().removeClass('active');
                    }
                });
                function hideDropChild() {
                    $('.has-drop-child').find('button').removeClass('active');
                    $('.toobar-drop-element').css('display', 'none');
                }

                $thisMain.find('.boldC').off().on('click', function () {
                    var $this = $(this);
                    hideDropChild();
                    if ($this.hasClass('active')) {
                        $this.removeClass('active');
                        isActiveFlag = true;
                        flagb = false;
                    }
                    else {
                        $this.addClass('active');
                        isActiveFlag = false;
                        flagb = true;
                    }
                    document.execCommand('bold', false, null);
                    range = saveSelection();
                });
                $thisMain.find('.underlineC').off().on('click', function () {
                    var $this = $(this);
                    hideDropChild();
                    if ($this.hasClass('active')) {
                        $this.removeClass('active');
                        isActiveFlag = true;
                        flagu = false;
                    }
                    else {
                        $this.addClass('active');
                        isActiveFlag = false;
                        flagu = true;
                    }
                    document.execCommand('underline', false, null);
                    range = saveSelection();
                });
                $thisMain.find('.italicC').off().on('click', function () {
                    var $this = $(this);
                    hideDropChild();
                    if ($this.hasClass('active')) {
                        $this.removeClass('active');
                        isActiveFlag = true;
                        flagi = false;
                    }
                    else {
                        $this.addClass('active');
                        isActiveFlag = false;
                        flagi = true;
                    }
                    document.execCommand('italic', false, null);
                    selection = document.getSelection();
                    selection.anchorNode.parentElement.style.display = 'inline';
                    range = saveSelection();
                    if (flagu == true) {
                        selection.anchorNode.parentElement.style.textDecoration = 'underline';
                    }
                });
                $thisMain.find('.tCase').off().on('click', function () {
                    var $this = $(this);
                    addfont();
                });
                function addfont() {
                    restoreSelection(range);
                    if (range.startOffset == range.endOffset) {
                        $('.fontValueC').text();
                    }
                    else {
                        $('.fontValueC').text(GetFont().split('px')[0] + "px");
                    }
                }
                $thisMain.find('.minusC').off().on('click', function () {
                    var $this = $(this);
                    var sCmd = $this.attr('title');
                    restoreSelection(range);
                    getfontSize(sCmd, $this);

                });
                function getfontSize(sCmd, $this) {
                    if (sCmd == 'fontsize') {
                        var FontCalc = '';
                        var FontCalc = $this.attr('id');
                        changeFont(FontCalc, $this);
                    }
                }
                $thisMain.find('.plusC').off().on('click', function () {
                    var $this = $(this);
                    var sCmd = $this.attr('title');
                    restoreSelection(range);
                    getfontSize(sCmd, $this);
                });
                $thisMain.find('.tindentC').off().on('click', function () {
                    restoreSelection(range);
                    document.execCommand('indent', false, null);
                });
                $thisMain.find('.toutdentC').off().on('click', function () {
                    restoreSelection(range);
                    document.execCommand('outdent', false, null);
                });
                $thisMain.find('.listC').off().on('click', function () {
                    restoreSelection(range);
                    var $this = $(this);
                });
                $thisMain.find('.formatblockC').off().on('click', function () {
                    var $this = $(this);
                    hideDropChild();
                    selection = document.getSelection();
                    var selectquote = selection.anchorNode.parentElement;
                    var $selectquote = $(selectquote).find('blockquote').children().length;

                    if ($this.hasClass('active')) {
                        if ($selectquote == 0) {
                            if ($documenttext.find('blockquote')) {
                                document.execCommand('formatBlock', false, 'p');
                                if (!$(selection.anchorNode.parentElement).hasClass('pClass')) {
                                    $(selection.anchorNode.parentElement).addClass('pClass');
                                }
                            }
                        }
                        else {
                            document.execCommand('formatBlock', false, 'p');
                        }
                        $this.removeClass('active');
                    }
                    else {
                        document.execCommand('formatBlock', false, 'blockquote');
                        $this.addClass('active');
                    }
                });
                $thisMain.find('.btnlinkC').off().on('click', function () {
                    restoreSelection(range);
                });
                $thisMain.find('.leftalignC').off().on('click', function () {
                    restoreSelection(range);
                    document.execCommand('justifyLeft', false, null);
                    flagJustify = true;
                    flagJustifyValue = 'justifyLeft';
                    CommandALL();
                });
                $thisMain.find('.centeralignC').off().on('click', function () {
                    restoreSelection(range);
                    document.execCommand('justifyCenter', false, null);
                    flagJustify = true;
                    flagJustifyValue = 'justifyCenter';
                    CommandALL();
                });
                $thisMain.find('.rightalignC').off().on('click', function () {
                    restoreSelection(range);
                    document.execCommand('justifyRight', false, null);
                    flagJustify = true;
                    flagJustifyValue = 'justifyRight';
                    CommandALL();
                });
                $thisMain.find('.fullalignC').off().on('click', function () {
                    restoreSelection(range);
                    document.execCommand('justifyFull', false, null);
                    flagJustify = true;
                    flagJustifyValue = 'justifyFull';
                    CommandALL();
                });
                $thisMain.find('.ullistC').off().on('click', function () {
                    var $this = $(this);
                    restoreSelection(range);
                    document.execCommand('insertunorderedlist');
                    $this.parent().prev().removeClass('active');

                    selection = document.getSelection();
                    var fontsizelist = $this.parent().parent().parent().parent().find('.fontValueC').text();
                    var fontweightlist = $this.parent().parent().parent().parent().find('.cFontWeight').val();
                    selection.anchorNode.parentElement.style.fontSize = fontsizelist;
                    selection.anchorNode.parentElement.style.fontWeight = fontweightlist;

                    CommandALL();
                });
                $thisMain.find('.ollistC').off().on('click', function () {
                    var $this = $(this);
                    restoreSelection(range);
                    document.execCommand('insertorderedlist');
                    $this.parent().prev().removeClass('active');

                    selection = document.getSelection();
                    var fontsizelist = $this.parent().parent().parent().parent().find('.fontValueC').text();
                    var fontweightlist = $this.parent().parent().parent().parent().find('.cFontWeight').val();
                    selection.anchorNode.parentElement.style.fontSize = fontsizelist;
                    selection.anchorNode.parentElement.style.fontWeight = fontweightlist;
                    CommandALL();
                });
                $thisMain.find('.alloptionC').off().on('click', function () {
                    var $this = $(this);
                    if ($this.hasClass('rotate')) {
                        $this.removeClass('rotate');
                    }
                    else {
                        $this.addClass('rotate');
                    }
                    if ($this.parent().parent().parent().parent().find('.text-deitor-toolsbar').hasClass('all')) {
                        $this.parent().parent().parent().parent().find('.text-deitor-toolsbar').removeClass('all');
                    }
                    else {
                        $this.parent().parent().parent().parent().find('.text-deitor-toolsbar').addClass('all');
                    }
                });
                $thisMain.find('.cFontFamily').html(DOMFontAdvanceCollection());
                $thisMain.find('.cFontFamily').off().on('change', function () {
                    var $this = $(this);
                    range = saveSelection();
                    restoreSelection(range);
                    fontWeight($this.val());
                    document.execCommand('fontName', false, $this.val());
                    selection = document.getSelection();
                    if (selection.anchorNode.parentElement.tagName == 'FONT') {
                        if ($this.parent().next().children().val() == "0") {
                            var fontElements = document.getElementsByTagName("font");
                            document.execCommand('fontSize', false, 2);

                            for (var i = 0, len = fontElements.length; i < len; ++i) {
                                if (fontElements[i].size == "2") {
                                    fontElements[i].removeAttribute("size");
                                    fontElements[i].style.fontSize = $this.prev().find('.fontValueC').text();
                                    $(fontElements[i]).children().each(function () {
                                        if (typeof $(this).attr('class') != 'undefined') {
                                            var fontWeightValue = '';
                                            fontWeightValue = 'f-weight-' + $this.parent().next().find('.cFontWeight').val();
                                            if (typeof $(this).attr('class') != 'undefined') {
                                                matches = $(this).attr('class').match(/\bf-weight-\S+/g);
                                                $(this).removeClass(matches.toString());
                                                if (typeof $(this).children().attr('class') == 'undefined') {
                                                    $(this).contents().unwrap();
                                                }
                                                CheckChildren(this);
                                            }
                                            if (typeof $(this).children().children().attr('class') != 'undefined') {
                                                matches = $(this).children().children().attr('class').match(/\bf-weight-\S+/g);
                                                $(this).children().children().removeClass(matches.toString());
                                                $(this).children().children().parent().html($(this).children().children().html());
                                            }
                                            if (typeof $(this).children().attr('class') != 'undefined') {
                                                matches = $(this).children().attr('class').match(/\bf-weight-\S+/g);
                                                $(this).children().removeClass(matches.toString());
                                                $(this).html($(this).contents().text());
                                            }
                                        }
                                    });
                                }
                            }
                        }
                        else {
                            if (typeof selection.anchorNode.parentElement.className != 'undefined') {
                                var matches = selection.anchorNode.parentElement.className.match(/\bf-weight-\S+/g);
                                if (matches != null) {
                                    $(selection.anchorNode.parentElement).removeClass(matches.toString());
                                }
                            }
                        }
                    }
                    else if (selection.anchorNode.parentElement.tagName == 'B') {
                        selection.anchorNode.parentElement.className = '';
                        $(selection.anchorNode.parentElement).parent().html($(selection.anchorNode.parentElement).html());
                    }
                    else if (selection.anchorNode.parentElement.tagName == 'P') {
                        selection.anchorNode.parentElement.className = 'f-weight-' + $this.parent().next().children().val();
                    }
                    else if (selection.anchorNode.parentElement.tagName == 'SPAN') {
                        $(selection.anchorNode.parentElement).children().each(function () {
                            var matches = $(this).attr('class').match(/\bf-weight-\S+/g);
                            if (matches != null) {
                                $(this).removeClass(matches.toString());

                                if (typeof $(this).children().attr('class') == 'undefined') {
                                    $(this).contents().unwrap();
                                }
                            }
                            CheckChildren(this, matches);
                        });
                    }
                    else if (selection.anchorNode.parentElement.nextElementSibling != null) {
                        if (selection.anchorNode.parentElement.nextElementSibling.tagName == 'FONT') {
                            var matches = selection.anchorNode.parentElement.nextElementSibling.className.match(/\bf-weight-\S+/g);
                            if (matches != null) {
                                $(selection.anchorNode.parentElement.nextElementSibling).removeClass(matches.toString());
                            }
                            selection.anchorNode.parentElement.nextElementSibling.className = selection.anchorNode.parentElement.nextElementSibling.className + ' f-weight-' + $this.parent().next().children().val();
                        }
                    }
                    flagfontFam = true;
                    flagfontFamVal = $this.val();
                    $this.val(flagfontFamVal);
                    CommandALL();
                });
                function removematchClass(child, matches) {
                    child.parentNode.removeClass(matches);
                }
                function CheckChildren(node, matches) {
                    for (var i = 0; i < node.childNodes.length; i++) {
                        var child = node.childNodes[i];
                        CheckChildren(child, matches);
                        removematchClass(child, matches);
                    }
                }
                $thisMain.find('.cFontFamily').on('click', function () {
                    var $this = $(this);
                    hideDropChild();
                    if (range.collapsed == false) {
                        $this.val(GetFontFamily($this));
                    }
                    fontWeight($this.val());
                });
                $thisMain.find('.cFontWeight').off().on('change', function () {
                    var $this = $(this);
                    addfont();
                    restoreSelection(range);
                    hideDropChild();
                    var sCmd = $this.attr('id');
                    if (range.endOffset == range.startOffset) {
                        document.execCommand("fontSize", false, "2");

                        var doc = document.querySelector(".documenteditor");
                        var fontElements = doc.getElementsByTagName("font");
                        var DefaultFontweight = $this.val();
                        for (var fontElement = 0, len = fontElements.length; fontElement < len; ++fontElement) {
                            if (fontElements[fontElement].size == '2') {
                                if (fontElements[fontElement].style.fontWeight != '') {
                                    DefaultFontweight = fontElements[fontElement].style.fontWeight;
                                }
                                $(fontElements[fontElement]).children().each(function () {
                                    if (typeof $(this).attr('class') != 'undefined' || typeof $(this).children().attr('class') != 'undefined') {
                                        var matches = '';
                                        if (typeof $(this).children().attr('class') != 'undefined') {
                                            matches = $(this).children().attr('class').match(/\bf-weight-\S+/g);
                                            $(this).children().removeClass($(this).children().attr('class'));
                                        }
                                        else if (typeof $(this).attr('class') != 'undefined') {
                                            matches = $(this).attr('class').match(/\bf-weight-\S+/g);
                                            $(this).removeClass($(this).attr('class'));
                                        }
                                    }
                                });
                                fontElements[fontElement].className = 'f-weight-' + DefaultFontweight;
                            }
                        }

                    }
                    else {
                        var $parentWeight = $this.parent().parent();
                        var fontexitval = '';

                        selection = document.getSelection();
                        var startOffset = range.startOffset;
                        var endOffset = range.endOffset;
                        document.execCommand('bold', false, null);
                        range = saveSelection();
                        var fontElements = $documenttext.find("b");

                        var DefaultFontweight = $this.val();
                        for (var fontElement = 0, len = fontElements.length; fontElement < len; ++fontElement) {
                            if (fontElements[fontElement].style.fontWeight != '') {
                                DefaultFontweight = fontElements[fontElement].style.fontWeight;
                            }
                            $(fontElements[fontElement]).children().each(function () {
                                if (typeof $(this).attr('class') != 'undefined' || typeof $(this).children().children().attr('class') != 'undefined' || typeof $(this).children().attr('class') != 'undefined') {
                                    var matches = '';
                                    if (typeof $(this).children().children().attr('class') != 'undefined') {
                                        matches = $(this).children().children().attr('class').match(/\bf-weight-\S+/g);
                                        $(this).children().children().removeClass(matches.toString()).addClass('f-weight-' + DefaultFontweight);
                                    }
                                    else if (typeof $(this).attr('class') != 'undefined') {
                                        matches = $(this).attr('class').match(/\bf-weight-\S+/g);
                                        $(this).removeClass(matches.toString()).addClass('f-weight-' + DefaultFontweight);
                                    }
                                    else if (typeof $(this).children().attr('class') != 'undefined') {
                                        matches = $(this).children().attr('class').match(/\bf-weight-\S+/g);
                                        $(this).children().removeClass(matches.toString()).addClass('f-weight-' + DefaultFontweight);
                                    }
                                }
                                $(this).parent().find('font').each(function () {
                                    if (typeof $(this).attr('class') != 'undefined') {
                                        matches = $(this).attr('class').match(/\bf-weight-\S+/g);
                                        $(this).removeClass(matches.toString()).addClass('f-weight-' + DefaultFontweight);
                                    }
                                });
                            });
                            if (range.startOffset != 1 && range.endOffset != 1) {
                                selection.anchorNode.parentElement.className = 'f-weight-' + DefaultFontweight;
                            }
                            if (selection.anchorNode.parentElement.parentElement.tagName == 'SPAN') {
                                var NewElement = $("<b />");
                                $.each(selection.anchorNode.parentElement.attributes, function (i, attrib) {
                                    $(NewElement).attr(attrib.name, attrib.value);
                                });
                            }
                        }
                        if (selection.anchorNode.parentElement.parentElement.tagName == "SPAN") {
                            if (typeof selection.anchorNode.parentElement.parentElement.tagName != 'undefined') {
                                $(selection.anchorNode.parentElement.parentElement).removeAttr('style');
                                $(selection.anchorNode.parentElement.parentElement).children().each(function () {
                                    if (typeof $(this).attr('class') != 'undefined') {
                                        matches = $(this).attr('class').match(/\bf-weight-\S+/g);
                                        $(this).removeClass(matches.toString()).addClass('f-weight-' + DefaultFontweight);
                                    }
                                });
                                var NewElement = $("<b />");
                                $.each(selection.anchorNode.parentElement.parentElement.attributes, function (i, attrib) {
                                    $(NewElement).attr(attrib.name, attrib.value);
                                });
                            }
                            else {
                                $(selection.anchorNode.parentElement).removeAttr('style');
                                $(selection.anchorNode.parentElement).attr('class', 'f-weight-' + DefaultFontweight);
                                var NewElement = $("<b />");
                                $.each(selection.anchorNode.parentElement.attributes, function (i, attrib) {
                                    $(NewElement).attr(attrib.name, attrib.value);
                                });
                            }
                        }
                        if (selection.anchorNode.parentElement.parentElement.tagName == "P") {
                            var $selectionParent = $(selection.anchorNode.parentElement.parentElement);
                            $selectionParent.children().each(function (index, value) {
                                if ($(this).is('font')) {
                                    var thisHTML = (this).outerHTML;
                                    var $$this = $(this);
                                    if (typeof $selectionParent.children().eq(index).attr('style') != 'undefined')
                                        arr[index] = $selectionParent.children().eq(index).css('font-size');
                                }
                            });
                        }
                        if (selection.anchorNode.parentElement.tagName == "SPAN") {
                            $(selection.anchorNode.parentElement).removeAttr('style');
                            $(selection.anchorNode.parentElement).attr('class', 'f-weight-' + DefaultFontweight);
                            var NewElement = $("<b />");
                            $.each(selection.anchorNode.parentElement.attributes, function (i, attrib) {
                                $(NewElement).attr(attrib.name, attrib.value);
                            });
                        }

                        var fontsizelist = $(selection.anchorNode.parentElement).css('font-size');

                        if (selection.anchorNode.parentElement.parentElement.tagName == 'FONT') {
                            selection.anchorNode.parentElement.parentElement.style.fontSize = fontsizelist;
                            selection.anchorNode.parentElement.parentElement.className = 'f-weight-' + DefaultFontweight;
                        }
                        else if (selection.anchorNode.parentElement.parentElement.tagName == 'LI') {
                            selection.anchorNode.parentElement.parentElement.className = 'f-weight-' + DefaultFontweight;
                            selection.anchorNode.parentElement.parentElement.style.fontSize = fontsizelist;
                        }
                        else if (selection.anchorNode.parentElement.parentElement.tagName == 'B') {
                            selection.anchorNode.parentElement.parentElement.className = 'f-weight-' + DefaultFontweight;
                            selection.anchorNode.parentElement.parentElement.style.fontSize = fontsizelist;
                        }
                        else {
                            selection.anchorNode.parentElement.style.fontSize = fontsizelist;
                            var $selectionParent = $(selection.anchorNode.parentElement.parentElement);
                            $selectionParent.children().each(function (index, value) {
                                if ($(this).is('font')) {
                                    var $$this = $(this);
                                    if (typeof arr[index] != 'undefined') {
                                        $selectionParent.children().eq(index).css('font-size', arr[index]);
                                    }
                                }
                            });
                        }
                    }
                });
                $thisMain.find('.cFontCase').off().on('change', function () {
                    var $this = $(this);
                    var trasformValue = '';
                    document.execCommand('fontsize', null, 2);
                    var fontElements = document.getElementsByTagName("font");
                    var FontCaseVal = $this.val();

                    for (var fontElement = 0, len = fontElements.length; fontElement < len; ++fontElement) {
                        if (fontElements[fontElement].size == "2") {
                            fontElements[fontElement].removeAttribute("size");
                            if (FontCaseVal == 'uppercase') {
                                fontElements[fontElement].className = 'editor-text-transform-uppercase';
                            }
                            else if (FontCaseVal == "lowercase") {
                                fontElements[fontElement].className = 'editor-text-transform-lowercase';
                            }
                            else if (FontCaseVal == "capitalize") {
                                fontElements[fontElement].className = 'editor-text-transform-capitalize';
                            }
                            else {
                                fontElements[fontElement].className = '';
                            }
                            fontElements[fontElement].style.fontSize = $this.parent().parent().parent().parent().find('.fontValueC').text();
                            fontElements[fontElement].className = fontElements[fontElement].className + ' f-weight-' + $this.parent().parent().parent().parent().find('.cFontWeight').val();
                        }
                    }
                });
                $thisMain.find('.has-drop-child').find('button').on('click', function () {
                    var $this = $(this);
                    if ($this.hasClass('active')) {
                        $this.removeClass('active');
                        $this.parent().find('.toobar-drop-element').css('display', 'none');
                    }
                    else {
                        $('.has-drop-child').find('button').removeClass('active');
                        $('.toobar-drop-element').css('display', 'none');
                        $this.addClass('active');
                        $this.parent().find('.toobar-drop-element').css('display', 'block');
                        LoadSettingsLineHeightSize($this);
                        LoadSettingsLetterSpacingSize($this);
                    }
                });
                $thisMain.find('.has-drop-child').find('span').on('click', function () {
                    var $this = $(this);
                    range = saveSelection();
                    $this.parent().css('display', 'block');
                });

                function LoadSettingsLineHeightSize($this) {
                    var pClasslen = $this.parent().parent().parent().parent().find('.pClass').length;
                    var blockquotelen = $this.parent().parent().parent().parent().find('blockquote').length;
                    var LineHeight = '';
                    if (pClasslen >= 1) {
                        LineHeight = parseInt($this.parent().parent().parent().parent().find('.pClass').css('line-height'));
                    }
                    if (blockquotelen >= 1) {
                        LineHeight = parseInt($this.parent().parent().parent().parent().find('blockquote').css('line-height'));
                    }
                    function EditorLineHeightSlider(space) {
                        if (pClasslen >= 1) {
                            $this.parent().parent().parent().parent().find('.pClass').css('line-height', space + 'px');
                        }
                        if (blockquotelen >= 1) {
                            $this.parent().parent().parent().parent().find('blockquote').css('line-height', space + 'px');
                        }
                    }
                    AdvanceSageSlider($this.parent().parent().parent().find('.LineHeightSizeC'), $this.parent().parent().parent().find('.LineHeightSizeHandleC'), 10, 100, LineHeight, EditorLineHeightSlider, $parent, '');
                }

                function LoadSettingsLetterSpacingSize($this) {
                    var pClasslen = $this.parent().parent().parent().parent().find('.pClass').length;
                    var blockquotelen = $this.parent().parent().parent().parent().find('blockquote').length;
                    var LetterSpacing = '';
                    if (pClasslen >= 1) {
                        LetterSpacing = parseInt($this.parent().parent().parent().parent().find('.pClass').css('letter-spacing'));
                    }
                    if (blockquotelen >= 1) {
                        LetterSpacing = parseInt($this.parent().parent().parent().parent().find('blockquote').css('letter-spacing'));
                    }
                    function EditorLetterSpacingSlider(space) {
                        if (pClasslen >= 1) {
                            $this.parent().parent().parent().parent().find('.pClass').css('letter-spacing', space + 'px');
                        }
                        if (blockquotelen >= 1) {
                            $this.parent().parent().parent().parent().find('blockquote').css('letter-spacing', space + 'px');
                        }
                    }
                    AdvanceSageSlider($this.parent().parent().parent().find('.LetterSpaceSizec'), $this.parent().parent().parent().find('.LetterSpaceSizeSizeHandleC'), -10, 10, LetterSpacing, EditorLetterSpacingSlider, $parent, '');
                }

                LoadFontFamily();
                function LoadFontFamily() {
                    var defaultFontFamily = 'montserrat';
                    fontWeight(defaultFontFamily);
                    $thisMain.find('.cFontWeight').val('400');
                }
                function fontWeight(fontName, $this) {
                    var fontDOM = DOMFontWeight(fontName);
                    if (fontDOM.length > 0) {
                        $thisMain.find('.cFontWeight').html(fontDOM);
                        if (fontName == 'montserrat') {
                            $thisMain.find('.cFontWeight').val('400');
                        }
                    }
                }
                function GetFontWeight($this) {
                    var getParentName = '';
                    getParentName = document.getSelection().anchorNode.parentElement.tagName;
                }
                function changeFont(FontCalc, $this) {
                    restoreSelection(range);
                    var font = '';
                    if (FontCalc == 'btnPlusFontSize') {
                        font = $this.prev().text().split('px')[0];
                        if (font < 150) {
                            font++;
                        }
                    }
                    else {
                        font = $this.next().text().split('px')[0];
                        if (font > 10) {
                            font--;
                        }
                    }
                    document.execCommand("fontSize", false, "2");
                    var fontElements = document.getElementsByTagName("font");
                    for (var i = 0, len = fontElements.length; i < len; ++i) {
                        if (fontElements[i].size == "2") {
                            fontElements[i].removeAttribute("size");
                            fontElements[i].style.fontSize = font + "px";

                            selection = document.getSelection();
                            if (selection.anchorNode.parentElement.parentElement.tagName == 'LI') {
                                var fontsizelist = $this.parent().parent().parent().parent().find('.fontValueC').text();
                                selection.anchorNode.parentElement.parentElement.style.fontSize = fontsizelist;
                            }
                        }
                    }
                    if ($documenttext.text() == '') {
                        $documenttext.find('.pClass').css('font-size', font + 'px');
                    }
                    if (FontCalc == 'btnPlusFontSize') {
                        $this.prev().text(font + "px");
                    }
                    else {
                        $this.next().text(font + "px");
                    }
                    FontUse = font + 'px';
                }
                function GetFont() {
                    var font = '14px';
                    var getParentName = '';
                    if ($documenttext.text() == '') {
                        getParentName = window.getSelection().anchorNode.tagName;
                        if (getParentName == 'P') {
                            getParentName = window.getSelection().anchorNode;
                            font = $(getParentName).css('font-size');
                        }
                    }
                    else {
                        getParentName = window.getSelection().anchorNode.parentElement.tagName;
                        if (getParentName == 'FONT' || getParentName == 'LI' || getParentName == 'A' || getParentName == 'P' || getParentName == 'U' || getParentName == 'I' || getParentName == 'B' || getParentName == 'SPAN') {
                            getParentName = window.getSelection().anchorNode.parentNode;
                            font = $(getParentName).css('font-size');
                        }
                    }
                    return font;
                }
                function GetFontFamily($this) {
                    var getParentName = '';
                    var getChildName = '';
                    var fontfamily = 'montserrat';

                    getParentName = document.getSelection().anchorNode.parentElement.tagName;
                    if (getParentName == 'FONT') {
                        fontfamily = $(document.getSelection().anchorNode.parentElement).attr('face');
                        if (typeof fontfamily == 'undefined') {
                            fontfamily = 'montserrat';
                        }
                    }
                    else if (getParentName == 'P') {
                        fontfamily = $this.val();
                    }
                    else if (document.getSelection().anchorNode.parentElement.nextElementSibling.tagName == 'FONT') {
                        fontfamily = $(document.getSelection().anchorNode.parentElement.parentElement).attr('face');
                    }
                    return fontfamily;
                }

                FontColor();

                function FontColor() {
                    var colordocEditOption = ColorPickerOption({
                        renderCallback: function ($elm, toggled) {
                            hideDropChild();
                            var objColor = '';
                            objColor = RenderCallBackColor(this);
                            if ($elm.hasClass('doceditcolor')) {
                                restoreSelection(range);
                                objColor.bgColor = rgb2hex(objColor.bgColor);

                                document.execCommand("forecolor", false, objColor.bgColor);
                                if (range.collapsed == true) {
                                    if (flagb == true) {
                                        if (isActiveFlag == true) {
                                            document.execCommand("bold", false, null);
                                        }
                                    }
                                    if (flagi == true) {
                                        if (isActiveFlag == true) {
                                            document.execCommand('italic', false, null);
                                        }
                                    }
                                    if (flagb == true) {
                                        if (isActiveFlag == true) {
                                            document.execCommand('underline', false, null);
                                        }
                                    }
                                }
                                fcolor = objColor.bgColor;
                                range = saveSelection();
                            }
                            else if ($elm.hasClass('doceditcolorBG')) {
                                restoreSelection(range);
                                objColor.bgColor = rgb2hex(objColor.bgColor);

                                document.execCommand("backColor", false, objColor.bgColor);
                                range = saveSelection();
                            }
                            flagColor = true;
                        }
                    });
                    $('.DocEditorColorPicker').colorPicker(colordocEditOption);
                }
                function CommandALL() {
                    if (flagb == true) {
                        if (isActiveFlag == true) {
                            document.execCommand("bold", false, null);
                        }
                    }
                    if (flagu == true) {
                        if (isActiveFlag == true) {
                            document.execCommand("underline", false, null);
                        }
                    }
                    if (flagi == true) {
                        if (isActiveFlag == true) {
                            document.execCommand("italic", false, null);
                        }
                    }
                    flagb = flagu = flagi = flagfontFam = '';
                }
                function rgb2hex(rgb) {
                    rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
                    return (rgb && rgb.length === 4) ? "#" +
                     ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) +
                     ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) +
                     ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';
                }

                function makeInitialTextReadOnly(input) {
                    var readOnlyLength = input.value.length;
                    input.addEventListener('keydown', function (event) {
                        var which = event.which;
                        if (((which == 8) && (input.selectionStart <= readOnlyLength))
                                || ((which == 46) && (input.selectionStart < readOnlyLength))) {
                            event.preventDefault();
                        }
                    });
                    input.addEventListener('keypress', function (event) {
                        var which = event.which;
                        if ((event.which != 0) && (input.selectionStart < readOnlyLength)) {
                            event.preventDefault();
                        }
                    });
                    input.addEventListener('cut', function (event) {
                        if (input.selectionStart < readOnlyLength) {
                            event.preventDefault();
                        }
                    });
                    input.addEventListener('paste', function (event) {
                        if (input.selectionStart < readOnlyLength) {
                            event.preventDefault();
                        }
                    });
                }
                if (typeof $('.createlinkC').val() != 'undefined') {
                    makeInitialTextReadOnly(document.getElementById('txtCreateLink'));
                }

                function saveSelection() {
                    if (window.getSelection) {
                        sel = window.getSelection();
                        if (sel.getRangeAt && sel.rangeCount) {
                            return sel.getRangeAt(0);
                        }
                    } else if (document.selection && document.selection.createRange) {
                        return document.selection.createRange();
                    }
                    return null;
                }

                function restoreSelection(range) {
                    if (range) {
                        if (window.getSelection) {
                            sel = window.getSelection();
                            sel.removeAllRanges();
                            sel.addRange(range);
                        } else if (document.selection && range.select) {
                            range.select();
                        }
                    }
                }
                $thisMain.find('.text-deitor-toolsbar').draggable(
                     { handle: ' .dragbutton' }
                 );


            }
        },
        "settingDOMs": {
            "tabs": {
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },
                        "padding": {
                            "max": 80,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }
                    },
                },
            },
            "selectLayer": function ($elem) {
                return $elem.parent().parent();
            },
        },
        "common": {
            "mouseleave": function () {
                $(document).on('mouseleave', '.documenttext', function () {
                    range = saveSelection();
                });

                function saveSelection() {
                    if (window.getSelection) {
                        sel = window.getSelection();
                        if (sel.getRangeAt && sel.rangeCount) {
                            return sel.getRangeAt(0);
                        }
                    } else if (document.selection && document.selection.createRange) {
                        return document.selection.createRange();
                    }
                    return null;
                }
            }
        },
        "remove": function (clonedom) {
            clonedom.find('.text-deitor-toolsbar').remove();
        }
    }


,    "unsubscribe form": {
        "componentname": "unsubscribe form",
        "category": "advance",
        "icon": "fa fa-ban",
        "row": false,
        "hidden": false,
        "type": "element",
        "collection": false,
        "bucket": false,
        "defaultdata": EasyLibrary.ReadDOM("unsubscribe/unsubcribedefault", false),
        "beforedrop": function ($appendedParent, $appendLayer, dropped) { },
        "pageload": function () {
            this.inheritForm();
            this.view.view();
            
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            if (dropped) {
                this.inheritForm();
                this.view.view();
                
            }
        },

        "inheritForm": function () {
            let thiscomp = this;
            let formComp = component['form'];
            let mySetting = thiscomp.settingDOMs.tabs;
            mySetting['Spacing'] = formComp.settingDOMs.tabs.Spacing;
            mySetting['Text'] = formComp.settingDOMs.tabs.Text;
            mySetting['Alignment'] = formComp.settingDOMs.tabs.Alignment;
            mySetting['Size'] = formComp.settingDOMs.tabs.Size;
            thiscomp['styleDOMs'] = formComp.styleDOMs;
            thiscomp['responsiveDOMs'] = formComp.responsiveDOMs;
        },
        "settingDOMs": {
            "tabs": {
                "basic": {
                    "DOM": '<div id="divUnSubsBasic" class="field-row "></div>',
                    "onload": function ($this) {
                        function createSettingDOM() {
                            let $lstChk = $activeDOM.find('.chkFld');
                            let html = '<h4>Feed Back List</h4><div id="divFeedBackList" class="ui-sortable">';
                            $lstChk.each(function (i, v) {
                                let $chkFld = $(v);
                                let delHtml = '';
                                if (i > 0) {
                                    delHtml = `<i title="Delete" class="delFeedBackLst cPointer fa fa-trash in-form-icon delete-icon"></i>`;
                                }
                                html += `<div class='field-row stElWrap feedBkItem sfCol_100'>
                                        <span class="sfCol_10 cPointer TxAl-c srtFedBk"><i class="fa fa-arrows-v "></i></span>
                                         <span class="sfCol_80 cb_input">
                                             <input class="chkFldLabelVal"  type="text" value="${$chkFld.find('.chkLabel').text()}">
                                         </span>
                                        <span class="sfCol_10 TxAl-r">${delHtml}</span>
                                        </div>`;

                            });
                            html += '</div><div class="sfCol_100"><span class="stngSmallBtn " id="addMoreFdBkLst">Add more</span></div>';
                            $('#divUnSubsBasic').html(html);
                            $activeDOM.find('.chkUnsubsReason').each(function (i, v) {
                                let $this = $(v);
                                $this.attr('id', 'chkUnsubsReason' + i);
                                $this.next('label').attr('for', 'chkUnsubsReason' + i);
                            });

                            SortItem();
                            eventListner();
                        }
                        function SortItem() {
                            $("#divFeedBackList").AdvanceSorting({
                                targetParent: $activeDOM.find('.feedBackChkLst'),
                                targetElem: '.chkFld',
                                sortableOptions: {
                                    items: ".feedBkItem",
                                    handle: ".srtFedBk",
                                    containment: '#divFeedBackList'
                                }
                            });
                        }
                        function eventListner() {

                            $('#addMoreFdBkLst').off().on('click', function () {
                                let frsItem = $activeDOM.find('.feedBackChkLst .chkFld')[0].outerHTML;
                                $activeDOM.find('.feedBackChkLst').append(frsItem);
                                createSettingDOM();
                            });
                            $('.chkFldLabelVal').off('keyup').on('keyup', function () {
                                let $lst = $('#divFeedBackList .feedBkItem');
                                let $stngItem = $(this).closest('.feedBkItem');
                                let index = $lst.index($stngItem);
                                let val = $(this).val();
                                if (val !== '')
                                    $activeDOM.find('.feedBackChkLst .chkLabel').eq(index).text(val);
                            });
                            $('.delFeedBackLst').off().on('click', function () {
                                let $lst = $('#divFeedBackList .feedBkItem');
                                let $stngItem = $(this).closest('.feedBkItem');
                                let index = $lst.index($stngItem);
                                SageConfirmDialog('Are you sure').done(function () {
                                    $stngItem.remove();
                                    $activeDOM.find('.feedBackChkLst .chkFld').eq(index).remove();
                                });
                            });

                        }
                        createSettingDOM();
                    }
                }
            }
        },
        "remove": function () {
            $('.comp-unsubscribe .sfError').remove();
            $('#divUnsubscribeSuccess').hide();
            $('.unsubs-form,.feedBackChkLst').show();
        },
        "view": {
            "view": function () {
                try {
                    var pathArray = window.location.pathname.toLowerCase().split('/');
                    var indexOfunSubs = pathArray.indexOf("user");
                    if (indexOfunSubs > 0) {
                        var subscribeId = pathArray[indexOfunSubs + 1];
                        if (typeof subscribeId !== 'undefined' || subscribeId) {
                            if (this.library.guidValidate(subscribeId)) {
                                $('#btnSubmitunsubscribe').attr('data-id', subscribeId);
                                this.library.eventLister();
                            } else {
                                SageAlertDialog("oops! unsubscription link is not correct", "Error");
                            }
                        } else {
                            SageAlertDialog("oops! unsubscription link is not correct.", "Error");
                        }
                    }
                } catch (e) {
                    console.log(e.message);
                }
            },

            "library": {
                eventLister: function () {
                    let thisLib = this;
                    $('#btnSubmitunsubscribe').off('click').on('click', function () {
                        let feedBacks = '';
                        $('.comp-unsubscribe .sfError').remove();
                        $('.chkUnsubsReason:checked').each(function (i, v) {
                            feedBacks += $(v).next('label').text() + '#';
                        });
                        if (feedBacks != '') {
                            feedBacks = feedBacks.substring(0, feedBacks.length - 1);
                            thisLib.unSubscribtion($(this).attr('data-id'), feedBacks);
                        } else {
                            $(this).before('<p class="sfError"style="width:100%;margin-bottom:5px;">Please check at least one option.</p>')
                        }
                    });
                },
                "unSubscribtion": function (subscribeID, feedBack) {
                    try {
                        let reason = "";
                        var thisLib = this;
                        var config = {
                            method: '',
                            url: SageFrameAppPath + "/Modules/WBMailTemplate/services/NewsLetterService.asmx/",
                            data: '',
                            ajaxSuccess: '',
                            ajaxFailure: ''
                        };
                        config.data = {
                            token: subscribeID,
                            reason: feedBack
                        };
                        config.method = "UnsubscribeUser";
                        config.ajaxSuccess = function (data) {
                            if (data.d > 0) {
                              
                                $('#divUnsubscribeSuccess').show();
                                $('.unsubs-form,.feedBackChkLst').hide();
                            
                            } else {
                                SageAlertDialog("You are not in our news letter subscriber list.", "Error");
                            }
                        }
                        CommonLibrary.AjaxCall(config);
                    } catch (e) {
                        console.log(e.message);
                    }
                },
                

                "guidValidate": function (guid) {
                    var pattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
                    if (pattern.test(guid)) {
                        return true;
                    } else {
                        return false;
                    }
                },
            }
        },
    }
,    "verticalcollector": {
        "componentname": "verticalcollector",
        "row": false,
        "hidden": true,
        "type": "element",
        "category": "advance",
        "collection": true,
        "icon": "fa fa-angellist",
        "bucket": true,
        "defaultdata": EasyLibrary.ReadDOM('verticalCollector/default'),
        "beforedrop": function () { },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            let c = this.collectorCommon;
            let $layers = $(document).find('.vertical-collector-layer');//.not('.vertical-binded');
            $layers.each(function (ind, l) {
                //$(l).addClass('vertical-binded');
                c.deleteComponent($(l).find('.buttonWrapper'));
                c.deleteComponent($(l).find('.fontIconWrapper'));
                $(l).find('li.DeleteThis').each(function (i, j) {
                    c.deleteComponent($(this).closest('.sortableItem'));
                });
            });

            c.getSetDataType.setType($appendLayer);
            c.dataType = c.getSetDataType.getType();
            c.fillDropDown($appendLayer);
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": `
                        <div class="field-row stElWrap sfCol_100">
                                <span class ="sfCol_50 TxAl-l select__box">
                                    <select id="addCompoSelect">
                                        <option value="Image Link">Image Link</option>
                                        <option value="button">button</option>
                                        <option value="font icon">font icon</option>
                                        <option value="underline">underline</option>
                                        <option value="heading">heading</option>
                                        <option value="text">text</option>
                                        <option value="social link">social link</option>
                                        <option value="text link">text link</option>
                                    </select>
                                </span>
                                <span class ="sfCol_50 TxAl-r">
                                <span class =" btn cb-btn-primary" id="addCompo">Add</span>
                                </span>
                            </div><div class="eldestSetParent"></div>`,

                    "onload": function ($el, pro) {
                        
                        //if (typeof pro == 'undefined') pro = false;
                        let comm = component["verticalcollector"].collectorCommon;
                        //comm.isPro = pro;
                        let $wrapper = $activeDOM.find('.componentWrap');

                        comm.fillDropDown();
                        comm.sort($(".eldestSetParent"), $wrapper, '.sortableItem');
                        $('#addCompo').off().on('click', function () {
                            comm.addComponent($('#addCompoSelect').val());
                        });
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalCollector/size"),
                    "onload": function ($ele) {
                        let comm = component['verticalcollector'].collectorCommon;
                        comm.settingController($('#slcSize'), $('.sizeDOM'), comm.sizeController, 'size');
                    },
                    "active": function () {
                        $('#slcSize').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSize').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalCollector/spaceSetting'),
                    "onload": function (includeCollection) {
                        let comm = component['verticalcollector'].collectorCommon;
                        comm.settingController($('#slcSpace'), $('.spacingDOM'), comm.spacingController, includeCollection)
                    },
                    "active": function () {
                        $('#slcSpace').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcSpace').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalCollector/alignmentSetting'),
                    "onload": function ($item) {
                        component['verticalcollector'].collectorCommon.settingController($('#slcAlign'), $('.alignwrap'), component['verticalcollector'].collectorCommon.alignmentController)
                    },
                    "active": function () {
                        $('#slcAlign').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcAlign').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Scroll Effect": {
                    "options": [],
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                }
            }
        },
        "styleDOMs": {
            "tabs": {
                "Border": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalCollector/border"),
                    "onload": function ($ele, pro) {
                        if (typeof pro == 'undefined') pro = false;
                        let comm = component['verticalcollector'].collectorCommon;
                        comm.isPro = pro;
                        //let $wrapper = $activeDOM.find('.componentWrap');
                        comm.fillDropDown($activeDOM);
                        comm.settingController($('#slcBorder'), $('.borderDOM'), comm.borderHandler, 'border')
                    },
                    "active": function () {
                        $('#slcBorder').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcBorder').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Border Radius": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalCollector/borderRadius"),
                    "onload": function ($ele) {
                        let comm = component['verticalcollector'].collectorCommon;
                        comm.settingController($('#slcBorderRadius'), $('.borderRadiusDOM'), comm.borderRadiusHandler, 'rad')
                    },
                    "active": function () {
                        $('#slcBorderRadius').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcBorderRadius').removeClass('slcActiveEleSetting');
                        $('#slcBorderRadius').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Box Shadow": {
                    custom: true,
                    DOM: EasyLibrary.ReadDOM("verticalCollector/shadow"),
                    onload: function () {
                        let comm = component['verticalcollector'].collectorCommon;
                        comm.settingController($('#selectShadow'),$('#shadowDOM'),comm.boxShadowHandler);
                    },
                    "active": function () {
                        $('#selectShadow').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#selectShadow').trigger('change').addClass('slcActiveEleSetting');
                    }
                },
                "Color": {
                    "DOM": EasyLibrary.ReadDOM('verticalCollector/colorDOM'),
                    "onload": function ($elem) {
                        let comm = component['verticalcollector'].collectorCommon;
                        comm.colorHandler();
                    },
                    "active": function () {
                        $('#slcColor').val($('.slcActiveEleSetting').eq(0).val());
                        $('.slcActiveEleSetting').removeClass('slcActiveEleSetting');
                        $('#slcColor').trigger('change').addClass('slcActiveEleSetting');
                    }
                }
            },

        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Visibility": {},
                        "CustomVisibility": {
                            "custom": true,
                            "DOM": EasyLibrary.ReadDOM('verticalCollector/customVisibility'),
                            "onload": function () {
                                component['verticalcollector'].collectorCommon.getSetDataType.setType($activeDOM);
                                component['verticalcollector'].collectorCommon.fillDropDown();
                                component['verticalcollector'].collectorCommon.customVisibility();
                            }
                        }
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalCollector/spaceSetting'),
                    "onload": function ($item) {
                        component['verticalcollector'].settingDOMs.tabs.Spacing.onload();
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Spacing.active();
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalCollector/alignmentSetting'),
                    "onload": function ($item) {
                        component['verticalcollector'].settingDOMs.tabs.Alignment.onload();
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Alignment.active();
                    }
                }
            }
        },
        "collectorCommon": {
            dataType: '',
            sort: function ($sortDOM, $targetParent, $targetElem) {
                $sortDOM.AdvanceSorting({
                    targetParent: $targetParent,
                    targetElem: $targetElem,
                    sortableOptions: {
                        items: '.draggable',
                        handle: ".sortHandle",
                        containment: $('.eldestSetParent'),
                    }
                });
            },
            fillDropDown: function ($apendLayer) {
                let $parent = $apendLayer;
                if ($apendLayer == undefined)
                    $parent = $activeDOM;
                let $wrapper = $parent.find('.componentWrap');
                let comm = this;
                let $wrpChildren = $wrapper.first().children();
                let $eldestSetParent = $('.eldestSetParent');
                let $slcAddCompo = $('#addCompoSelect');

                $eldestSetParent.html('');
                comm.dropdown.add = '';
                comm.dropdown.common = '';
                comm.dropdown.size = '';
                comm.dropdown.color = '';
                comm.dropdown.rad = '';
                comm.dropdown.size_t = '';
                comm.dropdown.size_m = '';
                comm.dropdown.common_t = '';
                comm.dropdown.common_m = '';

                let dt = comm.dataType;
                let eOpts = '';
                if ($wrapper.length > 1) {
                    eOpts = `<option value=".activeSetting" data-target=".activeSetting" data-back=".cRow" data-ClassValue=".cRow">verticalcollectors</option><option value=".componentWrap" data-target=".componentWrap" data-back=".componentWrap" data-ClassValue=".componentWrap">${dt} cards</option>`;
                }
                else {
                    eOpts = `<option value=".componentWrap" data-target=".componentWrap" data-back=".componentWrap" data-ClassValue=".componentWrap">${dt} card</option>`;
                }
                comm.dropdown.common_t += eOpts;
                comm.dropdown.common_m += eOpts;
                comm.dropdown.common += eOpts;
                comm.dropdown.color += eOpts;
                comm.dropdown.rad += eOpts;
                let visibleOnly = []
                $wrpChildren.each(function (i) {
                    let $component = $(this);
                    let $comSetting = $component.find('.com-settings');
                    comm.getSetDataType.setType($component);
                    let atr = comm.getSetDataType.getType();
                    let val = '.' + $component.attr('data-val');
                    let targetVal = val.substring(1);
                    let tmp = $component.attr('data-grpcls');
                    let defaultComp = true;
                    if (typeof tmp !== 'undefined') {
                        targetVal = tmp;
                        defaultComp = false;
                    }
                    if ($comSetting.attr('data-title'))
                        atr = $comSetting.attr('data-title')
                    if ($component.hasClass('underline'))
                        atr = 'underline';

                    //create DD options if visible
                    let checked = '';
                    let hasClassDN = $component.hasClass(DeviceAlpha() + 'Dn');
                    if (!hasClassDN) {
                        comm.CreateOptionDOM(defaultComp, atr, targetVal);
                        checked = 'checked';
                    }
                    
                    //let random = comm.randomUnique.generate;
                    let random = comm.ran();
                    let set = `<div class="draggable field-row stElWrap col100">
                                            <span class="sfCol_15 TxAl-l cPointer"><i class="fa fa-arrows-v sortHandle"></i></span>
                                            <label class="sfCol_60">${atr}</label>
                                            <span class="sfCol_25 TxAl-r toggle_btn">
                                                <input id="${random}" data-toggle="${val}" class="toggleCompo" name="enable buttonLink" type="checkbox" ${checked} />
                                                <label for="${random}" class="tgl_slider"></label>
                                            </span>
                                       </div>`;

                    $eldestSetParent.append(set);
                    comm.CreateOptionDOM(defaultComp, atr, targetVal, true);
                    //if (comm.dataType == 'verticalcollector');

                    //$slcAddCompo.html(comm.dropdown.add);

                    //visibility
                    $('#' + random).click(function () {
                        let $el = $wrapper.find($(this).attr('data-toggle'));
                        if ($(this).prop('checked'))
                            $el.removeClass('Dn');
                        else
                            $el.addClass('Dn');
                        comm.reloadAllSettingTabs('settingDOMs', ["Scroll Effect"]);
                    });
                });
            },

            CreateOptionDOM: function (defaultComp, dataType, val, addDOMOnly) {
                let html = '';
                let option = this.option[dataType];
                let dd = this.dropdown;
                if (addDOMOnly) {
                    if (option.add) {
                        html = `<option value="${dataType}">${dataType}</option>`;
                        //dd.add = dd.add + html;
                    }
                }
                else {
                    let da = DeviceAlpha();
                    if (option.size) {
                        html = `<option value=".${val}">${dataType}</option>`;
                        if (DeviceAlpha() != '') {
                            dd['size_' + da] += html;
                        }
                        else
                            dd.size = dd.size + html;
                    }
                    if (option.color) {
                        let colorInfo = option.color;
                        if (defaultComp) {
                            html = `<option value=".${val}" data-back="${colorInfo.back}" data-font="${colorInfo.font}" data-wrap="${colorInfo.wrap}">${dataType}</option>`;
                        } else {
                            let tmp_f = colorInfo.font;
                            //font target may be class or element
                            if (typeof tmp_f != 'undefined' && tmp_f != 'undefined' && tmp_f.indexOf('.') == 0) {
                                tmp_f = colorInfo.font + '_' + val;
                            }
                            let tmp_w = colorInfo.wrap;
                            if (typeof tmp_w != 'undefined' && tmp_w != 'undefined' && tmp_w.indexOf('.') == 0) {
                                tmp_w = colorInfo.wrap + '_' + val;
                            }
                            let tmp_b = colorInfo.back;
                            if (typeof tmp_b != 'undefined' && tmp_b != 'undefined' && tmp_b.indexOf('.') == 0) {
                                tmp_b = colorInfo.back + '_' + val;
                            }
                            html = `<option value=".${val}" data-back="${tmp_b}" data-font="${tmp_f}" data-wrap="${tmp_w}">${dataType}</option>`;
                        }
                        dd.color = dd.color + html;
                    }
                    if (option.rad) {
                        if (option.radTarget.length > 0) {
                            html = `<option value=".${val}" data-target=".${val} > ${option.radTarget}">${dataType}</option>`;
                        } else {
                            html = `<option value=".${val}" data-target=".${val}">${dataType}</option>`;
                        }
                        dd.rad = dd.rad + html;
                    }
                    html = `<option value=".${val}">${dataType}</option>`;
                    if (da != '') {
                        dd['common_' + da] += html;
                    }
                    else
                        dd.common = dd.common + html;
                }

            },

            boxShadowHandler:function($applyOn, domSelector){
                $(domSelector).AdvanceBoxShadow({
                    targetParent: $activeDOM,
                    targetElem: $applyOn
                });
            },
            "customVisibility": function () {
                let dAlpha = DeviceAlpha();
                LoadVisibility();
                function LoadVisibility() {
                    let parentClasses = $activeDOM.attr('class');
                    let regex = new RegExp(dAlpha + 'Dn', 'g');
                    let visibilityClass = parentClasses.match(regex);
                    if (visibilityClass !== null)
                        $('#deviceVisibility').prop('checked', false);
                    else
                        $('#deviceVisibility').prop('checked', true);
                    hideShowCom();
                }

                $('#deviceVisibility').off().on('click', hideShowCom);

                function hideShowCom() {
                    if ($('#deviceVisibility').is(':checked')) {
                        $activeDOM.removeClass(dAlpha + 'Dn');
                        $('.componentVisibility').fadeIn(400);
                    }
                    else {
                        $activeDOM.addClass(dAlpha + 'Dn');
                        $('.componentVisibility').fadeOut(400);
                    }
                }
                if ($activeDOM.find('.imageLink').length)
                    $('#imageLink').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.imageLink',
                        label: 'Image',
                        showCls: "Db",
                        callbackFunc: function () {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });
                if ($activeDOM.find('.heading').length)
                    $('#heading').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.heading',
                        label: 'Heading',
                        showCls: "Db",
                        callbackFunc: function (sdsdsd) {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });
                if ($activeDOM.find('.text').length)
                    $('#text').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.text',
                        label: 'Text',
                        showCls: "Db",
                        callbackFunc: function (sdsdsd) {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });

                if ($activeDOM.find('.buttonWrapper').length)
                    $('#button').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.buttonWrapper',
                        showCls: "Db",
                        label: 'Button',
                        callbackFunc: function (sdsdsd) {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });

                if ($activeDOM.find('.sociallink').length)
                    $('#sociallink').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.sociallink',
                        showCls: "Db",
                        label: 'Social Links',
                        callbackFunc: function (sdsdsd) {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });

                if ($activeDOM.find('.textlink').length)
                    $('#textlink').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.textlink',
                        showCls: "Db",
                        label: 'Text Link',
                        callbackFunc: function (sdsdsd) {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });

                if ($activeDOM.find('.fontIconWrapper').length)
                    $('#fonticonComponent').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.fontIconWrapper',
                        showCls: "Db",
                        label: 'Icon',
                        callbackFunc: function (sdsdsd) {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });

                if ($activeDOM.find('.underline').length)
                    $('#underline').AdvanceVisibility({
                        targetParent: $activeDOM,
                        targetElem: '.underline',
                        showCls: "Db",
                        label: 'Underline',
                        callbackFunc: function (sdsdsd) {
                            component['verticalcollector'].collectorCommon.reloadAllSettingTabs('responsiveDOMs', 'Basic')
                        }
                    });
            },
            "sizeController": function ($applyOn, domSelector) {
                let dataType = $applyOn.attr('data-type');
                switch (dataType) {
                    case 'Image Link':
                        imageChange($applyOn);
                        break;
                    case 'underline':
                        underlineSize($applyOn, domSelector);
                        break;
                    case 'button':
                        buttonSize($applyOn, domSelector);
                        break;
                    case 'font icon':
                    case 'social link':
                        fonticonSize($applyOn, domSelector);
                        break;
                    default:
                        let finalClass = '';
                        let classes = $applyOn.attr('class');
                        let regex1 = new RegExp('\\bheading_[a-z0-9_]+\\b', 'g');
                        let m1 = classes.match(regex1);
                        let regex2 = new RegExp('\\btext_[a-z0-9_]+\\b', 'g');
                        let m2 = classes.match(regex2);
                        let regex3 = new RegExp('\\btextlink_[a-z0-9_]+\\b', 'g');
                        let m3 = classes.match(regex3);
                        if ($applyOn.hasClass('text')) {
                            finalClass = 'text';
                        } else if ($applyOn.hasClass('heading')) {
                            finalClass = 'heading';
                        } else if ($applyOn.hasClass('textlink')) {
                            finalClass = 'textlink';
                        } else if (m1 != null) {
                            finalClass = m1[0];
                        } else if (m2 != null) {
                            finalClass = m2[0];
                        } else if (m3 != null) {
                            finalClass = m3[0];
                        }
                        if ($applyOn.hasClass('text') || $applyOn.hasClass('heading') || m1 != null || m2 != null) {
                            $applyOn = $applyOn.parent().find(`.${finalClass}`).find('.editor-para');
                        }
                        else if ($applyOn.hasClass('textlink') || m3 != null) {
                            $applyOn = $applyOn.parent().find(`.${finalClass}`).find('a');
                        }
                        initText($applyOn, domSelector);
                }

                function initText($applyOn, domSelector) {
                    $(domSelector).AdvanceTextSetting({
                        targetParent: $activeDOM,
                        targetElem: $applyOn,
                        options: {
                            size: true,
                            width: true,
                            spacing: true,
                            transform: true,
                            family: true,
                            weight: true,
                            color: true
                        }
                    });
                }
                function imageChange($target) {
                    $(domSelector).html(component['image'].settingDOMs.tabs.Basic.DOM);
                    component["verticalcollector"].commonImageSize.ImageInit($activeDOM.find($target));
                }
                function underlineSize($underline, domSelector) {
                    let heightDOM = CreateSliderDOM('heightSlider', 'heightHandle', "Height");
                    let widthDOM = CreateSliderDOM('widthSlider', 'widthHandle', "Width");
                    $(domSelector).html(widthDOM);
                    $(domSelector).append(heightDOM);

                    let $sep = $underline.find('.rowSeparator');
                    HeightInit();
                    Width();
                    function HeightInit() {
                        var parentClasses = $sep.attr('class');
                        var dAlpha = DeviceAlphaSpace();
                        var regex = new RegExp(dAlpha + 'H-[0-9]{1,4}', 'g');
                        var HeightClass = parentClasses.match(regex);
                        var height = 0;
                        if (HeightClass !== null) {
                            height = HeightClass[0].replace(dAlpha + 'H-', '');
                        }
                        AdvanceSageSlider($('#heightSlider'), $('#heightHandle'), 1, 100, height, component["row separator"].common.HeightChange, $sep, 'px');
                    }
                    function Width() {
                        //var sepWidth = 100;
                        //var parentClasses = $sep.attr('class');
                        //var dAlpha = DeviceAlphaSpace();
                        //var regex = new RegExp(dAlpha + 'sfCol_[0-9]{1,3}', 'g');
                        //var sfWidth = parentClasses.match(regex);
                        //if (sfWidth !== null) {
                        //    sepWidth = parseInt(dAlpha + sfWidth[0].split('_')[1]);
                        //}

                        let width = GetValueByClassName($sep, 'sfCol_[0-9]{1,3}', 'sfCol_');
                        function RowSepWidth(space) {
                            parentClasses = $sep.attr('class');
                            dAlpha = DeviceAlphaSpace();
                            regex = new RegExp(dAlpha + 'sfCol_[0-9]{1,3}', 'g');
                            var sfColVal = parentClasses.match(regex);
                            if (sfColVal !== null) {
                                sepWidth = $sep.removeClass(sfColVal[0]);
                            }
                            $sep.addClass(dAlpha + 'sfCol_' + space);
                        }
                        AdvanceSageSlider($('#widthSlider'), $('#widthHandle'), 1, 100, width, RowSepWidth, $sep, '%');
                    }
                }
                function buttonSize($button, domSelector) {
                    $(domSelector).html(CreateSliderDOM('buttonWrapperSizeSlider', 'buttonWrapperSizeHandle', 'Width') + '<div id="btnText"></div>');
                    let $parent = $activeDOM.find('.button');
                    $("#btnText").AdvanceTextSetting({
                        targetParent: $activeDOM,
                        targetElem: $parent,
                        options: {
                            size: true,
                            lineheight: true,
                            width: false,
                            spacing: true,
                            transform: true,
                            family: true,
                            weight: true,
                            color: false
                        }
                    });
                    let $Icon = $parent.find('a > i');
                    let $text = $parent.find('a > span');
                    let $anchor = $parent.find('a');
                    buttonWidth();
                    function buttonWidth() {
                        function WidthChange(space) {
                            ReplaceClassByPattern($parent, 'W-[0-9]{1,4}', 'W-' + space);
                        }
                        AdvanceSageSlider($('#buttonWrapperSizeSlider'), $('#buttonWrapperSizeHandle'), 5, 1080,
                            GetValueByClassName($parent, 'W-[0-9]{1,4}', 'W-'), WidthChange, $parent, 'px');
                    }

                }
                function fonticonSize($fontIcon, domSelector) {
                    let sizeSet = {
                        fontsize: function () {
                            let $parent = $fontIcon;
                            let $icon = $parent.find('.font-icon');
                            function LineHeightChange(space) {
                                ReplaceClassByPattern($icon, 'Fs-[0-9]{1,4}', 'Fs-' + space);
                            }
                            AdvanceSageSlider($('#fontIconHeightSlider'), $('#fontIconHeightHandle'), 5, 1080, GetValueByClassName($icon, 'Fs-[0-9]{1,4}', 'Fs-'), LineHeightChange, $parent, 'px');
                        },
                        fontwrapper: function () {
                            let $parent = $fontIcon.find('.editor-component')
                            function LineHeightChange(space) {
                                ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + space);
                                ReplaceClassByPattern($parent, 'W-[0-9]{1,4}', 'W-' + space);
                            }
                            AdvanceSageSlider($('#fontIconbackHeightSlider'), $('#fontIconbackHeightHandle'), 5, 1080, GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-'), LineHeightChange, $parent, 'px');
                        },
                        init: function () {
                            let wrapperDOM = CreateSliderDOM('fontIconHeightSlider', 'fontIconHeightHandle', ' Font Icon Size');
                            let iconDOM = CreateSliderDOM('fontIconbackHeightSlider', 'fontIconbackHeightHandle', 'WrapperSize');
                            $(domSelector).html(wrapperDOM + iconDOM);
                            this.fontsize();
                            this.fontwrapper();
                        }
                    }
                    sizeSet.init();

                }
            },
            "spacingController": function ($applyOn, domSelector) {
                $(domSelector).AdvanceSpacing({
                    targetParent: $activeDOM,
                    targetElem: $applyOn,
                    options: {
                        "margin": {
                            "max": 40,
                            "min": -40,
                            "times": 5,
                            "position": ["all", "top", "bottom", "left", "right"]
                        },
                        "padding": {
                            "max": 40,
                            "min": 0,
                            "times": 5,
                            "position": ["all", "top", "bottom", "left", "right"]
                        },
                    }
                });
            },
            "alignmentController": function ($applyOn, domSelector) {
                function removeAlignmentClass($par) {
                    let $target = $par.children();
                    $target.each(function (index) {
                        $(this).attr('class', $(this).attr('class').replace(/TxAl-[rlnc]/g, ''));
                    });
                }
                if ($applyOn.hasClass('componentWrap')) {
                    removeAlignmentClass($applyOn)
                }
                else if ($applyOn.hasClass('activeSetting')) {
                    let colHead = $applyOn.find('.collectionHeading');
                    let colSubHead = $applyOn.find('.topSubHeading ');
                    ReplaceClassByPattern(colHead, '/TxAl-[rlnc]/g', '');
                    ReplaceClassByPattern(colSubHead, '/TxAl-[rlnc]/g', '');
                    removeAlignmentClass($applyOn.find('.componentWrap'));
                }
                else if ($applyOn.hasClass('button') || $applyOn.hasClass('fonticonComponent')) {
                    $applyOn = $applyOn.parent();
                }
                $(domSelector).AdvanceAlignment({
                    targetParent: $activeDOM,
                    targetElem: $applyOn,
                    labels: {
                        'horizontal': 'Horizontal',
                    },
                    options: {
                        "horizontal": ["left", "center", "right"],
                    }
                });
            },
            "borderHandler": function ($applyOn, domSelector) {
                $(domSelector).AdvanceBorder({
                    targetParent: $activeDOM,
                    targetElem: $applyOn,
                    options: {
                        "max": 20,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top", "right", "bottom", "left"],
                    }
                });
            },
            "borderRadiusHandler": function ($applyOn, domSelector) {
                $(domSelector).AdvanceBoxRadius({
                    targetParent: $activeDOM,
                    targetElem: $applyOn,
                    options: {
                        "max": 200,
                        "min": 0,
                        "times": 1,
                        "position": ["all", "top-left", "top-right", "bottom-left", "bottom-right"],
                    }
                });
            },
            "colorHandler": function ($par) {
                $('#slcColor').html(this.dropdown.color);

                $('#slcColor').off('change').on('change', function () {
                    let $selectedOpt = $(this).find('option:selected');
                    let selectedOptVal = $selectedOpt.val();
                    let back = 'undefined', font = 'undefined';
                    let wrap = $selectedOpt.attr('data-wrap');

                    if (typeof wrap != 'undefined' && wrap != 'undefined') {
                        wrap = $activeDOM.find(wrap);
                        back = wrap.find($selectedOpt.attr('data-back'));
                        font = wrap.find($selectedOpt.attr('data-font'));
                    }
                    else {
                        back = $activeDOM.find(selectedOptVal);
                        if (typeof $selectedOpt.attr('data-back') !== 'undefined') {
                            back = $selectedOpt.attr('data-back');
                        }
                        if (typeof $selectedOpt.attr('data-font') !== 'undefined') {
                            font = $selectedOpt.attr('data-font');
                        }
                    }

                    let selected = $selectedOpt.text();
                    let colorParam = { back, font, wrap };

                    $activeDOM.find('.actEle').removeClass('actEle');
                    $activeDOM.find(selectedOptVal).addClass('actEle');

                    $('#genBgSetWrap').html('');
                    $('#genBgSet').html('');
                    $('#fontColorHolder').html('');
                    colorChanger(colorParam, selected, selectedOptVal);
                });

                function colorChanger(colorParam, selected, selectedOptVal) {
                    if (selected == "underline")
                        changeColor("Line Color", `${selectedOptVal} .rowSeparator`, "background-color");
                    else {
                        $.each(colorParam, function (key, val) {
                            if (typeof val != 'undefined' && val != 'undefined') {
                                if (key == 'wrap') {
                                    $("#genBgSetWrap").AdvanceBackground({
                                        targetParent: $activeDOM,
                                        targetElem: val,
                                        options: ["color", "image"]
                                    });
                                    $("#genBgSetWrap").prepend(`<h4 style="border-bottom: 1px solid rgb(72, 70, 70); padding-bottom: 3px;">${selected} Wrapper</h4>`);
                                }
                                if (key == 'back') {
                                    let destVal = $activeDOM.find(val);
                                    if (val === ".cRow") {
                                        destVal = $activeDOM;
                                    }
                                    $("#genBgSet").AdvanceBackground({
                                        targetParent: $activeDOM,
                                        targetElem: destVal,
                                        options: ["color", "image"]
                                    });
                                    $("#genBgSet").prepend(`<h4 style="border-bottom: 1px solid rgb(72, 70, 70); padding-bottom: 3px;">${selected}</h4>`);
                                }
                                if (key == 'font') {
                                    changeColor('Font Color', $activeDOM.find(selectedOptVal).find(val), "color")
                                }
                            }
                        });
                    }
                    function changeColor(name, selector, bgOrFont) {
                        $('#fontColorHolder').append(`<div class="field-row stElWrap col90-10">
                                                            <span class="fCol TxAl-r">
                                                                <span class="color-picker-holder chooseColor" id="Font"></span>
                                                            </span>
                                                            </div>`);
                        $("#fontColorHolder").children().prepend(`<label class="fCol">${name}</label>`);


                        let $element = $activeDOM.find(selector);
                        if (bgOrFont == "background-color") {
                            $('#Font').css('background-color', $element.css('background-color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $element.css({ "background-color": objColor.bgColor });
                                }
                            });
                        }
                        else {
                            $('#Font').css('background-color', $element.css('color'));
                            var colorPickerOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    var objColor = RenderCallBackColor(this);
                                    $element.css({ "color": objColor.bgColor });
                                }
                            });
                        }
                        $('#Font').colorPicker(colorPickerOption);
                    }
                }

            },
            "deleteComponent": function ($element) {
                $element.find('.deletehelper').off('click').addClass("DeleteThis").removeClass('deletehelper');
                $element.find('.DeleteThis').off('click').on('click', function () {
                    SageConfirmDialog(easyMessageList.deletehelper).done(function () {
                        let isPro = $element.attr('data-ispro');
                        if (typeof isPro !== 'undefined' && (isPro === true || isPro === "true")) {
                            let delcls = $element.attr('data-delcls');
                            $element.closest('.verticalcollector').find('.' + delcls).remove();
                        } else {
                            $element.remove();
                        }
                    });
                });
            },
            "getSetDataType": (function (dataType) {
                return {
                    getType: function () {
                        return dataType;
                    },
                    setType: function ($app) {
                        dataType = $app.attr('data-type');
                        if (dataType == undefined) {
                            dataType = $app.find('.com-settings').attr('data-type');
                        }
                        this.dataType = dataType;
                    }
                }
            })(),
            "settingController": function ($DDselector, $setDOMSelector, callback, dropdown, includeCol) {
                let da = DeviceAlpha();
                let options = this.dropdown.common;
                if (dropdown == 'size') {
                    options = this.dropdown.size;
                }
                if (da != '') {
                    options = this.dropdown['common_' + da]
                    if (dropdown == 'size') {
                        options = this.dropdown['size_' + da];
                    }
                }
                if (dropdown == 'rad' || dropdown == 'border') {
                    options = this.dropdown.rad;
                }
                $DDselector.html(options);
                //if (dropdown != 'size')
                //this.renameDDoptions($DDselector, includeCol)
                $DDselector.off('change').on('change', function () {
                    $activeDOM.find('.actEle').removeClass('actEle');
                    let selected = $(this).val();
                    if (dropdown == 'rad' || dropdown == 'border') {
                        selected = $('option:selected', this).attr('data-target');
                    }
                    let targetElement;
                    if (selected === ".activeSetting") {
                        targetElement = $activeDOM;
                    }
                    else {
                        targetElement = $activeDOM.find(selected);
                    }

                    targetElement.addClass('actEle');

                    if (typeof callback == 'function')
                        callback(targetElement, $setDOMSelector);

                });
            },
            "reloadAllSettingTabs": function (setOrStyleDOM, excludeThis) {
                
                this.fillDropDown();
                if (Object.prototype.toString.call(excludeThis) !== '[object Array]') {
                    excludeThis = $.map(excludeThis.split(','), $.trim);
                }
                let componentName = $activeDOM.attr('data-type');
                let tabArray = Object.keys(component[componentName][setOrStyleDOM].tabs);
                $.each(excludeThis, function (i, val) {
                    let ii = tabArray.indexOf(val);
                    if (ii >= 0) {
                        tabArray.splice(tabArray.indexOf(val), 1);
                    }
                });
                tabArray.forEach(function (val) {
                    component[componentName][setOrStyleDOM].tabs[val].onload();
                });

            },
            "addComponent": function (dataType) {
                let $dom = $(component[dataType].defaultdata);
                let val = this.option[dataType].val;
                let self = this;
                switch (dataType) {
                    case 'button':
                        $dom = $dom.removeClass('hovered').wrap("<div class='buttonWrapper' data-val='buttonWrapper'></div>").parent();
                        break;
                    case 'font icon':
                        $dom = $dom.removeClass('fonticon').addClass('fonticonComponent').wrap("<div class='fontIconWrapper' data-val='fontIconWrapper'></div>").parent();
                        break;
                    default:
                        $dom.attr('data-val', val);
                }

                $dom.addClass('sortableItem').attr('data-type', dataType);
                let $compWrap = $activeDOM.find('.componentWrap');
                //let grpCls = val + this.randomUnique.generate;
                let grpCls = val + self.ran();
                let grpDelCls = grpCls + '_del';
                let clones = [];
                let isPro = this.isPro;
                let randomClass = self.ran();
                let random = val + randomClass;
                $compWrap.each(function () {
                    let $eachComp = $(this);
                    let $prevCount = $eachComp.find('[data-val="' + val + '"]');
                    let $cloned = $dom.clone();
                    $cloned.attr('data-ispro', isPro);
                    $cloned.attr('data-delcls', grpDelCls);
                    $cloned.attr('data-grpcls', grpCls);
                    $cloned.removeClass(val).addClass(grpDelCls).addClass(grpCls);
                    //test
                    //let randomClass = self.randomUnique.generate;
                    
                    $cloned.addClass(random).attr('data-val', random);
                    $cloned = self.fixSettingClass($cloned, dataType, grpCls);
                    clones.push($cloned);
                    $eachComp.append($cloned);
                });
                SettingEvents($activeDOM);
                let $this = this;
                $.each(clones, function (i, v) {
                    $this.deleteComponent($(v));
                });
                this.reloadAllSettingTabs('settingDOMs', ["Scroll Effect"]);
            },
            fixSettingClass: function ($dom, type, grpCls) {
                let self = this;
                let cls = self.option[type].color;
                if (typeof cls === 'undefined') {
                    return $dom;
                }
                $.each(cls, function (k, v) {
                    let $t = $dom.find(v);
                    if ($t.length > 0) {
                        $dom.find(v).addClass(v.substring(1) + '_' + grpCls);
                    } else {
                        $dom.addClass(v.substring(1) + '_' + grpCls);
                    }
                });
                return $dom;
            },
            "randomUnique": {
                get generate() {
       
                    //random
                    let idSuffix = '_' + Math.floor((Math.random() * 1000) + 100);
                    return 'rndm' + idSuffix;
                },
                get getRandClass() {
                    return this.randomClass;
                },
                get getRandDataForSort() {
                    return this.randomForSort;
                }
            },
            "ran": function () {
   
                //random
                let idSuffix = '_' + Math.floor((Math.random() * 1000) + 100);
                return 'rndm' + idSuffix;
            },

            "option": {
                "Image Link": { size: true, add: true, val: 'imagelink', rad: true, radTarget: 'a > img' },
                "button": {
                    size: true,
                    add: true,
                    color: {
                        wrap: '.buttonWrapper',
                        back: '.button',
                        font: '.com-button-text'
                    },
                    val: 'buttonWrapper',
                    rad: true,
                    radTarget: 'div.button'
                },
                "font icon": {
                    size: true, add: true,
                    color: {
                        wrap: '.fontIconWrapper',
                        back: '.fonticonComponent',
                        font: '.fa'
                    },
                    val: 'fontIconWrapper',
                    rad: true,
                    radTarget: 'div.fonticonComponent'
                },
                "heading": {
                    size: true,
                    add: true,
                    color: {
                        back: '.heading',
                        font: 'h1'
                    },
                    val: 'heading',
                    rad: true,
                    radTarget: ''
                },
                "text": {
                    size: true,
                    add: true,
                    color: {
                        back: '.text',
                        font: 'p'
                    },
                    val: 'text',
                    rad: true,
                    radTarget: ''
                },
                "underline": {
                    size: true,
                    add: true,
                    color: {},
                    val: 'underline',
                    rad: true,
                    radTarget: ''
                },
                "social link": {
                    size: true,
                    add: true,
                    color: {
                        back: '.fonticon',
                        font: '.fa',
                        wrap: '.sociallink'
                    },
                    val: 'sociallink',
                    rad: true,
                    radTarget: ''
                },
                "text link": {
                    size: true,
                    add: true,
                    color: {
                        back: '.textlink',
                        font: 'a'
                    },
                    val: 'textlink',
                    rad: true,
                    //radTarget: 'div.anchorWrapper',
                    radTarget: ''
                }
            },
            "dropdown": {
                "size": "",
                "add": "",
                "common": "",
                "color": '',
                "rad": '',
                'size_t': '',
                'size_m': '',
                common_t: '',
                common_m: ''
            },

        },
        "commonImageSize": {
            "$parent": function () {
                return $activeDOM.find($('#slcSize option:selected').val());
            },
            "$image": function () {
                return this.$parent().find('img');
            },
            "ImageWidthChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$image(), 'W-[0-9]{1,4}', 'W-' + space);
                ReplaceClassByPattern(ref.$parent(), 'W-[0-9]{1,4}', 'W-' + space);
            },
            "ImageHeightChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$image(), 'H-[0-9]{1,4}', 'H-' + space);
                ReplaceClassByPattern(ref.$parent(), 'H-[0-9]{1,4}', 'H-' + space);
            },
            "ImageHeightWidthChange": function (space, $par, ref) {
                ref.ImageHeightChange(space, $par, ref);
                ref.ImageWidthChange(space, $par, ref);
            },
            "imageheight": function () {
                let imageHeight = GetValueByClassName(this.$image(), 'H-[0-9]{1,4}', 'H-');
                imageHeight = imageHeight == 0 ? this.$image().height() : imageHeight;
                AdvanceSageSlider($('#imageHeightSlider'), $('#imageHeightHandle'), 1, 1080, imageHeight, this.ImageHeightChange, this.$parent(), 'px', this);
            },
            "imageheightWidth": function () {
                let imageWidth = GetValueByClassName(this.$image(), 'H-[0-9]{1,4}', 'H-');
                imageWidth = imageWidth == 0 ? this.$image().height() : imageWidth;
                AdvanceSageSlider($('#imageRoundSlider'), $('#imageRoundHandle'), 1, 1080, imageWidth, this.ImageHeightWidthChange, this.$parent(), 'px', this);
            },
            "RemoveImageHeightWidth": function () {
                this.RemoveImageHeight();
                this.RemoveImageWidth();
            },
            "RemoveImageHeight": function () {
                ReplaceClassByPattern(this.$image(), 'H-[0-9]{1,4}', '');
                ReplaceClassByPattern(this.$parent(), 'H-[0-9]{1,4}', '');
            },
            "RemoveImageWidth": function () {
                ReplaceClassByPattern(this.$image(), 'W-[0-9]{1,4}', '');
                ReplaceClassByPattern(this.$parent(), 'W-[0-9]{1,4}', '');
            },
            "SFImageWidthChange": function (space, $par, ref) {
                ReplaceClassByPattern(ref.$parent(), 'sfCol_[0-9]{1,3}', 'sfCol_' + space);
            },
            "imagewidth": function () {
                AdvanceSageSlider($('#imagesizeSlider'), $('#imagesizeHandle'), 1, 100, GetValueByClassName(this.$parent(), 'sfCol_[0-9]{1,3}', 'sfCol_'), this.SFImageWidthChange, this.$parent(), '%', this);
            },
            "ImageInit": function ($parent) {
                var $image = $parent.find('img');
                LoadSettings();
                function LoadSettings() {
                    ImageDisplay();
                    ImageWidthEvent();
                    //ImageBorder();
                    ImageFitCover();
                }
                function ImageDisplay() {
                    var imageHeight = $parent.height();
                    var imageWidth = $parent.width();
                    var imageRadius = parseInt($parent.css('border-top-left-radius').replace('%', ''));
                    if (imageRadius > 0) {
                        $('.rectangleOption').hide();
                        $('.roundOption').show();
                        $('#imageDisplay').val('round');
                    } else {
                        $('.rectangleOption').show();
                        $('.roundOption').hide();
                        $('#imageDisplay').val('rectangle');
                    }
                    $('#imageDisplay').on('change', function () {
                        var $this = $(this);
                        var val = $this.val();
                        switch (val) {
                            case 'round':
                                $('.rectangleOption').hide();
                                $('.roundOption').show();
                                ChangeRoundImageWidth();
                                $parent.addClass('round-image');
                                break;
                            case 'rectangle':
                                let height = $image.height();
                                $('.rectangleOption').show();
                                $('.roundOption').hide();
                                $image.css({ 'border-radius': '' });
                                $parent.css({ 'border-radius': '' });
                                $('#imageRadiusSlider').slider('value', 0);
                                $('#imageRadiusHandle').text(0);
                                $parent.removeClass('round-image');
                                ChangeSliderValue($('#imageHeightSlider'), height);
                                let regex = new RegExp('\\b[a-z]{0,1}W-[0-9]{1,4}\\b', 'g');
                                let classes = $image.eq(0).attr('class').match(regex);
                                if (classes.length > 0) {
                                    $.each(classes, function (i, o) {
                                        $image.removeClass(o);
                                        $parent.removeClass(o);
                                    });
                                    ReplaceClassByPattern($image, 'H-[0-9]{1,4}', 'H-' + height);
                                    ReplaceClassByPattern($parent, 'H-[0-9]{1,4}', 'H-' + height);
                                }
                                break;
                        }
                    });

                    ManualHeightEntryEvents();
                    ImageBoxRadius();
                    RoundImageWidth();
                }
                function ManualHeightEntryEvents() {
                    $('#refresImageWidth').on('click', function () {
                        component["verticalcollector"].commonImageSize.RemoveImageHeightWidth();
                        setTimeout(function () {
                            var holderheights = $image.height();
                            ChangeSliderValue($('#imageHeightSlider'), holderheights);
                        }, 100);
                    });
                    component["verticalcollector"].commonImageSize.imageheight();
                }
                function ImageBoxRadius() {
                    //'border-radius'
                    var boxRadius = 0;
                    boxRadius = $parent.attr('border-radius');

                    function ImageBoxRadius(space) {
                        $parent.css({ 'border-radius': space + 'px' });
                        $image.css({ 'border-radius': space + 'px' });
                    }
                    AdvanceSageSlider($('#imageRadiusSlider'), $('#imageRadiusHandle'), 0, 100, boxRadius, ImageBoxRadius, $parent, 'px');
                }

                function RoundImageWidth() {
                    component["verticalcollector"].commonImageSize.imageheightWidth();
                }

                function ChangeRoundImageWidth() {
                    var roundImageWidth = 0;
                    var imgHeight = parseInt($parent.width());
                    var imgWidth = parseInt($parent.height());
                    roundImageWidth = imgWidth;
                    if (imgHeight < imgWidth) {
                        roundImageWidth = imgHeight;
                    }
                    let _common = component["verticalcollector"].commonImageSize;
                    _common.ImageHeightWidthChange(roundImageWidth, $parent, _common);
                    $image.css({
                        'border-radius': '50%'
                    });
                    $parent.css({
                        'border-radius': '50%'
                    });
                    $('#imageRoundSlider').slider('value', roundImageWidth);
                    $('#imageRoundHandle').text(roundImageWidth);
                }
                function ImageWidthEvent() {
                    component["verticalcollector"].commonImageSize.imagewidth();
                }
                function ImageBorder() {
                    var imageBorderStyle = $parent[0].style.borderStyle; //.css('border-style');
                    $('#imgBorderStyle').val(imageBorderStyle);
                    if (imageBorderStyle.length === 0 || imageBorderStyle === 'none') {
                        $('.imgborder').hide();
                    } else {
                        $('.imgborder').show();
                    }

                    $('#imgBorderStyle').on('change', function () {
                        var style = $(this).val();
                        $parent.css('border-style', style);
                        if (style === 'none') {
                            $('.imgborder').hide();
                            $parent.css("border-width", '0px');
                            $('#imgBorderSlider').slider('value', 0);
                            $('#imgBorderHandle').text(0);
                        } else {
                            $('.imgborder').show();
                            var imgBordeVal = parseInt($('#imgBorderHandle').text());
                            if (imgBordeVal == 0)
                                imgBordeVal = 1;
                            $parent.css("border-width", imgBordeVal + 'px');
                            $('#imgBorderSlider').slider('value', imgBordeVal);
                            $('#imgBorderHandle').text(imgBordeVal);
                        }
                    });

                    var imgBorderWidth = $parent[0].style.borderWidth; // $parent.css("border-width");
                    if (imgBorderWidth.length > 0) {
                        imgBorderWidth = parseInt(imgBorderWidth.replace('px', ''));
                    } else {
                        imgBorderWidth = 1;
                    }

                    function RowSepHeight(space) {
                        $parent.css("border-width", space + 'px');
                    }
                    AdvanceSageSlider($('#imgBorderSlider'), $('#imgBorderHandle'), 1, 10, imgBorderWidth, RowSepHeight, $parent, 'px');
                    ImgBorderColor();
                }
                function ImgBorderColor() {
                    $('#imgBorderColor').css('background-color', $parent[0].style.borderColor);
                    var colorPickerOption = ColorPickerOption({
                        renderCallback: function ($elm, toggled) {
                            var objColor = RenderCallBackColor(this);
                            $parent.css({ 'border-color': objColor.bgColor });
                        }
                    });
                    $('#imgBorderColor').colorPicker(colorPickerOption);
                }
                function ImageFitCover() {
                    if ($parent.hasClass('fit-image')) {
                        $('#imageFittoCover').prop('checked', true);
                    } else {
                        $('#imageFittoCover').prop('checked', false);
                    }

                    $('#imageFittoCover').off().on('click', function () {
                        if ($(this).is(':checked')) {
                            $parent.addClass('fit-image');
                        } else {
                            $parent.removeClass('fit-image');
                        }
                    });
                }
            }
        },
    }
,    "verticalcollectors": {
        "componentname": "verticalcollectors",
        "category": "pro",
        "icon": "fa fa-star",
        "row": true,
        "type": "collection",
        "typeicon": "fa fa-th",
        "hidden": true,
        "description": "Make the most out of Contentder’s website builder by reusing similar components across multiple sections with simple copy paste function, saving you a lot of time and effort of working on the same components again and again. Also, combine various dynamic components to make a new one with complete customizable features and present them in various styles.",
        "Screenshot": "https://easybuilder.contentder.com/ComponentScreenshot/row.jpg",
        "collection": false,
        "pageload": function () {
            this.commonStng.removeDeleteEvent($('.verticalcollector'));
            this.commonStng.createcomponent();
        },
        "defaultdata": EasyLibrary.ReadDOM("verticalcollectors/groupdefault"),
        "afterdrop": function ($appendedParent, $appendLayer, dropped, init) {
            let _this = this;
            var cardiconContainer = $appendLayer.find('.verticalcollector');
            if (dropped) {
                if ($appendLayer.find('.collectorItem').length === 0) {
                    var dataType = cardiconContainer.attr('data-type');
                    var defaultCount = parseInt(cardiconContainer.attr('data-cardperrow'));
                    var updatedDefaultData = component[dataType].defaultdata;
                    let compArr = [
                    { el: 'div.imagelink', cls: 'imagelink' },
                    { el: 'div.buttonWrapper', cls: 'buttonWrapper' },
                    { el: 'div.fontIconWrapper', cls: 'fontIconWrapper' },
                    { el: 'div.underline', cls: 'underline' },
                    { el: 'div.heading', cls: 'heading' },
                    { el: 'div.text', cls: 'text' },
                    { el: 'div.sociallink', cls: 'sociallink' },
                    { el: 'div.textlink', cls: 'textlink' }];
                    $.each(compArr, function (i, v) {
                        updatedDefaultData = $(updatedDefaultData).find(v.el).attr('data-ispro', true).attr('data-delcls', v.cls).end().wrapAll('<div />').parent().html();
                    });
                    //updatedDefaultData = $(updatedDefaultData).children('div.SetHdlr').remove().end().wrapAll('<div />').parent().html();
                    //updatedDefaultData = $(updatedDefaultData).children('div.SetHdlr').css('display', 'none').end().wrapAll('<div />').parent().html();
                    updatedDefaultData = $(updatedDefaultData).find('li.copyData').css('display','none').end().wrapAll('<div />').parent().html();
                    var itemsCount = cardiconContainer.attr('data-total');
                    let html = '';
                    if (init == undefined || typeof init == undefined) init = true;
                    if (init) {
                        for (var times = 0; times < itemsCount; times++) {
                            html += '<div class="sfFixed sfCol_33 tsfCol_50 msfCol_100 collectorItem">' + updatedDefaultData + '</div>';
                        }
                    }
                    cardiconContainer.append(html);
                    $appendLayer.find('.cGrid .sortComponent').remove();
                    $appendLayer.find('.verticalcollector .SetHdlr').addClass('no-drag');
                    //BindCopyEvents(cardiconContainer);
                    //let vcItems = $appendLayer.find('.collectorItem');
                    //vcItems.each(function (i) {
                    //    //component['verticalcollector'].afterdrop(cardiconContainer, $(this), true);
                    //});
                }
            }
            _this.commonStng.createcomponent();
            DeleteComponent($appendLayer);
            SettingEvents($appendLayer);
            _this.commonStng.removeDeleteEvent($appendLayer);
            component['verticalcollector'].afterdrop(cardiconContainer.parent(), cardiconContainer, true);
            let collectorCommon = component['verticalcollector'].collectorCommon;
            collectorCommon.deleteComponent($appendLayer.find('.buttonWrapper'));
            collectorCommon.deleteComponent($appendLayer.find('.fontIconWrapper'));
            collectorCommon.deleteComponent($appendLayer.find('.imagelink'));
            collectorCommon.deleteComponent($appendLayer.find('.underline'));
            collectorCommon.deleteComponent($appendLayer.find('.heading'));
            collectorCommon.deleteComponent($appendLayer.find('.text'));
            collectorCommon.deleteComponent($appendLayer.find('.sociallink'));
            collectorCommon.deleteComponent($appendLayer.find('.textlink'));
            //collectorCommon.getSetDataType.setType($appendLayer);
        },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM('verticalcollectors/basicAddOn') + `
                        <div class ="field-row stElWrap sfCol_100 addNewComp">
                                <span class ="sfCol_50 TxAl-l select__box">
                                    <select id="addCompoSelect">
                                        <option value="Image Link">Image Link</option>
                                        <option value="button">button</option>
                                        <option value="font icon">font icon</option>
                                        <option value="underline">underline</option>
                                        <option value="heading">heading</option>
                                        <option value="text">text</option>
                                        <option value="social link">social link</option>
                                        <option value="text link">text link</option>
                                    </select>
                                </span>
                                <span class ="sfCol_50 TxAl-r">
                                <span class =" btn cb-btn-primary" id="addCompo">Add</span>
                                </span>
                            </div>
                            <div class ="field-row stElWrap col100">
                                <label class ="fCol">Manage items position by dragging and manage visbility using toggle button below </label>
                            </div>
                            <div class ="eldestSetParent"></div>`,

                    "onload": function ($item) {
                        let dataTitle = $activeDOM.attr('data-title');
                        if (dataTitle !== undefined && dataTitle !== "verticalcollectors") {
                            $('.addNewComp').remove();
                        }
                        let $wrapper = $activeDOM.find('.verticalcollector');
                        let $eachWrapper = $wrapper.find('.componentWrap');
                        component['verticalcollector'].settingDOMs.tabs.Basic.onload('',true);
                        
                        $(".eldestSetParent").AdvanceSorting({
                            targetParent: $eachWrapper,
                            targetElem: '.sortableItem',
                            sortableOptions: {
                                items: '.draggable',
                                handle: ".sortHandle",
                                containment: $('.eldestSetParent'),
                                stop: function (event, ui) {
                                    let oldPos = ui.item.startPos;
                                    let newPos = ui.item.index();
                                    if (oldPos != newPos) {
                                        $eachWrapper.each(function (i) {
                                            let targets = $(this).find('.sortableItem');
                                            let $newPosEl = targets.eq(newPos);
                                            let $oldPosEl = targets.eq(oldPos);
                                            if (oldPos > newPos) {
                                                $oldPosEl.insertBefore($newPosEl);
                                            } else {
                                                $oldPosEl.insertAfter($newPosEl);
                                            }
                                        });
                                    }

                                }
                            },
                        });


                        let $topWrap = $activeDOM.find('.cGrid');
                        let $container = $activeDOM.find('div.editor-row-container');
                        let containerDiv = divStart('editor-row-container container-medium') + divEnd;
                        if ($container.length > 0) {
                            var conClass = $container.attr('class').replace('editor-row-container', '').trim();
                            $('#selContainerWidth').val(conClass);
                            $('#wrapContainer').prop('checked', true);
                            $('#additionalContainer').removeClass('Dn');
                        } else {
                            $('#wrapContainer').prop('checked', false);
                            $('#additionalContainer').addClass('Dn');
                        }
                        let collectionHeading = $activeDOM.find('.collectionHeading');
                        let topSubHeading = $activeDOM.find('.topSubHeading');
                        if (collectionHeading.hasClass('Dn')) {
                            $('#showTitle').prop('checked', false);
                        } else {
                            $('#showTitle').prop('checked', true);
                        }
                        if (topSubHeading.hasClass('Dn')) {
                            $('#showDescription').prop('checked', false);
                        } else {
                            $('#showDescription').prop('checked', true);
                        }

                        $('#showTitle').off('click').on('click', function () {
                            if ($(this).prop('checked'))
                                collectionHeading.removeClass('Dn');
                            else
                                collectionHeading.addClass('Dn');
                        });
                        $('#showDescription').off('click').on('click', function () {
                            if ($(this).prop('checked'))
                                topSubHeading.removeClass('Dn');
                            else
                                topSubHeading.addClass('Dn');
                        });
                        $('#wrapContainer').off('click').on('click', function () {
                            if ($(this).prop('checked')) {
                                $topWrap.wrapAll(containerDiv);
                                $('#additionalContainer').removeClass('Dn');
                                $('#selContainerWidth').val('container-medium');
                            } else {
                                $topWrap.unwrap();
                                $('#additionalContainer').addClass('Dn');
                            }
                        });
                        
                        $('#selContainerWidth').off('change').on('change', function () {
                            let v = $(this).val();
                            var $container = $activeDOM.find('.editor-row-container');
                            $container.removeClass('container-small').removeClass('container-medium').removeClass('container-large').removeClass('container-extralarge');
                            $container.addClass(v);
                        });
                    }
                },
                "Layout": {
                    "DOM": EasyLibrary.ReadDOM("verticalcollectors/layout"),
                    "onload": function ($item) {
                        let $allWrapper = $activeDOM.find('.verticalcollector');
                        let $targetElements = $allWrapper.children();
                        $('#totalcounter').text($targetElements.length);
                        $('#perRowDOM').AdvanceItemsPerRow({
                            targetParent: $allWrapper,
                            targetElem: $targetElements,
                            label: "Items Per Row",
                            callback: function (itemperrow) {
                                callGutter(itemperrow);
                            }
                        });
                        let itemperrow = $('#perRowDOM').find('select option:selected').text();
                        callGutter(itemperrow);
                        function callGutter(itemperrow) {
                            $('#gutterDOM').AdvanceGutterSpace({
                                targetParent: $allWrapper,
                                targetElem: $targetElements,
                                itemsperrow: itemperrow,
                            });
                        }
                        $('#addMore').off('click').on('click', Reasign);
                        $('#deleteLast').off('click').on('click', deleteLast);
                        function Reasign() {
                            $allWrapper.append($targetElements.eq(0).clone(true));
                            let cur = $('#totalcounter').text();
                            $('#totalcounter').text(parseInt(cur) + 1);
                            let setDOM = component['verticalcollectors'].settingDOMs.tabs;
                            setDOM.Basic.onload();
                            setDOM.Layout.onload();
                            setDOM.Size.onload();
                            setDOM.Spacing.onload();
                            setDOM.Alignment.onload();
                        }
                        function deleteLast() {
                            let $deleteThis = $activeDOM.find('.collectorItem');
                            let siblingsCount = $deleteThis.length;
                            if (siblingsCount > 1) {
                                SageConfirmDialog('This will remove the last data. Do you want to proceed ?').done(function () {
                                    $('#totalcounter').text(siblingsCount - 1);
                                    $deleteThis.last().remove();
                                });
                            }
                            else {
                                SageAlertDialog("You can't delete all items.");
                            }
                        }
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalcollector/size"),
                    "onload": function ($ele) {
                        component['verticalcollector'].settingDOMs.tabs.Size.onload();
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Size.active();
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalcollector/spaceSetting'),
                    "onload": function ($item) {
                        component['verticalcollector'].settingDOMs.tabs.Spacing.onload(1);
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Spacing.active();
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalcollector/alignmentSetting'),
                    "onload": function ($item) {
                        component['verticalcollector'].settingDOMs.tabs.Alignment.onload();
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Alignment.active();
                    }
                },
            }
        },
        "styleDOMs": {
            "tabs": {
                "Border": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalcollector/border"),
                    "onload": function ($ele) {
                        component['verticalcollector'].styleDOMs.tabs.Border.onload('', true);
                    },
                    "active": function () {
                        component['verticalcollector'].styleDOMs.tabs.Border.active();
                    }
                },
                "Border Radius": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalcollector/borderRadius"),
                    "onload": function ($ele) {
                        component['verticalcollector'].styleDOMs.tabs['Border Radius'].onload();
                    },
                    "active": function () {
                        component['verticalcollector'].styleDOMs.tabs['Border Radius'].active();
                    }
                },
                "Box Shadow": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalcollector/shadow"),
                    "onload": function ($ele) {
                        component['verticalcollector'].styleDOMs.tabs['Box Shadow'].onload();
                    },
                    "active": function () {
                        component['verticalcollector'].styleDOMs.tabs['Box Shadow'].active();
                    }
                },
                "Color": {
                    "DOM": EasyLibrary.ReadDOM('verticalCollector/colorDOM'),
                    "onload": function ($elem) {
                        component['verticalcollector'].collectorCommon.colorHandler();
                    },
                    "active": function () {
                        component['verticalcollector'].styleDOMs.tabs.Color.active();
                    }
                }

            }

        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Visibility": {},
                        "CustomVisibility": {
                            "custom": true,
                            "DOM": EasyLibrary.ReadDOM('verticalcollector/customVisibility'),
                            "onload": function () {
                                //component['verticalcollector'].responsiveDOMs.tabs.Basic.options.CustomVisibility.onload();
                                component['verticalcollector'].collectorCommon.getSetDataType.setType($activeDOM);
                                component['verticalcollector'].collectorCommon.fillDropDown();
                                component['verticalcollector'].collectorCommon.customVisibility();
                            }
                        }
                    }
                },
                "Layout": {
                    "DOM": EasyLibrary.ReadDOM("verticalcollectors/layout"),
                    "onload": function ($item) {
                        component['verticalcollectors'].settingDOMs.tabs.Layout.onload()
                    }
                },
                "Size": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM("verticalcollector/size"),
                    "onload": function ($ele) {
                        component['verticalcollector'].settingDOMs.tabs.Size.onload();
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Size.active();
                    }
                },
                "Spacing": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalcollector/spaceSetting'),
                    "onload": function ($item) {
                        component['verticalcollector'].settingDOMs.tabs.Spacing.onload()
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Spacing.active();
                    }
                },
                "Alignment": {
                    "custom": true,
                    "DOM": EasyLibrary.ReadDOM('verticalcollector/alignmentSetting'),
                    "onload": function ($item) {
                        component['verticalcollector'].settingDOMs.tabs.Alignment.onload();
                    },
                    "active": function () {
                        component['verticalcollector'].settingDOMs.tabs.Alignment.active();
                    }
                }
            }
        },
        "commonStng": {
            "createcomponent": function () {
                initevents();
                function initevents() {

                    $('.CreateComponent').off('click').on('click', function () {
                        $('.activeSetting').removeClass('.activeSetting');
                        let $parent = $(this).closest('.SetHdlr').parent();
                        $parent.addClass('activeSetting');
                        $activeDOM = $parent;
                        FullPagePopup({
                            data: EasyLibrary.ReadDOM("verticalcollectors/comoponentadd"),
                            heading: "Create a component",
                            showheading: true,
                            width: "60%",
                            height: "80%"
                        });
                        createcompo();
                    });
                }
                function createcompo() {
                    let newComponent = {
                        "componentname": "",
                        "category": "pro",
                        "type": "collection",
                        "collection": false,
                        "version": "2.0",
                        "dependencies": "",
                        "icon": "fa fa-star",
                        "row": true,
                        "hidden": false,
                        "defaultdata": '',
                        "typeicon": "fa fa-th",
                        "description": "Make the most out of Contentder’s website builder by reusing similar components across multiple sections with simple copy paste function, saving you a lot of time and effort of working on the same components again and again. Also, combine various dynamic components to make a new one with complete customizable features and present them in various styles.",
                        "Screenshot": "https://easybuilder.contentder.com/ComponentScreenshot/row.jpg",
                        "onDrop": function ($appendLayer) {
                        },
                        "beforeDrop": function ($this) {
                        },
                        "afterdrop": function ($appendedParent, $appendLayer, dropped, init) { },
                        "loadSetting": function ($item) {
                        },
                        "settingDOMs": {
                        },
                        "responsiveDOMs": component["verticalcollectors"].responsiveDOMs,

                    };
                    $("#btnCreateComponent").off('click').on("click", function () {                                            
                        newComponent.componentname = $('#txtCompName').val().trim();
                        newComponent.type = $('#txtCompType').val().trim();
                        newComponent.description = $('#txtCompDesc').val().trim();
                        newComponent.defaultdata = GetDefaultData(newComponent.componentname);
                        if (Validate()) {
                            $.ajax({
                                isPostBack: false,
                                async: false,
                                crossOrigin: true,
                                cache: false,
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                data: JSON2.stringify({
                                    componentValue: JSONStringify(newComponent),
                                    bucketName: newComponent.componentname,
                                    portalID: SageFramePortalID,
                                    userModuleID: webBuilderUserModuleID,
                                    userName: SageFrameUserName,
                                    secureToken: SageFrameSecureToken
                                }),
                                dataType: 'json',
                                crossDomain: true,
                                url: SageFrameHostURL + '/Builder/AddBucket',
                                success: function (data) {
                                    SageAlertDialog("Component added successfully.");
                                },
                                error: function () {
                                },
                            });
                        }
                        function Validate() {
                            if ($('#txtCompName').val().trim().length > 0 &&
                                $('#txtCompType').val().trim().length > 0 &&
                                $('#txtCompDesc').val().trim().length > 0)
                                return true;
                            else {
                                SageAlertDialog("something went wrong");
                                return false;
                            }
                        }
                        function GetDefaultData(componentName) {
                            let $data = $activeDOM;
                            let $addCompoHolder = $('#activecomponentclone');
                            $addCompoHolder.html($data).show();
                            let removeArr = ['.CreateComponent', '.cGrid .sortComponent', '.cGrid .sortComponent', '.verticalcollector .deletehelper'];
                            let length = removeArr.length;
                            for (var i = 0; i < length; i++) {
                                $addCompoHolder.find(removeArr[i]).remove();
                            }
                            $('.setDrp').hide();
                            $addCompoHolder.find('[data-type="verticalcollectors"]').attr('data-title', componentName);
                            $addCompoHolder.find('[data-type="verticalcollector"]').attr('data-title', componentName + " card");
                            $addCompoHolder.find('.SetHdlr.active').removeClass('active');
                            $addCompoHolder.find('.verticalcollector .SetHdlr').addClass('no-drag');
                            $addCompoHolder.find('.verticalcollector .SetHdlr').addClass('no-drag');
                            return $addCompoHolder.html();
                        }
                    });
                }
            },
            "deleteEvents": function ($par) {
                $par.find('.collectorItem >.editor-component >.SetHdlr .collectordelete').on('click', function () {
                    let $vc = $(this).closest('.verticalcollector');
                    if ($vc.find('.collectorItem').length == 1) {
                        SageAlertDialog('Atleast one item is required.');
                        return;
                    }
                    let $this = $(this);
                    SageConfirmDialog(easyMessageList.deletehelper).done(function () {
                        $('#totalcounter').text($this.closest('.collectorItem').siblings().length);
                        $this.closest('.collectorItem').remove();
                    });
                });
            },
            "removeDeleteEvent": function ($par) {
                $par.find('.collectorItem >.editor-component >.SetHdlr .deletehelper').off('click').addClass('collectordelete').removeClass('deletehelper');
                this.deleteEvents($par);
            }
        }
    }

,    "videobanner": {
        "componentname": "videobanner",
        "category": "pro",
        "icon": "fa fa-play-circle-o",
        "row": true,
        "hidden": false,
        "type": "video",
        "description": "You can auto play video of your choice as background with text, description and button over it ",
        "typeicon": "fa fa-th",
        "Screenshot": "https://easybuilder.contentder.com/ComponentScreenshot/videobanner.jpg",
        "defaultdata": EasyLibrary.ReadDOM("videobanner/youtubecom"),
        "beforeDrop": function ($this) {
        },
        "afterdrop": function ($appendedParent, $appendLayer, dropped) {
            let _this = this;
            _this.view.library.playbutton();
            if (dropped) {
                //let $parent = $appendLayer.find('.youtubeVideoWrap');
                //let $youtubeVideoTextMain = $parent.find('.youtubeVideoTextMain');

                //let iframe = $parent.find('iframe');
                //let url = iframe.attr('src');
                //let urlAuto;
                //if (url.includes("autoplay")) {
                //    let position = url.indexOf("autoplay");
                //    let substring = url.substr(position, url.length);
                //    urlAuto = url.replace(substring, "autoplay=1");

                //    $parent.find("iframe").attr('src', urlAuto + "&loop=1&showinfo=0&modestbranding=1&rel=0&mute=1&iv_load_policy=3&playlist=64N14KQaUZw");
                //}
                //else {
                //    url = url + "&autoplay=1";
                //}
                //let $totalHeight = ($parent.height() - $parent.find('.youtubeVideoTextMain').height()) / 2;
                //let textColor = $parent.find('.youtubeVideoTextMain').find('p').css('color', 'rgb(255, 255, 255)');
                _this.view.library.fullpagedisplay($appendLayer);
            }
        },
        "settingDOMs": {
            "tabs": {
                "Basic":
                {
                    "DOM": EasyLibrary.ReadDOM("videobanner/youtubebasic"),
                    "onload": function ($item) {
                        let $parent = $activeDOM;
                        let youTubeurl = 'https://www.youtube.com/embed/';
                        let url = '';
                        InitEvent();
                        function InitEvent() {
                            LoadSettings();
                            Events();
                            LoadSettingsOpacitySize();
                            OpacityColor();
                        }
                        function LoadSettings() {
                            let $iframeSrc = $parent.find('iframe');
                            let url = $iframeSrc.attr('src');
                            let id = GetYouTubeID(url);
                            $("#txtYoutubeLink").val(youTubeurl + id);
                            if ($parent.find('.playiconwrapper').hasClass('Dn')) {
                                $('#EnablePlayButton').prop('checked', false);
                            }
                            else {
                                $('#EnablePlayButton').prop('checked', true);
                            }
                        }
                        function Events() {
                            $("#txtYoutubeLink").on("change", function () {
                                let link = $("#txtYoutubeLink").val().trim();
                                if (link == "") {
                                    SageAlertDialog("Please enter the YouTube Link", 'Alert');
                                }
                                else {
                                    let id = GetYouTubeID(link);
                                    url = youTubeurl + id + '?autoplay=1&loop=1&controls=0&showinfo=0autohide=0&modestbranding=1&rel=0&mute=1&iv_load_policy=3&playlist=64N14KQaUZw';

                                    //let iframe = '';
                                    //iframe += '<iframe style="width:100%;height:100%;border:none;"';
                                    //iframe += ' src="' + url + '?';
                                    //iframe += 'controls=';
                                    //if ($("#chkYouTubeControls").prop("checked")) {
                                    //    iframe += 1;
                                    //}
                                    //else {
                                    //    iframe += 0;
                                    //}
                                    //iframe += '&autoplay=1';
                                    //iframe += '&loop=1';
                                    //iframe += '&controls=0';
                                    //iframe += '&showinfo=0';
                                    //iframe += '&autohide=0';
                                    //iframe += '&modestbranding=1';
                                    //iframe += '&rel=0';
                                    //iframe += '&mute=1'
                                    //iframe += '&iv_load_policy=3';
                                    //iframe += '&playlist=64N14KQaUZw';
                                    //iframe += '"';
                                    //if ($("#chkYouTubeAllowFullScreen").prop("checked")) {
                                    //    iframe += ' allowfullscreen data-fullscreen="1"';
                                    //}
                                    //else {
                                    //    iframe += ' data-fullscreen="1"';
                                    //}
                                    //iframe += ' >';
                                    //iframe += '</iframe>';
                                    //$parent.find(".youtubeVideoWrap").find('iframe').remove();
                                    //$parent.find(".youtubeVideoWrap").find('.youtubeVideoTextMain').prepend(iframe);
                                    //$parent.find('.youtubeVideoWrap').css('height', '100%');
                                    $parent.find(".youtubeVideoWrap").find('iframe').attr('src', url);
                                    if ($parent.hasClass('enableplaybuttonvideobanner')) {
                                        $parent.find('.fonticon').parent().css('display', 'block');
                                    }
                                    else {
                                        $parent.find('.fonticon').parent().css('display', 'none');
                                    }

                                    component['videobanner'].view.library.playbutton();
                                }
                            });
                            $('#EnablePlayButton').off('click').on('click', function () {
                                if ($(this).is(':checked')) {
                                    $parent.find('.playiconwrapper').removeClass('Dn');
                                }
                                else {
                                    $parent.find('.playiconwrapper').addClass('Dn');
                                }
                            });
                        }
                        function getParameterByName(name, url) {
                            name = name.replace(/[\[\]]/g, "\\$&");
                            let regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                                results = regex.exec(url);
                            if (!results) return null;
                            if (!results[2]) return '';
                            return decodeURIComponent(results[2].replace(/\+/g, " "));
                        }
                        function GetYouTubeID(url) {
                            let regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
                            let match = url.match(regExp);

                            if (match && match[2].length == 11) {
                                return match[2];
                            } else {
                                return 'error';
                            }
                        }
                        function LoadSettingsOpacitySize() {
                            let opacity = parseInt($parent.find('iframe').css('opacity') * 10);
                            function videobannerOpacitySlider(space) {
                                $parent.find('iframe').css('opacity', space / 10);
                            }
                            AdvanceSageSlider($('#opacitySize'), $('#opacitySizeHandle'), 1, 10, opacity, videobannerOpacitySlider, $parent, '');
                        }
                        function OpacityColor() {
                            $('#VidBannerBgColorPic').css('background-color', $parent.css('background-color'));

                            let objColor = '';
                            let colorOpacVidOption = ColorPickerOption({
                                renderCallback: function ($elm, toggled) {
                                    objColor = RenderCallBackColor(this);
                                    //if ($elm.hasClass('resOpacBg')) {
                                    $parent.css('background-color', objColor.bgColor);
                                    //}
                                }
                            });
                            $('#VidBannerBgColorPic').colorPicker(colorOpacVidOption);
                        }
                    },
                    "selectLayer": function ($elem) {
                        return $activeDOM;
                    }
                },
                "Height": {
                    "DOM": EasyLibrary.ReadDOM("videobanner/youtubeheight"),
                    "onload": function ($item) {
                        component["videobanner"].common.videoHeight();
                    }
                },
                "Spacing":
                   {
                       "options": {
                           "margin": {
                               "max": 80,
                               "min": -80,
                               "times": 5,
                               "position": ["all", "top", "bottom"]
                           }
                       }
                   },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },

            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "view": {
            "view": function () {
                this.library.playbutton();
            },
            "library":
                {
                    "playbutton": function () {
                        let _this = this;
                        $('.VideoBanner').find('.font-icon').off('click').on('click', function () {
                            let $this = $(this);
                            let displayElement = $this.parents('.VideoBanner').find('.youtubeVideoWrap').find('iframe')[0].outerHTML;
                            _this.displaycontent(displayElement);
                        });
                    },
                    "displaycontent": function ($content) {
                        let videoheight = ScreenDimension().height * .6;
                        FullPagePopup({
                            data: `<div class="sfCol_100" style="height:${videoheight}px" >${$content}</div>`,
                            heading: "Preview",
                            height: '90%',
                            width: '60%',
                            showheading: true,
                            onappend: function ($wrapper) {
                                $wrapper.find('iframe').css({ "height": "100%", "width": "100%", "opacity": "1" });
                            }
                        });
                    },
                    "fullpagedisplay": function ($wrappper) {
                        let dAlpha = ViewDeviceAlpha();
                        if ($wrappper.find('.youtubeVideoWrap').hasClass(dAlpha + 'enablevideoheight')) {
                            let height = ScreenDimension().height;
                            $wrappper.addClass(dAlpha + 'H-' + height);
                            $wrappper.find('.youtubeVideoWrap').addClass(dAlpha + 'H-' + height);
                        }
                    }
                }
        },
        "resize": function () {
            let _this = this;
            $('[data-type="videobanner"]').each(function () {
                _this.view.library.fullpagedisplay($(this));
            });
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "heights": {
                            "DOM": EasyLibrary.ReadDOM("videobanner/youtubeheight"),
                            "onload": function () {
                                component["videobanner"].common.videoHeight();
                            }
                        },
                        "visibility": {},
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "bottom"]
                        }
                    }
                },
                "Alignment": {
                    "options": {
                        "horizontal": ["left", "center", "right"]
                    }
                },
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            },
        },
        "common":
           {
               "videoHeight": function ($par) {
                   let $parent = $activeDOM.find('.youtubeVideoWrap');
                   let $MainParent = $activeDOM;
                   init();
                   LoadSettings();
                   function init() {
                       let dAlpha = DeviceAlpha();
                       if ($parent.hasClass(dAlpha + 'enablevideoheight')) {
                           $('#EnableVideoHeight').prop('checked', false);
                           $('#VideoHeight').hide();
                       }
                       else {
                           $('#EnableVideoHeight').prop('checked', true);
                           $('#VideoHeight').show();
                       }
                   }
                   function LoadSettings() {
                       function RowHeight(space) {
                           ReplaceClassByPattern($MainParent, 'H-[0-9]{1,4}', 'H-' + space);
                           ReplaceClassByPattern($MainParent.find('.youtubeVideoWrap'), 'H-[0-9]{1,4}', 'H-' + space);
                       }
                       let videoHeight = 0;
                       videoHeight = GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-');
                       if (videoHeight == 0)
                           videoHeight = parseInt($MainParent.css('height').replace('px', ''));
                       AdvanceSageSlider($('#youtubeVideoHeightSlider'), $('#youtubeVideoHeightHandle'), 5, 1080,
                          videoHeight, RowHeight, $parent, 'px');
                   }
                   $('#refresYouTubeWidth').on('click', function () {
                       $MainParent.css({ 'height': '' });
                   });
                   let tempvalue = '';
                   $('#EnableVideoHeight').off().on('click', function () {
                       var dAlpha = DeviceAlpha();
                       if ($(this).is(':checked')) {
                           $('#VideoHeight').show();
                           $activeDOM.find('.youtubeVideoWrap').removeClass(dAlpha + 'enablevideoheight');
                           let videoHeight = 0;
                           videoHeight = GetValueByClassName($parent, 'H-[0-9]{1,4}', 'H-');
                           if (videoHeight == 0)
                               videoHeight = parseInt($MainParent.css('height').replace('px', ''));
                           //$activeDOM.css("height", videoheights);
                           //$activeDOM.find('.youtubeVideoWrap').css("height", videoheights);
                           ChangeSliderValue($('#youtubeVideoHeightSlider'), videoHeight);
                       } else {
                           $('#VideoHeight').hide();
                           $activeDOM.find('.youtubeVideoWrap').addClass(dAlpha + 'enablevideoheight');
                           let height = ScreenDimension().height;
                           ReplaceClassByPattern($activeDOM, 'H-[0-9]{1,4}', 'H-' + height);
                           ReplaceClassByPattern($activeDOM.find('.youtubeVideoWrap'), 'H-[0-9]{1,4}', 'H-' + height);
                       }
                   });
               }
           }
    }
,    "youtube video": {
        "componentname": "youtube video",
        "category": "advance",
        "icon": "fa fa-youtube",
        "row": false,
        "hidden": false,
        "collection": true,
        "bucket": true,
        "type": "video",
        "defaultdata": EasyLibrary.ReadDOM("youtubecom"),
        "beforeDrop": function ($this) { },
        "afterdrop": function ($appendedParent, $appendLayer) { },
        "settingDOMs": {
            "tabs": {
                "Basic": {
                    "DOM": EasyLibrary.ReadDOM("youtubebasic") + EasyLibrary.ReadDOM("youtubeheight"),
                    "onload": function ($item) {
                        var $parent = $item.parents('.youtubevideo');
                        var youTubeurl = 'https://www.youtube.com/embed/';
                        var url = '';
                        InitEvent();

                        function InitEvent() {
                            LoadSettings();
                            Events();
                        }

                        function LoadSettings() {
                            var $iframeSrc = $parent.find('iframe');
                            var url = $iframeSrc.attr('src');
                            var id = GetYouTubeID(url);
                            $("#txtYoutubeLink").val(youTubeurl + id);
                            var isAllowFull = $iframeSrc.attr("data-fullscreen");
                            if (parseInt(isAllowFull) == 1) {
                                $("#chkYouTubeAllowFullScreen").prop("checked", true);
                            } else {
                                $("#chkYouTubeAllowFullScreen").prop("checked", false);
                            }
                            var controls = getParameterByName("controls", url);
                            if (parseInt(controls) == 1) {
                                $("#chkYouTubeControls").prop("checked", true);
                            } else {
                                $("#chkYouTubeControls").prop("checked", false);
                            }

                            var autoPlay = getParameterByName("autoplay", url);
                            if (parseInt(autoPlay) == 1) {
                                $("#chkYouTubeAutoplay").prop("checked", true);
                            } else {
                                $("#chkYouTubeAutoplay").prop("checked", false);
                            }

                        }

                        function Events() {
                            $("#txtYoutubeLink").on("blur", generateLink);
                            $('#chkYouTubeAutoplay').off().on('change', generateLink);
                            $('#chkYouTubeControls').off().on('change', generateLink);
                            function generateLink() {
                                var link = $("#txtYoutubeLink").val().trim();
                                if (link == "") {
                                    SageAlertDialog("Please enter the YouTube Link", 'Alert');
                                } else {
                                    var id = GetYouTubeID(link);
                                    url = youTubeurl + id;
                                    var iframe = '<iframe style="width:100%;height:100%;border:none;"';
                                    iframe += ' src="' + url + '?';
                                    iframe += 'controls=';
                                    if ($("#chkYouTubeControls").prop("checked")) {
                                        iframe += 1;
                                    } else {
                                        iframe += 0;
                                    }
                                    iframe += '&autoplay=';
                                    if ($("#chkYouTubeAutoplay").prop("checked")) {
                                        iframe += 1;
                                    } else {
                                        iframe += 0;
                                    }
                                    iframe += '"';
                                    if ($("#chkYouTubeAllowFullScreen").prop("checked")) {
                                        iframe += ' allowfullscreen data-fullscreen="1"';
                                    } else {
                                        iframe += ' data-fullscreen="0"';
                                    }
                                    iframe += ' >';
                                    iframe += '</iframe>';
                                    $parent.find(".youtubeVideoWrap").html(iframe);
                                }
                            }
                        }


                        function getParameterByName(name, url) {
                            name = name.replace(/[\[\]]/g, "\\$&");
                            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                                results = regex.exec(url);
                            if (!results) return null;
                            if (!results[2]) return '';
                            return decodeURIComponent(results[2].replace(/\+/g, " "));
                        }

                        function GetYouTubeID(url) {
                            var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
                            var match = url.match(regExp);

                            if (match && match[2].length == 11) {
                                return match[2];
                            } else {
                                return 'error';
                            }
                        }
                        component['youtube video'].HeightSlider($activeDOM);
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        }

                    }
                },
                "Help": {
                    "DOM": EasyLibrary.ReadDOM('ytPlayList/ytPlItemsHelp'),
                    "onload": function ($item) {
                    }
                }
            },
            "selectLayer": function ($elem) {
                return $activeDOM;
            }
        },
        "responsiveDOMs": {
            "tabs": {
                "Basic": {
                    "options": {
                        "Visibility": {},
                        "Height_": {
                            "DOM": EasyLibrary.ReadDOM("youtubeheight"),
                            "onload": function () {
                                component['youtube video'].HeightSlider($activeDOM);
                            }
                        }
                    }
                },
                "Spacing": {
                    "options": {
                        "margin": {
                            "max": 80,
                            "min": -80,
                            "times": 5,
                            "position": ["all", "top", "left", "bottom", "right"]
                        },

                    }
                },
            }
        },
        "HeightSlider": function ($wrapper) {

            let Height = GetValueByClassName($wrapper, 'H-[0-9]{1,4}', 'H-');
            let curWidth = GetValueByClassName($wrapper, 'sfCol_[0-9]{1,4}', 'sfCol_');
            function MapWidthChange(space) {
                ReplaceClassByPattern($wrapper, 'sfCol_[0-9]{1,4}', 'sfCol_' + space);
            }
            AdvanceSageSlider($('#youtubeWidthSlider'), $('#youtubeWidthHandle'), 1, 100, curWidth, MapWidthChange, $wrapper, '%');

            function MapHeightChange(space) {
                ReplaceClassByPattern($wrapper, 'H-[0-9]{1,4}', 'H-' + space);
            }
            AdvanceSageSlider($('#youtubeHeightSlider'), $('#youtubeHeightHeightHandle'), 200, 1000, Height, MapHeightChange, $wrapper, 'px');

            $('#refresYouTubeWidth').on('click', function () {
                ReplaceClassByPattern($wrapper, 'H-[0-9]{1,4}', 'H-' + 200);
                ChangeSliderValue($('#youtubeHeightSlider'), 200);
                ReplaceClassByPattern($wrapper, 'sfCol_[0-9]{1,4}', 'sfCol_-' + 100);
                ChangeSliderValue($('#youtubeWidthSlider'), 100);
            });
        }
    }
,}
